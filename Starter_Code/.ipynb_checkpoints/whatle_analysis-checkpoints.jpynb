 5/1: #this is a jupyter notebook
 5/2: # test
 5/3:
# test
print("hello world")
 6/1:
# create list of tansformers
transformers = ["optimus prime", "megatron", "bumblebee"]
 6/2: print(transformers)
 6/3: transformers.append("starscream")
 6/4: print(transformers)
 6/5: transformers.append("soundwaver")
 6/6: print(transformers)
 6/7: transformers.index("soundwaver")
 6/8: transformers.append("jazz")
 6/9: transformers.append("shockwave")
6/10: print(transformers)
6/11: transformers.len
6/12: print(transformer.len)
6/13: print(len(transformers))
6/14: transformers.remove("soundwaver")
10/1:
total=0
count=0
worst_loss=0
best_gain=0
10/2:
trading_pnl = [ -224,  352, 252, 354, -544,
                -650,   56, 123, -43,  254,
                 325, -123,  47, 321,  123,
                 133, -151, 613, 232, -311 ]
11/1:
# @TODO: Initialize a dictionary of banks and market caps (in billions)
bank_market_caps = {"bank": "market_cap_bns",
14/1:
# @TODO: From the pathlib library, import the main class Path
from pathlib import Path
14/2:
# @TODO: Check the current directory where the Python program is executing from
print(f"Current Working Directory: {Path.cwd()}")
14/3:
# @TODO: Set the path using Pathlib
filepath = Path("C:/Users/phill/OneDrive/Desktop/CU_FinTech/cu-nyc-fin-pt-09-2020-u-c/02-Python/3/Activities/08-Stu_File_IO/Resources/customer_traffic.txt")
14/4:
# Initialize variables
customer_total = 0
day_count = 0

# @TODO: Open the file in "read" mode ('r') and store the contents in the variable 'file'fr
with open (filepath, 'r') as file:
    text = file.read()
    print(text)
14/5:
# Initialize variables
customer_total = 0
day_count = 0

# @TODO: Open the file in "read" mode ('r') and store the contents in the variable 'file'fr
with open (filepath, 'r') as file:
    text = file.read()
    print(text
14/6:
# Initialize variables
customer_total = 0
day_count = 0

# @TODO: Open the file in "read" mode ('r') and store the contents in the variable 'file'fr
with open (filepath, 'r') as file:
    #text = file.read()
    #print(text)
14/7:
# Initialize variables
customer_total = 0
day_count = 0

# @TODO: Open the file in "read" mode ('r') and store the contents in the variable 'file'fr
with open (filepath, 'r') as file:
    text = file.read()
14/8:
    # @TODO: Parse the file line by line
    line_num = 1
    for line in file:
        print(f"line {line_num}: {line}")
        line_num += 1
       

        # @TODO: Convert the number in the text file from string to int (allows for numerical calculations)
        print(type(text)
        



        # @TODO: Sum the total and count of the numbers in the text file



# @TODO: Print out customer_total and day_count




# @TODO: Calculate the average



# @TODO: Set output file name


# @TODO: Open the output path as a file object

    # @TODO: Write daily_average to the output file, convert to string
14/9:
    # @TODO: Parse the file line by line
    line_num = 1
    for line in file:
        print(f"line {line_num}: {line}")
        line_num += 1
14/10:
    # @TODO: Parse the file line by line
    line_num = 1
    for line in file:
        print(f"line {line_num}: {line}")
        line_num += 1
14/11:
# Initialize variables
customer_total = 0
day_count = 0

# @TODO: Open the file in "read" mode ('r') and store the contents in the variable 'file'fr
with open (filepath, 'r') as file:
    text = file.read()
    print(text)
14/12:
# Initialize variables
customer_total = 0
day_count = 0

# @TODO: Open the file in "read" mode ('r') and store the contents in the variable 'file'fr
with open (filepath, 'r') as file:
    text = file.read()
    print(text
14/13:
    # @TODO: Parse the file line by line
    line_num = 1
    for line in file:
        print(f"line {line_num}: {line}")
        line_num += 1
14/14:
# Initialize variables
customer_total = 0
day_count = 0

# @TODO: Open the file in "read" mode ('r') and store the contents in the variable 'file'fr
with open (filepath, 'r') as file:
    text = file.read()
    print(text)
14/15:
    # @TODO: Parse the file line by line
line_num = 1
for line in file:
    print(f"line {line_num}: {line}")
    line_num += 1
14/16:
    # @TODO: Parse the file line by line
line_num = 1
for line in file:
    print(f"line {line_num}: {line}")
    line_num += 1
14/17:
    # @TODO: Parse the file line by line
line_num = 1
for line in file:
print(f"line {line_num}: {line}")
line_num += 1
14/18:
    # @TODO: Parse the file line by line
line_num = 1
for line in file:
    print(f"line {line_num}: {line}")
    line_num += 1
14/19:
        # @TODO: Convert the number in the text file from string to int (allows for numerical calculations)
        print(type(text))
        



        # @TODO: Sum the total and count of the numbers in the text file



# @TODO: Print out customer_total and day_count




# @TODO: Calculate the average



# @TODO: Set output file name


# @TODO: Open the output path as a file object

    # @TODO: Write daily_average to the output file, convert to string
14/20:
# @TODO: Parse the file line by line
line_num = 1
for line in file:
    print(f"line {line_num}: {line}")
    line_num += 1
14/21:
# Initialize variables
customer_total = 0
day_count = 0

# @TODO: Open the file in "read" mode ('r') and store the contents in the variable 'file'fr
with open (filepath, 'r') as file:
    text = file.read()
14/22:
# @TODO: Parse the file line by line
line_num = 1
for line in file:
    print(f"line {line_num}: {line}")
    line_num += 1
17/1: #PyRamen Code
17/2: #Python script needs to analyze the record and calculate the following:
17/3: # 5 - The greatest decrease in losses (date and amount) over the entire period.
17/4: # Import the pathlib and csv library
17/5: # Set the filepath
17/6:
# Initiallize list of records
records = []
17/7: # Open csv file
17/8:
# Import the pathlib and csv library
from pathlib import path
import csv
17/9: # Set the filepath
17/10:
# Set the filepath
csvpath = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/python_homework/pybank/budget_data.csv')
17/11:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiliter=',')
    csv_header = next(csvreader)
    print(csv_header)
17/12:
# Set the filepath
csvpath = Path('C:\Users\phill\OneDrive\Desktop\CU_FinTech\cu-nyc-fin-pt-09-2020-u-c\Homework\02-Python\Instructions\PyBank\Resources')
18/1:
# Import the pathlib and csv library
from pathlib import path
import csv
19/1:
# Import the pathlib and csv library
from pathlib import path
import csv
22/1:
# Import the pathlib and csv library
from pathlib import Path
import csv
22/2:
# Set the filepath
csvpath = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/python_homework/pybank/budget_data.csv')
22/3:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiliter=',')
    csv_header = next(csvreader)
    print(csv_header)
22/4:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    print(csv_header)
23/1:
# Initiallize dictionary of records
records = {}
23/2:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    print(csv_header)
23/3:
# Initiallize dictionary of records
records = {}
23/4:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    print(csv_header)
23/5:
# Initiallize list of records
records = ()
23/6:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    print(csv_header)
24/1:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    print(csv_header)
24/2:
# Import the pathlib and csv library
from pathlib import Path
import csv
24/3:
# Set the filepath
csvpath = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/python_homework/pybank/budget_data.csv')
24/4:
# Initiallize list of records
records = ()
24/5:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    print(csv_header)
24/6:
# Add new column header "Change from previous month" in order to calculate question 3 "average of changes in profits/losses over entire period"
csv_header.append("Change from previous month")
24/7: print(csv_header)
24/8:
# Initiallize list of records
monthly_profit_losses_data = ()
24/9: monthly_profit_losses_data.append(csv_header)
24/10: monthly_pnl.append(csv_header)
24/11:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    print(csv_header)
24/12:
# Add new column header "Change from previous month" in order to calculate question 3 "average of changes in profits/losses over entire period"
csv_header.append("Change from previous month")
24/13: print(csv_header)
24/14: monthly_pnl.append(csv_header)
24/15:
# Initiallize list of records
monthly_pnl = []
24/16:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    print(csv_header)
24/17:
# Add new column header "Change from previous month" in order to calculate question 3 "average of changes in profits/losses over entire period"
csv_header.append("Change from previous month")
24/18: print(csv_header)
24/19: monthly_pnl.append(csv_header)
24/20: monthly_pnl.append(csv_header)
24/21:
monthly_pnl.append(csv_header)
print(csv_header)
24/22: # Calculate change from previous month, and then calculate average change - COME BACK TO THIS
24/23: # Calculate total # of months in dataset
24/24:
monthly_pnl.append(csv_header)
print(csv_header)
24/25:
# Initialize variables

# Calculate total # of months in dataset
24/26:
# Initiallize list of records
monthly_pnl = {}
24/27:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    print(csv_header)
24/28:
# Add new column header "Change from previous month" in order to calculate question 3 "average of changes in profits/losses over entire period"
csv_header.append("Change from previous month")
24/29: print(csv_header)
24/30:
monthly_pnl.append(csv_header)
print(csv_header)
24/31:
# Initiallize list of records
monthly_pnl = []
24/32:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    print(csv_header)
24/33:
# Add new column header "Change from previous month" in order to calculate question 3 "average of changes in profits/losses over entire period"
csv_header.append("Change from previous month")
24/34: print(csv_header)
24/35:
monthly_pnl.append(csv_header)
print(csv_header)
24/36:
# Initialize variables
month = str(row[0])
pnl = int(row[1])
total = 0
average = 0
minimum = 0
maximum = 0
24/37:
# Initialize variables
date = str(row[0])
pnl = int(row[1])
pnl_change = int(row[2])
count = 0
total = 0
average = 0
minimum = 0
maximum = 0
24/38:
# Calculate total # of months in dataset
for date in monthly_pnl:
    count += date
24/39:
# Calculate total # of months in dataset
for date in monthly_pnl:
    total += date
24/40:
# Calculate total # of months in dataset
for row in cvsreader:
        print(row)
    
# Initialize variables
date = str(row[0])
pnl = int(row[1])
pnl_change = int(row[2])
count = 0
total = 0
average = 0
minimum = 0
maximum = 0
24/41:
# Calculate total # of months in dataset
for row in cvsreader:
        print(row)
24/42:
# Calculate total # of months in dataset
for row in cvsreader:
    print(row)
24/43:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    print(csv_header)
24/44:
# Add new column header "Change from previous month" in order to calculate question 3 "average of changes in profits/losses over entire period"
    csv_header.append("Change from previous month")
24/45:
# Add new column header "Change from previous month" in order to calculate question 3 "average of changes in profits/losses over entire period"
csv_header.append("Change from previous month")
24/46:     print(csv_header)
24/47:
monthly_pnl.append(csv_header)
print(csv_header)
24/48:
# Calculate total # of months in dataset
for row in cvsreader:
    print(row)
24/49: print(csv_header)
24/50:
monthly_pnl.append(csv_header)
print(monthly_pnl)
24/51:
# Calculate total # of months in dataset
for row in cvsreader:
    print(row)
24/52:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    print(csv_header)
24/53:
# Calculate total # of months in dataset
for row in csvreader:
    print(row)
24/54:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    print(csv_header)
24/55:
# Add new column header "Change from previous month" in order to calculate question 3 "average of changes in profits/losses over entire period"
    csv_header.append("Change from previous month")
24/56:
# Add new column header "Change from previous month" in order to calculate question 3 "average of changes in profits/losses over entire period"
csv_header.append("Change from previous month")
24/57:     print(csv_header)
24/58:
    monthly_pnl.append(csv_header)
    print(monthly_pnl)
24/59:
# Calculate total # of months in dataset
    for row in csvreader:
        print(row)
24/60:
    # Calculate total # of months in dataset
    for row in csvreader:
        print row:
24/61:
    # Calculate total # of months in dataset
    for row in csvreader:
        print(row)
24/62:
    # Calculate total # of months in dataset
    for row in csvreader:
        print(row)
        # Initialize variables
        month = str(row[0])
        pnl = int(row[1])
        pnl_change = int(row[2])
        count = 0
        total = 0
        average = 0
        minimum = 0
        maximum = 0
24/63:
# Initialize variables
 month = str(row[0])
        pnl = int(row[1])
        pnl_change = int(row[2])
        count = 0
        total = 0
        average = 0
        minimum = 0
        maximum = 0
24/64:
for row in csvreader:    
    date = str(row[0])
    pnl = int(row[1])
    
    change_from_previous_month = ()
24/65:
# Calculate change from previous month, and then calculate average change - COME BACK TO THIS
for row in csvreader:    
    date = str(row[0])
    pnl = int(row[1])
    change_from_previous_month = (int(row[2]))
24/66:
# Calculate change from previous month, and then calculate average change - COME BACK TO THIS
for row in csvreader:    
    date = str(row[0])
    pnl = int(row[1])
    
    change_from_previous_month = *******
24/67:
# Calculate change from previous month, and then calculate average change - COME BACK TO THIS
for row in csvreader:    
    date = str(row[0])
    pnl = int(row[1])
    
    change_from_previous_month = *******
    row.append(change_from_previous_month)
    monthly_pnl.append(row)
24/68:
# Calculate change from previous month, and then calculate average change - COME BACK TO THIS
for row in csvreader:    
    date = str(row[0])
    pnl = int(row[1])
    
    change_from_previous_month = *******
    row.append(change_from_previous_month)
    monthly_pnl.append(row)
24/69:
# Calculate total # of months in dataset
for row in csvreader:
24/70:
# Calculate total # of months in dataset
for row in csvreader:
24/71:
# Calculate total # of months in dataset
count = 0
total = 0
minimum = 0
maximum = 0


for pnl in monthly_pnl:
    total += pnl
    count += 1
24/72:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    print(csv_header)
24/73:
monthly_pnl.append(csv_header)
    print(monthly_pnl)
24/74:
monthly_pnl.append(csv_header)
print(monthly_pnl)
24/75: print(csvreader)
24/76:
monthly_pnl.append(csv_header)
print(monthly_pnl)
24/77:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    print(csv_header)
24/78:
monthly_pnl.append(csv_header)
print(monthly_pnl)
24/79:

print(monthly_pnl)
24/80:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    print(csv_header)
24/81:

print(monthly_pnl)
24/82:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    print(csv_header)
24/83: print(monthly_pnl)
24/84: print(monthly_pnl_data)
24/85:
monthly_pnl_data.append(csvheader)
print(monthly_pnl_data)
24/86:
# Initiallize list of records
monthly_pnl_data = []
24/87:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    print(csv_header)
24/88:
monthly_pnl_data.append(csvheader)
print(monthly_pnl_data)
24/89:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    print(csv_header)
24/90:
monthly_pnl_data.append(csvheader)
print(monthly_pnl_data)
24/91:
# Initiallize list of monthly pnl data
monthly_pnl_data = []
24/92:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    print(csv_header)
24/93:
monthly_pnl_data.append(csv_header)
print(monthly_pnl_data)
24/94:
# Calculate change from previous month, and then calculate average change - COME BACK TO THIS

previous_month_pnl = 0
count = 0
total = 0
minimum = 0
maximum = 0
profits = 0
losses = 0


for row in csvreader:    
    date = str(row[0])
    pnl = int(row[1])
24/95:
for pnl in monthly_pnl:
    # Calculate total # of months in dataset
    total += pnl
    # Calculate the net PNL over entire time period
    count += 1
    
    
    if minimum == 0:
        minimum = pnl
    elif pnl < minimum:
        minimum = pnl
    
    if pnl > maximum:
        maximum = pnl
24/96:
for pnl in monthly_pnl:
    # Calculate total # of months in dataset
    total += pnl
    # Calculate the net PNL over entire time period
    count += 1
    
    
    if minimum == 0:
        minimum = pnl
    elif pnl < minimum:
        minimum = pnl
    
    if pnl > maximum:
        maximum = pnl
24/97:
# Calculate change from previous month, and then calculate average change - COME BACK TO THIS

previous_month_pnl = 0
count = 0
total = 0
minimum = 0
maximum = 0
profits = 0
losses = 0
24/98:
for pnl in monthly_pnl_:
    # Calculate total # of months in dataset
    total += pnl
    # Calculate the net PNL over entire time period
    count += 1
    
    
    if minimum == 0:
        minimum = pnl
    elif pnl < minimum:
        minimum = pnl
    
    if pnl > maximum:
        maximum = pnl
24/99:
# Calculate change from previous month, and then calculate average change - COME BACK TO THIS

previous_month_pnl = 0
count = 0
total = 0
minimum = 0
maximum = 0
profits = 0
losses = 0
24/100:
for pnl in monthly_pnl_data:
    # Calculate total # of months in dataset
    total += pnl
    # Calculate the net PNL over entire time period
    count += 1
    
    
    if minimum == 0:
        minimum = pnl
    elif pnl < minimum:
        minimum = pnl
    
    if pnl > maximum:
        maximum = pnl
24/101:
# Calculate change from previous month, and then calculate average change - COME BACK TO THIS

previous_month_pnl = []
count = 0
total = 0
minimum = 0
maximum = 0
profits = 0
losses = 0
24/102:
# Calculate change from previous month, and then calculate average change - COME BACK TO THIS

previous_month_pnl = []

for row in csvreader:
    print(row)
    
    
count = 0
total = 0
minimum = 0
maximum = 0
profits = 0
losses = 0
24/103:
# Calculate change from previous month, and then calculate average change - COME BACK TO THIS

for row in csvreader:
    print(row)
    
    
count = 0
total = 0
minimum = 0
maximum = 0
profits = 0
losses = 0
24/104:
# Calculate change from previous month, and then calculate average change - COME BACK TO THIS

    for row in csvreader:
        print(row)
    
    
count = 0
total = 0
minimum = 0
maximum = 0
profits = 0
losses = 0
24/105:
# Calculate change from previous month, and then calculate average change - COME BACK TO THIS

    for row in csvreader:
    print(row)
    
    
count = 0
total = 0
minimum = 0
maximum = 0
profits = 0
losses = 0
24/106:
# Calculate change from previous month, and then calculate average change - COME BACK TO THIS

for row in csvreader:
    print(row)
    
    
count = 0
total = 0
minimum = 0
maximum = 0
profits = 0
losses = 0
24/107:
# Calculate change from previous month, and then calculate average change - COME BACK TO THIS

    for row in csvreader:
        print(row)
    
    
count = 0
total = 0
minimum = 0
maximum = 0
profits = 0
losses = 0
24/108:
# Calculate change from previous month, and then calculate average change - COME BACK TO THIS

for row in csvreader:
        print(row)
    
    
count = 0
total = 0
minimum = 0
maximum = 0
profits = 0
losses = 0
24/109:
# Calculate change from previous month, and then calculate average change - COME BACK TO THIS
count = 0
total = 0
minimum = 0
maximum = 0
profits = 0
losses = 0

for row in csvreader:
    print(row)
24/110:
# Calculate change from previous month, and then calculate average change - COME BACK TO THIS
count = 0
total = 0
minimum = 0
maximum = 0
profits = 0
losses = 0
previous_month_pnl = 0

for row in csvreader:
    print(row)
    
    month = row[0]
    pnl = int(row[1])
24/111:
# Calculate change from previous month, and then calculate average change - COME BACK TO THIS


    for row in csvreader:
        print(row)
    
        month = row[0]
        pnl = int(row[1])
  

            
    # Calculate total # of months in dataset
        total += pnl
              
    # Calculate the net PNL over entire time period
        count += 1
    
    
        if minimum == 0:
            minimum = pnl
        elif pnl < minimum:
            minimum = pnl
    
        if pnl > maximum:
            maximum = pnl
24/112:
# Calculate change from previous month, and then calculate average change - COME BACK TO THIS


for row in csvreader:
        print(row)
    
        month = row[0]
        pnl = int(row[1])
  

            
    # Calculate total # of months in dataset
        total += pnl
              
    # Calculate the net PNL over entire time period
        count += 1
    
    
        if minimum == 0:
            minimum = pnl
        elif pnl < minimum:
            minimum = pnl
    
        if pnl > maximum:
            maximum = pnl
24/113:
for row in csvreader:
        print(row)
24/114:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    print(csv_header)
24/115:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    print(csv_header)
    monthly_pnl_data.append(csv_header)
    print(monthly_pnl_data)
    for row in csvreader:
        print(row)
24/116:
        month = row[0]
        pnl = int(row[1])
24/117:
        month = row[0]
        pnl = int(row[1])
24/118:
        month = row[0]
        pnl = int(row[1])
24/119:
    for row in csvreader:
        print(row)
24/120:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    print(csv_header)
    monthly_pnl_data.append(csv_header)
    print(monthly_pnl_data)
24/121:
    for row in csvreader:
        print(row)
24/122:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    print(csv_header)
    monthly_pnl_data.append(csv_header)
    print(monthly_pnl_data)
    for row in csvreader:
        print(row)
24/123:
        month = row[0]
        pnl = int(row[1])
24/124:
        month = row[0]
        pnl = int(row[1])
        monthly_pnl_data.append(row)
24/125:
        month = row[0]
        pnl = int(row[1])
        monthly_pnl_data.append(row)
        print(monthly_pnl_data)
24/126: monthly_pnl_data.remove(row)
24/127: monthly_pnl_data.remove(row)
24/128:
monthly_pnl_data.remove(row)
print(monthly_pnl_data)
24/129:
        month = row[0]
        pnl = int(row[1])
        monthly_pnl_data.append(row)
        print(monthly_pnl_data)
        monthly_pnl_data.remove(row)
        print(monthly_pnl_data)
24/130:
        month = row[0]
        pnl = int(row[1])
24/131:
        month = row[0]
        pnl = int(row[1])
        print(row)
24/132:
        month = row[0]
        pnl = int(row[1])
        print(row, 1)
24/133:
        month = row[0]
        pnl = int(row[1])
        print(row, month)
24/134:
        month = row[0]
        pnl = int(row[1])
        print(row, pnl)
24/135:
        month = row[0]
        pnl = int(row[1])
        monthly_pnl_data.append(row)
        print(row, pnl)
24/136:
        month = row[0]
        pnl = int(row[1])
        monthly_pnl_data.append(row)
        print(row, pnl)
24/137:
        month = row[0]
        pnl = int(row[1])
        monthly_pnl_data.append(row)
        print(monthly_pnl_data)
24/138: for pnl in monthly_pnl_data:
24/139:
count = 0
total = 0
average = 0
minimum = 0
maximum = 0


for month in monthly_pnl_data:
    count += 1
24/140:
count = 0
total = 0
average = 0
minimum = 0
maximum = 0


for month in monthly_pnl_data:
    count += 1
24/141:
count = 0
total = 0
average = 0
minimum = 0
maximum = 0


for month in monthly_pnl_data:
    count += 1
24/142:
count = 0
total = 0
average = 0
minimum = 0
maximum = 0


for month in monthly_pnl_data:
    count += 1
    print(count)
24/143:
count = 0
total = 0
average = 0
minimum = 0
maximum = 0


for month in monthly_pnl_data:
    count += 1
    print(count)
24/144:
count = 0
total = 0
average = 0
minimum = 0
maximum = 0


for pnl in monthly_pnl_data:
    total += pnl
    count += 1
24/145:
count = 0
total = 0
average = 0
minimum = 0
maximum = 0


for pnl in monthly_pnl_data:
    total += pnl
    count += 1
    print(total)
24/146:
count = 0
total = 0
average = 0
minimum = 0
maximum = 0


for pnl in monthly_pnl_data:
    total += pnl
    count += 1
    print(f' net pnl is: [total]")
24/147:
count = 0
total = 0
average = 0
minimum = 0
maximum = 0


for pnl in monthly_pnl_data:
    total += pnl
    count += 1
    print(f' net pnl is: {total}")
24/148:
        month = row[0]
        pnl = int(row[1])
        monthly_pnl_data.append(row)
    count = 0
    total = 0
    average = 0
    minimum = 0
    maximum = 0


    for pnl in monthly_pnl_data:
        total += pnl
        count += 1
        print(f' net pnl is: {total}")
24/149:
        month = row[0]
        pnl = int(row[1])
        monthly_pnl_data.append(row)
count = 0
total = 0
average = 0
minimum = 0
maximum = 0


    for pnl in monthly_pnl_data:
        total += pnl
        count += 1
        print(f' net pnl is: {total}")
24/150:
        month = row[0]
        pnl = int(row[1])
        monthly_pnl_data.append(row)
count = 0
total = 0
average = 0
minimum = 0
maximum = 0


for pnl in monthly_pnl_data:
    total += pnl
    count += 1
    print(f' net pnl is: {total}")
24/151:
        month = row[0]
        pnl = int(row[1])
        monthly_pnl_data.append(row)
count = 0
total = 0
average = 0
minimum = 0
maximum = 0


for pnl in monthly_pnl_data:
    total += pnl
    count += 1
    print(f"net pnl is: {total}")
24/152:
    count = 0
    total = 0
    average = 0
    minimum = 0
    maximum = 0


    for pnl in monthly_pnl_data:
        total += pnl
        count += 1
        print(f' net pnl is: {total}")
24/153:
        month = row[0]
        pnl = int(row[1])
        monthly_pnl_data.append(row)
count = 0
total = 0
average = 0
minimum = 0
maximum = 0


for pnl in monthly_pnl_data:
    # Calculate total # of months in dataset
    total += pnl
    # Calculate the net PNL over entire time period
    count += 1
    print(f"net pnl is: {total}")
    #Calculate the greatest increase in profits (date and amount) over the entire period.
    #Calculate the greatest decrease in losses (date and amount) over the entire period.
    if minimum == 0:
        minimum = pnl
    elif pnl < minimum:
        minimum = pnl
    if pnl > maximum:
        maximum = pnl
26/1:
    for row in csvreader:
        print(row)
26/2:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    print(csv_header)
    monthly_pnl_data.append(csv_header)
    print(monthly_pnl_data)
    for row in csvreader:
        print(row)
26/3:
# Set the filepath
csvpath = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/python_homework/pybank/budget_data.csv')
26/4:
# Import the pathlib and csv library
from pathlib import Path
import csv
26/5:
# Set the filepath
csvpath = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/python_homework/pybank/budget_data.csv')
26/6:
# Initiallize list of monthly pnl data
monthly_pnl_data = []

count = 0
total = 0
minimum = 0
maximum = 0
profits = 0
losses = 0
previous_month_pnl = 0
26/7:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    print(csv_header)
    monthly_pnl_data.append(csv_header)
    print(monthly_pnl_data)
    for row in csvreader:
        print(row)|
26/8:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    print(csv_header)
    monthly_pnl_data.append(csv_header)
    print(monthly_pnl_data)
    for row in csvreader:
        print(row)
26/9:
        month = row[0]
        pnl = int(row[1])
        
        previous_month_pnl = ()
        monthly_pnl_data.append(row)
count = 0
total = 0
average = 0
minimum = 0
maximum = 0


for pnl in monthly_pnl_data:
    # Calculate total # of months in dataset
    total += pnl
    # Calculate the net PNL over entire time period
    count += 1
    print(f"net pnl is: {total}")
    #Calculate the greatest increase in profits (date and amount) over the entire period.
    #Calculate the greatest decrease in losses (date and amount) over the entire period. 
    if minimum == 0:
        minimum = pnl
    elif pnl < minimum:
        minimum = pnl
    if pnl > maximum:
        maximum = pnl
26/10:
        month = row[0]
        pnl = int(row[1])
26/11:
    previous_month_pnl = next(row)
    print(previous_month_pnl)
26/12:
    previous_month_pnl = next(row)
        print(previous_month_pnl)
26/13:
    previous_month_pnl = next(row)
    print(previous_month_pnl)
26/14:
    previous_month_pnl = next(row)
    for row in previous_month_pnl:
        print(row)
26/15:
    previous_month_pnl = []
    for row in range(pnl):
        print(range(pnl(1,))
26/16:
    previous_month_pnl = []
    for row in range(pnl):
        print(range(pnl(1,)
26/17:
    previous_month_pnl = []
    for row in range(pnl):
        print(range(pnl(1,:)
26/18:
    previous_month_pnl = []
    for row in range(pnl):
        print(range(pnl(1)
26/19:
        month = row[0]
        pnl = int(row[1])
        print(pnl)
26/20:
    previous_month_pnl = []
    for row in pnl:
        print(int(range(pnl(1 : )
26/21:
    previous_month_pnl = []
    for row in pnl:
        print(int(range(pnl(1:)
26/22:
    previous_month_pnl = []
    for row in pnl:
        print(int(range(pnl(1:))
26/23:
    previous_month_pnl = []
    for row in pnl:
        print(int(range(pnl(1,))
26/24:
    previous_month_pnl = []
    for row in pnl:
        print(int(range(pnl(1,)))
26/25:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    print(csv_header)
    monthly_pnl_data.append(csv_header)
    print(monthly_pnl_data)
    for row in csvreader:
        print(row)

        month = row[0]
        pnl = int(row[1])
        print(pnl(range(1,7)))
26/26:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    print(csv_header)
    monthly_pnl_data.append(csv_header)
    print(monthly_pnl_data)
    for row in csvreader:
        print(row)

        month = row[0]
        pnl = int(row[1])
26/27:
    for row in pnl:
        print(int(range(pnl(1,)))
27/1:
# Import the pathlib and csv library
from pathlib import Path
import csv
27/2:
# Set the filepath
csvpath = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/python_homework/pybank/budget_data.csv')
27/3:
# Initiallize list of monthly pnl data
monthly_pnl_data = []

count = 0
total = 0
minimum = 0
maximum = 0
profits = 0
losses = 0
previous_month_pnl = []
month_cnt = 0
pnl = 0.0
date = ""
27/4:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    print(csv_header)
    #monthly_pnl_data.append(csv_header)
    #print(monthly_pnl_data)
    for row in csvreader:
        #print(row[0]) #print date
        #print(row[1]) # print profit/loss
        #print(row)
        month_cnt = month_cnt+1
        date = row[0]
        pnl = float(row[1])
    print(month_cnt)
27/5:
# Initiallize list of monthly pnl data
monthly_pnl_data = []

count = 0
total = 0
minimum = 0
maximum = 0
profits = 0
losses = 0
previous_month_pnl = []
month_cnt = 0
pnl = 0.0
date = ""
27/6:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    #print(csv_header)
    #monthly_pnl_data.append(csv_header)
    #print(monthly_pnl_data)
    for row in csvreader:
        #print(row[0]) #print date
        #print(row[1]) # print profit/loss
        #print(row)
        month_cnt = month_cnt+1
        date = row[0]
        pnl = float(row[1])
        total_net_pnl = total_net_pnl+pnl
    print(month_cnt)
27/7:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    #print(csv_header)
    #monthly_pnl_data.append(csv_header)
    #print(monthly_pnl_data)
    for row in csvreader:
        #print(row[0]) #print date
        #print(row[1]) # print profit/loss
        #print(row)
        month_cnt = month_cnt+1
        date = row[0]
        pnl = float(row[1])
        total_net_pnl = total_net_pnl+pnl
    print(month_cnt)
    print(total_net_pnl)
27/8:
# Initiallize list of monthly pnl data
monthly_pnl_data = []

count = 0
total = 0
minimum = 0
maximum = 0
profits = 0
losses = 0
previous_month_pnl = []
month_cnt = 0
pnl = 0.0
date = ""
total__net_pnl = 0
27/9:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    #print(csv_header)
    #monthly_pnl_data.append(csv_header)
    #print(monthly_pnl_data)
    for row in csvreader:
        #print(row[0]) #print date
        #print(row[1]) # print profit/loss
        #print(row)
        month_cnt = month_cnt+1
        date = row[0]
        pnl = float(row[1])
        total_net_pnl = total_net_pnl+pnl
    print(month_cnt)
    print(total_net_pnl)
27/10:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    #print(csv_header)
    #monthly_pnl_data.append(csv_header)
    #print(monthly_pnl_data)
    for row in csvreader:
        #print(row[0]) #print date
        #print(row[1]) # print profit/loss
        #print(row)
        month_cnt = month_cnt+1
        date = row[0]
        pnl = float(row[1])
        total_net_pnl = total_net_pnl+pnl
    print(month_cnt)
    print(total_net_pnl)
27/11:
# Initiallize list of monthly pnl data
monthly_pnl_data = []

count = 0
total = 0
minimum = 0
maximum = 0
profits = 0
losses = 0
previous_month_pnl = []
month_cnt = 0
pnl = 0.0
date = ""
total_net_pnl = 0
27/12:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    #print(csv_header)
    #monthly_pnl_data.append(csv_header)
    #print(monthly_pnl_data)
    for row in csvreader:
        #print(row[0]) #print date
        #print(row[1]) # print profit/loss
        #print(row)
        month_cnt = month_cnt+1
        date = row[0]
        pnl = float(row[1])
        total_net_pnl = total_net_pnl+pnl
    print(month_cnt)
    print(total_net_pnl)
27/13:
# Initiallize list of monthly pnl data
monthly_pnl_data = []

count = 0
total = 0
minimum = 0
maximum = 0
profits = 0
losses = 0
prev_mnth_pnl = 0
month_cnt = 0
pnl = 0.0
date = ""
total_net_pnl = 0
monthly_change = 0
monthly_change_list= []
27/14:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    #print(csv_header)
    #monthly_pnl_data.append(csv_header)
    #print(monthly_pnl_data)
    for row in csvreader:
        #print(row[0]) #print date
        #print(row[1]) # print profit/loss
        #print(row)
        month_cnt = month_cnt+1
        date = row[0]
        pnl = float(row[1])
        total_net_pnl = total_net_pnl+pnl
        if month_cnt > 1:
            #calculate the change in PNl
            monthly_change = pnl-prev_mnth_pnl
            monthly_change_list.append(monthly_change)
        prev_mnth_pnl = pnl
    print(monthly_change_list)
    print(month_cnt)
    print(total_net_pnl)
27/15:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    #print(csv_header)
    #monthly_pnl_data.append(csv_header)
    #print(monthly_pnl_data)
    for row in csvreader:
        #print(row[0]) #print date
        #print(row[1]) # print profit/loss
        #print(row)
        month_cnt = month_cnt+1
        date = row[0]
        pnl = float(row[1])
        total_net_pnl = total_net_pnl+pnl
        if month_cnt > 1:
            #calculate the change in PNl
            monthly_change = pnl-prev_mnth_pnl
            monthly_change_list.append(monthly_change)
        prev_mnth_pnl = pnl
    print(sum(monthly_change_list)/len(monthly_change_list))
    print(month_cnt)
    print(total_net_pnl)
27/16:
# Initiallize list of monthly pnl data
monthly_pnl_data = []

count = 0
total = 0
minimum = 0
maximum = 0
profits = 0
losses = 0
prev_mnth_pnl = 0
month_cnt = 0
pnl = 0.0
date = ""
total_net_pnl = 0
monthly_change = 0
monthly_change_list= []
27/17:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    #print(csv_header)
    #monthly_pnl_data.append(csv_header)
    #print(monthly_pnl_data)
    for row in csvreader:
        #print(row[0]) #print date
        #print(row[1]) # print profit/loss
        #print(row)
        month_cnt = month_cnt+1
        date = row[0]
        pnl = float(row[1])
        total_net_pnl = total_net_pnl+pnl
        if month_cnt > 1:
            #calculate the change in PNl
            monthly_change = pnl-prev_mnth_pnl
            monthly_change_list.append(monthly_change)
        prev_mnth_pnl = pnl
    print(sum(monthly_change_list)/len(monthly_change_list))
    print(month_cnt)
    print(total_net_pnl)
27/18:
# Initiallize list of monthly pnl data
monthly_pnl_data = []

count = 0
total = 0
minimum = 0
maximum = 0
profits = 0
losses = 0
prev_mnth_pnl = 0
month_cnt = 0
pnl = 0.0
date = ""
total_net_pnl = 0
monthly_change = 0
largest_profit_change = 0
monthly_change_list= []
27/19:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    #print(csv_header)
    #monthly_pnl_data.append(csv_header)
    #print(monthly_pnl_data)
    for row in csvreader:
        #print(row[0]) #print date
        #print(row[1]) # print profit/loss
        #print(row)
        month_cnt = month_cnt+1
        date = row[0]
        pnl = float(row[1])
        total_net_pnl = total_net_pnl+pnl
        if month_cnt > 1:
            #calculate the change in PNl
            monthly_change = pnl-prev_mnth_pnl
            monthly_change_list.append(monthly_change)
            if monthly_change > largest_profit_change:
                largest_profit_change = monthly_change
                max_change_date = date
        prev_mnth_pnl = pnl
    print(sum(monthly_change_list)/len(monthly_change_list))
    print(month_cnt)
    print(total_net_pnl)
27/20:
# Initiallize list of monthly pnl data
monthly_pnl_data = []

count = 0
total = 0
minimum = 0
maximum = 0
profits = 0
losses = 0
prev_mnth_pnl = 0
month_cnt = 0
pnl = 0.0
date = ""
total_net_pnl = 0
monthly_change = 0
largest_profit_change = 0
max_change_date = ""
monthly_change_list= []
27/21:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    #print(csv_header)
    #monthly_pnl_data.append(csv_header)
    #print(monthly_pnl_data)
    for row in csvreader:
        #print(row[0]) #print date
        #print(row[1]) # print profit/loss
        #print(row)
        month_cnt = month_cnt+1
        date = row[0]
        pnl = float(row[1])
        total_net_pnl = total_net_pnl+pnl
        if month_cnt > 1:
            #calculate the change in PNl
            monthly_change = pnl-prev_mnth_pnl
            monthly_change_list.append(monthly_change)
            if monthly_change > largest_profit_change:
                largest_profit_change = monthly_change
                max_change_date = date
        prev_mnth_pnl = pnl
    print(sum(monthly_change_list)/len(monthly_change_list))
    print(month_cnt)
    print(total_net_pnl)
    print(largest_profit_change)
    print(max_change_date)
27/22:
# Initiallize list of monthly pnl data
monthly_pnl_data = []

count = 0
total = 0
minimum = 0
maximum = 0
profits = 0
losses = 0
prev_mnth_pnl = 0
month_cnt = 0
pnl = 0.0
date = ""
total_net_pnl = 0
monthly_change = 0
largest_profit_change = 0
smallest_profit_change = 0
max_change_date = ""
min_change_date = ""
monthly_change_list= []
27/23:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    #print(csv_header)
    #monthly_pnl_data.append(csv_header)
    #print(monthly_pnl_data)
    for row in csvreader:
        #print(row[0]) #print date
        #print(row[1]) # print profit/loss
        #print(row)
        month_cnt = month_cnt+1
        date = row[0]
        pnl = float(row[1])
        total_net_pnl = total_net_pnl+pnl
        if month_cnt > 1:
            #calculate the change in PNl
            monthly_change = pnl-prev_mnth_pnl
            monthly_change_list.append(monthly_change)
            if monthly_change > largest_profit_change:
                largest_profit_change = monthly_change
                max_change_date = date
        prev_mnth_pnl = pnl
    print(sum(monthly_change_list)/len(monthly_change_list))
    print(month_cnt)
    print(total_net_pnl)
    print(largest_profit_change)
    print(max_change_date)
27/24:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    #print(csv_header)
    #monthly_pnl_data.append(csv_header)
    #print(monthly_pnl_data)
    for row in csvreader:
        #print(row[0]) #print date
        #print(row[1]) # print profit/loss
        #print(row)
        month_cnt = month_cnt+1
        date = row[0]
        pnl = float(row[1])
        total_net_pnl = total_net_pnl+pnl
        if month_cnt > 1:
            #calculate the change in PNl
            monthly_change = pnl-prev_mnth_pnl
            monthly_change_list.append(monthly_change)
            if monthly_change > largest_profit_change:
                largest_profit_change = monthly_change
                max_change_date = date
            if monthly_change < smallest_profit_change:
                smallest_profit_change = monthly_change
                min_change_date = date
        prev_mnth_pnl = pnl
    print(sum(monthly_change_list)/len(monthly_change_list))
    print(month_cnt)
    print(total_net_pnl)
    print(largest_profit_change)
    print(max_change_date)
    print(min_change_date)
27/25:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    #print(csv_header)
    #monthly_pnl_data.append(csv_header)
    #print(monthly_pnl_data)
    for row in csvreader:
        #print(row[0]) #print date
        #print(row[1]) # print profit/loss
        #print(row)
        month_cnt = month_cnt+1
        date = row[0]
        pnl = float(row[1])
        total_net_pnl = total_net_pnl+pnl
        if month_cnt > 1:
            #calculate the change in PNl
            monthly_change = pnl-prev_mnth_pnl
            monthly_change_list.append(monthly_change)
            if monthly_change > largest_profit_change:
                largest_profit_change = monthly_change
                max_change_date = date
            if monthly_change < smallest_profit_change:
                smallest_profit_change = monthly_change
                min_change_date = date
        prev_mnth_pnl = pnl
    print(sum(monthly_change_list)/len(monthly_change_list))
    print(month_cnt)
    print(total_net_pnl)
    print(largest_profit_change)
    print(max_change_date)
    print(smallest_profit_change)
    print(min_change_date)
27/26:
# Import the pathlib and csv library
from pathlib import Path
import csv
27/27:
# Set the filepath
csvpath = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/python_homework/pybank/budget_data.csv')
27/28:
# Initiallize list of monthly pnl data
monthly_pnl_data = []

count = 0
total = 0
minimum = 0
maximum = 0
profits = 0
losses = 0
prev_mnth_pnl = 0
month_cnt = 0
pnl = 0.0
date = ""
total_net_pnl = 0
monthly_change = 0
largest_profit_change = 0
smallest_profit_change = 0
max_change_date = ""
min_change_date = ""
monthly_change_list= []
27/29:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    #print(csv_header)
    #monthly_pnl_data.append(csv_header)
    #print(monthly_pnl_data)
    for row in csvreader:
        #print(row[0]) #print date
        #print(row[1]) # print profit/loss
        #print(row)
        month_cnt = month_cnt+1
        date = row[0]
        pnl = float(row[1])
        total_net_pnl = total_net_pnl+pnl
        if month_cnt > 1:
            #calculate the change in PNl
            monthly_change = pnl-prev_mnth_pnl
            monthly_change_list.append(monthly_change)
            if monthly_change > largest_profit_change:
                largest_profit_change = monthly_change
                max_change_date = date
            if monthly_change < smallest_profit_change:
                smallest_profit_change = monthly_change
                min_change_date = date
        prev_mnth_pnl = pnl
    print(sum(monthly_change_list)/len(monthly_change_list))
    print(month_cnt)
    print(total_net_pnl)
    print(largest_profit_change)
    print(max_change_date)
    print(smallest_profit_change)
    print(min_change_date)
27/30:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    #print(csv_header)
    #monthly_pnl_data.append(csv_header)
    #print(monthly_pnl_data)
    for row in csvreader:
        #print(row[0]) #print date
        #print(row[1]) # print profit/loss
        #print(row)
        month_cnt = month_cnt+1
        date = row[0]
        pnl = float(row[1])
        total_net_pnl = total_net_pnl+pnl
        if month_cnt > 1:
            #calculate the change in PNl
            monthly_change = pnl-prev_mnth_pnl
            monthly_change_list.append(monthly_change)
            if monthly_change > largest_profit_change:
                largest_profit_change = monthly_change
                max_change_date = date
            if monthly_change < smallest_profit_change:
                smallest_profit_change = monthly_change
                min_change_date = date
        prev_mnth_pnl = pnl
    print(round(sum(monthly_change_list)/len(monthly_change_list)),2)
    print(month_cnt)
    print(total_net_pnl)
    print(largest_profit_change)
    print(max_change_date)
    print(smallest_profit_change)
    print(min_change_date)
27/31:
# Initiallize list of monthly pnl data
monthly_pnl_data = []

count = 0
total = 0
minimum = 0
maximum = 0
profits = 0
losses = 0
prev_mnth_pnl = 0
month_cnt = 0
pnl = 0.0
date = ""
total_net_pnl = 0
monthly_change = 0
largest_profit_change = 0
smallest_profit_change = 0
max_change_date = ""
min_change_date = ""
monthly_change_list= []
27/32:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    #print(csv_header)
    #monthly_pnl_data.append(csv_header)
    #print(monthly_pnl_data)
    for row in csvreader:
        #print(row[0]) #print date
        #print(row[1]) # print profit/loss
        #print(row)
        month_cnt = month_cnt+1
        date = row[0]
        pnl = float(row[1])
        total_net_pnl = total_net_pnl+pnl
        if month_cnt > 1:
            #calculate the change in PNl
            monthly_change = pnl-prev_mnth_pnl
            monthly_change_list.append(monthly_change)
            if monthly_change > largest_profit_change:
                largest_profit_change = monthly_change
                max_change_date = date
            if monthly_change < smallest_profit_change:
                smallest_profit_change = monthly_change
                min_change_date = date
        prev_mnth_pnl = pnl
    print(round(sum(monthly_change_list)/len(monthly_change_list)),2)
    print(month_cnt)
    print(total_net_pnl)
    print(largest_profit_change)
    print(max_change_date)
    print(smallest_profit_change)
    print(min_change_date)
27/33:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    #print(csv_header)
    #monthly_pnl_data.append(csv_header)
    #print(monthly_pnl_data)
    for row in csvreader:
        #print(row[0]) #print date
        #print(row[1]) # print profit/loss
        #print(row)
        month_cnt = month_cnt+1
        date = row[0]
        pnl = float(row[1])
        total_net_pnl = total_net_pnl+pnl
        if month_cnt > 1:
            #calculate the change in PNl
            monthly_change = pnl-prev_mnth_pnl
            monthly_change_list.append(monthly_change)
            if monthly_change > largest_profit_change:
                largest_profit_change = monthly_change
                max_change_date = date
            if monthly_change < smallest_profit_change:
                smallest_profit_change = monthly_change
                min_change_date = date
        prev_mnth_pnl = pnl
    print(round(sum(monthly_change_list)/len(monthly_change_list)), 2)
    print(month_cnt)
    print(total_net_pnl)
    print(largest_profit_change)
    print(max_change_date)
    print(smallest_profit_change)
    print(min_change_date)
27/34:
# Initiallize list of monthly pnl data
monthly_pnl_data = []

count = 0
total = 0
minimum = 0
maximum = 0
profits = 0
losses = 0
prev_mnth_pnl = 0
month_cnt = 0
pnl = 0.0
date = ""
total_net_pnl = 0
monthly_change = 0
largest_profit_change = 0
smallest_profit_change = 0
max_change_date = ""
min_change_date = ""
monthly_change_list= []
27/35:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    #print(csv_header)
    #monthly_pnl_data.append(csv_header)
    #print(monthly_pnl_data)
    for row in csvreader:
        #print(row[0]) #print date
        #print(row[1]) # print profit/loss
        #print(row)
        month_cnt = month_cnt+1
        date = row[0]
        pnl = float(row[1])
        total_net_pnl = total_net_pnl+pnl
        if month_cnt > 1:
            #calculate the change in PNl
            monthly_change = pnl-prev_mnth_pnl
            monthly_change_list.append(monthly_change)
            if monthly_change > largest_profit_change:
                largest_profit_change = monthly_change
                max_change_date = date
            if monthly_change < smallest_profit_change:
                smallest_profit_change = monthly_change
                min_change_date = date
        prev_mnth_pnl = pnl
    print(sum(monthly_change_list)/len(monthly_change_list))
    print(month_cnt)
    print(total_net_pnl)
    print(largest_profit_change)
    print(max_change_date)
    print(smallest_profit_change)
    print(min_change_date)
27/36:
# Initiallize list of monthly pnl data
monthly_pnl_data = []


prev_mnth_pnl = 0
month_cnt = 0
pnl = 0.0
date = ""
total_net_pnl = 0
monthly_change = 0
largest_profit_change = 0
smallest_profit_change = 0
max_change_date = ""
min_change_date = ""
monthly_change_list= []
27/37:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    #print(csv_header)
    #monthly_pnl_data.append(csv_header)
    #print(monthly_pnl_data)
    for row in csvreader:
        #print(row[0]) #print date
        #print(row[1]) # print profit/loss
        #print(row)
        month_cnt = month_cnt+1
        date = row[0]
        pnl = float(row[1])
        total_net_pnl = total_net_pnl+pnl
        if month_cnt > 1:
            #calculate the change in PNl
            monthly_change = pnl-prev_mnth_pnl
            monthly_change_list.append(monthly_change)
            if monthly_change > largest_profit_change:
                largest_profit_change = monthly_change
                max_change_date = date
            if monthly_change < smallest_profit_change:
                smallest_profit_change = monthly_change
                min_change_date = date
        prev_mnth_pnl = pnl
    print(sum(monthly_change_list)/len(monthly_change_list))
    print(month_cnt)
    print(total_net_pnl)
    print(largest_profit_change)
    print(max_change_date)
    print(smallest_profit_change)
    print(min_change_date)
31/1:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    #print(csv_header)
    #monthly_pnl_data.append(csv_header)
    #print(monthly_pnl_data)
    for row in csvreader:
        #print(row[0]) #print date
        #print(row[1]) # print profit/loss
        #print(row)
        month_cnt = month_cnt+1
        date = row[0]
        pnl = float(row[1])
        total_net_pnl = total_net_pnl+pnl
        if month_cnt > 1:
            #calculate the change in PNl
            monthly_change = pnl-prev_mnth_pnl
            monthly_change_list.append(monthly_change)
            if monthly_change > largest_profit_change:
                largest_profit_change = monthly_change
                max_change_date = date
            if monthly_change < smallest_profit_change:
                smallest_profit_change = monthly_change
                min_change_date = date
        prev_mnth_pnl = pnl
    print(round(sum(monthly_change_list)/len(monthly_change_list)), 2)
    print(month_cnt)
    print(total_net_pnl)
    print(largest_profit_change)
    print(max_change_date)
    print(smallest_profit_change)
    print(min_change_date)
31/2:
# Import the pathlib and csv library
from pathlib import Path
import csv
31/3:
# Set the filepath
csvpath = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/python_homework/pybank/budget_data.csv')
31/4:
# Initiallize list of monthly pnl data
monthly_pnl_data = []


prev_mnth_pnl = 0
month_cnt = 0
pnl = 0.0
date = ""
total_net_pnl = 0
monthly_change = 0
largest_profit_change = 0
smallest_profit_change = 0
max_change_date = ""
min_change_date = ""
monthly_change_list= []
31/5:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    #print(csv_header)
    #monthly_pnl_data.append(csv_header)
    #print(monthly_pnl_data)
    for row in csvreader:
        #print(row[0]) #print date
        #print(row[1]) # print profit/loss
        #print(row)
        month_cnt = month_cnt+1
        date = row[0]
        pnl = float(row[1])
        total_net_pnl = total_net_pnl+pnl
        if month_cnt > 1:
            #calculate the change in PNl
            monthly_change = pnl-prev_mnth_pnl
            monthly_change_list.append(monthly_change)
            if monthly_change > largest_profit_change:
                largest_profit_change = monthly_change
                max_change_date = date
            if monthly_change < smallest_profit_change:
                smallest_profit_change = monthly_change
                min_change_date = date
        prev_mnth_pnl = pnl
    print(round(sum(monthly_change_list)/len(monthly_change_list)), 2)
    print(month_cnt)
    print(total_net_pnl)
    print(largest_profit_change)
    print(max_change_date)
    print(smallest_profit_change)
    print(min_change_date)
31/6:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    #print(csv_header)
    #monthly_pnl_data.append(csv_header)
    #print(monthly_pnl_data)
    for row in csvreader:
        #print(row[0]) #print date
        #print(row[1]) # print profit/loss
        #print(row)
        month_cnt = month_cnt+1
        date = row[0]
        pnl = float(row[1])
        total_net_pnl = total_net_pnl+pnl
        if month_cnt > 1:
            #calculate the change in PNl
            monthly_change = pnl-prev_mnth_pnl
            monthly_change_list.append(monthly_change)
            if monthly_change > largest_profit_change:
                largest_profit_change = monthly_change
                max_change_date = date
            if monthly_change < smallest_profit_change:
                smallest_profit_change = monthly_change
                min_change_date = date
        prev_mnth_pnl = pnl
    print(round(sum(monthly_change_list)/len(monthly_change_list)), 4)
    print(month_cnt)
    print(total_net_pnl)
    print(largest_profit_change)
    print(max_change_date)
    print(smallest_profit_change)
    print(min_change_date)
31/7:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    #print(csv_header)
    #monthly_pnl_data.append(csv_header)
    #print(monthly_pnl_data)
    for row in csvreader:
        #print(row[0]) #print date
        #print(row[1]) # print profit/loss
        #print(row)
        month_cnt = month_cnt+1
        date = row[0]
        pnl = float(row[1])
        total_net_pnl = total_net_pnl+pnl
        if month_cnt > 1:
            #calculate the change in PNl
            monthly_change = pnl-prev_mnth_pnl
            monthly_change_list.append(monthly_change)
            if monthly_change > largest_profit_change:
                largest_profit_change = monthly_change
                max_change_date = date
            if monthly_change < smallest_profit_change:
                smallest_profit_change = monthly_change
                min_change_date = date
        prev_mnth_pnl = pnl
    print(round(sum(monthly_change_list)/len(monthly_change_list)), 2)
    print(month_cnt)
    print(total_net_pnl)
    print(largest_profit_change)
    print(max_change_date)
    print(smallest_profit_change)
    print(min_change_date)
31/8:
# Import the pathlib and csv library
from pathlib import Path
import csv
31/9:
# Set the filepath
csvpath = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/python_homework/pybank/budget_data.csv')
31/10:
# Initiallize list of monthly pnl data
monthly_pnl_data = []


prev_mnth_pnl = 0
month_cnt = 0
pnl = 0.0
date = ""
total_net_pnl = 0
monthly_change = 0
largest_profit_change = 0
smallest_profit_change = 0
max_change_date = ""
min_change_date = ""
monthly_change_list= []
31/11:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    #print(csv_header)
    #monthly_pnl_data.append(csv_header)
    #print(monthly_pnl_data)
    for row in csvreader:
        #print(row[0]) #print date
        #print(row[1]) # print profit/loss
        #print(row)
        month_cnt = month_cnt+1
        date = row[0]
        pnl = float(row[1])
        total_net_pnl = total_net_pnl+pnl
        if month_cnt > 1:
            #calculate the change in PNl
            monthly_change = pnl-prev_mnth_pnl
            monthly_change_list.append(monthly_change)
            if monthly_change > largest_profit_change:
                largest_profit_change = monthly_change
                max_change_date = date
            if monthly_change < smallest_profit_change:
                smallest_profit_change = monthly_change
                min_change_date = date
        prev_mnth_pnl = pnl
    print(round(sum(monthly_change_list)/len(monthly_change_list)), 2)
    print(month_cnt)
    print(total_net_pnl)
    print(largest_profit_change)
    print(max_change_date)
    print(smallest_profit_change)
    print(min_change_date)
31/12:
# Import the pathlib and csv library
from pathlib import Path
import csv
31/13:
# Set the filepath
csvpath = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/python_homework/pybank/budget_data.csv')
31/14:
# Initiallize list of monthly pnl data
monthly_pnl_data = []


prev_mnth_pnl = 0
month_cnt = 0
pnl = 0.0
date = ""
total_net_pnl = 0
monthly_change = 0
largest_profit_change = 0
smallest_profit_change = 0
max_change_date = ""
min_change_date = ""
monthly_change_list= []
31/15:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    #print(csv_header)
    #monthly_pnl_data.append(csv_header)
    #print(monthly_pnl_data)
    for row in csvreader:
        #print(row[0]) #print date
        #print(row[1]) # print profit/loss
        #print(row)
        month_cnt = month_cnt+1
        date = row[0]
        pnl = float(row[1])
        total_net_pnl = total_net_pnl+pnl
        if month_cnt > 1:
            #calculate the change in PNl
            monthly_change = pnl-prev_mnth_pnl
            monthly_change_list.append(monthly_change)
            if monthly_change > largest_profit_change:
                largest_profit_change = monthly_change
                max_change_date = date
            if monthly_change < smallest_profit_change:
                smallest_profit_change = monthly_change
                min_change_date = date
        prev_mnth_pnl = pnl
    print(round(sum(monthly_change_list)/len(monthly_change_list), 2))
    print(month_cnt)
    print(total_net_pnl)
    print(largest_profit_change)
    print(max_change_date)
    print(smallest_profit_change)
    print(min_change_date)
31/16:
# Initiallize list of monthly pnl data
monthly_pnl_data = []


prev_mnth_pnl = 0
month_cnt = 0
pnl = 0.0
date = ""
total_net_pnl = 0
monthly_change = 0
greatest_profit_increase = 0
greatest_profit_decrease = 0
max_change_date = ""
min_change_date = ""
monthly_change_list= []
31/17:
# Initiallize list of monthly pnl data
monthly_pnl_data = []


prev_mnth_pnl = 0
month_cnt = 0
pnl = 0.0
date = ""
total_net_pnl = 0
monthly_change = 0
greatest_profit_increase = 0
greatest_profit_decrease = 0
greastest_increase_date = ""
greatest_decrease_date = ""
monthly_change_list= []
31/18:
# Initiallize list of monthly pnl data
monthly_pnl_data = []


prev_mnth_pnl = 0
month_cnt = 0
pnl = 0.0
date = ""
total_net_pnl = 0
monthly_change = 0
greatest_profit_increase = 0
greatest_profit_decrease = 0
greastest_increase_date = ""
greatest_decrease_date = ""
monthly_change_list= []
31/19:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    #print(csv_header)
    #monthly_pnl_data.append(csv_header)
    #print(monthly_pnl_data)
    for row in csvreader:
        #print(row[0]) #print date
        #print(row[1]) # print profit/loss
        #print(row)
        month_cnt = month_cnt+1
        date = row[0]
        pnl = float(row[1])
        total_net_pnl = total_net_pnl+pnl
        if month_cnt > 1:
            #calculate the change in PNl
            monthly_change = pnl-prev_mnth_pnl
            monthly_change_list.append(monthly_change)
            if monthly_change > greatest_profit_increase:
                greatest_profit_increase = monthly_change
                greatest_increase_date = date
            if monthly_change < greatest_profit_decrease:
                greatest_profit_decrease = monthly_change
                greatest_decrease_date = date
        prev_mnth_pnl = pnl
    print(round(sum(monthly_change_list)/len(monthly_change_list), 2))
    print(month_cnt)
    print(total_net_pnl)
    print(greatest_profit_increase)
    print(greatest_increase_date)
    print(greatest_profit_decrease)
    print(greatest_decrease_date)
31/20:
# Initiallize list of monthly pnl data
monthly_pnl_data = []

# Initialize variables for calculations
prev_mnth_pnl = 0
month_cnt = 0
pnl = 0.0
date = ""
total_net_pnl = 0
monthly_change = 0
greatest_profit_increase = 0
greatest_profit_decrease = 0
greastest_increase_date = ""
greatest_decrease_date = ""
monthly_change_list= []
31/21:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    #print(csv_header)
    #monthly_pnl_data.append(csv_header)
    #print(monthly_pnl_data)
    for row in csvreader:
        #print(row[0]) #print date
        #print(row[1]) # print profit/loss
        #print(row)
        month_cnt = month_cnt+1
        date = row[0]
        pnl = float(row[1])
        total_net_pnl = total_net_pnl+pnl
        if month_cnt > 1:
            #calculate the change in PNl
            monthly_change = pnl-prev_mnth_pnl
            monthly_change_list.append(monthly_change)
            if monthly_change > greatest_profit_increase:
                greatest_profit_increase = monthly_change
                greatest_increase_date = date
            if monthly_change < greatest_profit_decrease:
                greatest_profit_decrease = monthly_change
                greatest_decrease_date = date
        prev_mnth_pnl = pnl
    print(round(sum(monthly_change_list)/len(monthly_change_list), 2))
    print(month_cnt)
    print(total_net_pnl)
    print(greatest_profit_increase)
    print(greatest_increase_date)
    print(greatest_profit_decrease)
    print(greatest_decrease_date)
31/22:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    #print(csv_header)
    #monthly_pnl_data.append(csv_header)
    #print(monthly_pnl_data)
    # Start for loop to iterate through list
    for row in csvreader:
        #print(row[0]) #print date
        #print(row[1]) # print profit/loss
        #print(row)
        # Calculate # of months variable is month_cnt
        month_cnt = month_cnt+1
        date = row[0]
        # Calculate total_net_pnl by using variables below
            #monthly_change = pnl - prev_mnth_pnl
        pnl = float(row[1])
        total_net_pnl = total_net_pnl+pnl
        if month_cnt > 1:
            #calculate the change in PNl
            monthly_change = pnl-prev_mnth_pnl
            monthly_change_list.append(monthly_change)
            if monthly_change > greatest_profit_increase:
                greatest_profit_increase = monthly_change
                greatest_increase_date = date
            if monthly_change < greatest_profit_decrease:
                greatest_profit_decrease = monthly_change
                greatest_decrease_date = date
        prev_mnth_pnl = pnl
    print(round(sum(monthly_change_list)/len(monthly_change_list), 2))
    print(month_cnt)
    print(total_net_pnl)
    print(greatest_profit_increase)
    print(greatest_increase_date)
    print(greatest_profit_decrease)
    print(greatest_decrease_date)
31/23:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    #print(csv_header)
    #monthly_pnl_data.append(csv_header)
    #print(monthly_pnl_data)
    # Start for loop to iterate through list
    for row in csvreader:
        #print(row[0]) #print date
        #print(row[1]) # print profit/loss
        #print(row)
        # Calculate # of months variable is month_cnt
        month_cnt = month_cnt+1
        date = row[0]
        # Calculate total_net_pn
        pnl = float(row[1])
        total_net_pnl = total_net_pnl+pnl
        # Calculate the change in PNl - variable is monthly_change
        # initialize monthly_change_list and append monthly_change to it - need monthly_change_list to calculate average of monthly changes
        if month_cnt > 1:
            monthly_change = pnl-prev_mnth_pnl
            monthly_change_list.append(monthly_change)
            # Calculate greatest_profit_increase and greatest_increase_date
            if monthly_change > greatest_profit_increase:
                greatest_profit_increase = monthly_change
                greatest_increase_date = date
            # Calculate greatest_profit_decrease and greatest_decrease_date
            if monthly_change < greatest_profit_decrease:
                greatest_profit_decrease = monthly_change
                greatest_decrease_date = date
        prev_mnth_pnl = pnl
    print(round(sum(monthly_change_list)/len(monthly_change_list), 2))
    print(month_cnt)
    print(total_net_pnl)
    print(greatest_profit_increase)
    print(greatest_increase_date)
    print(greatest_profit_decrease)
    print(greatest_decrease_date)
31/24:
# Import the pathlib and csv library
from pathlib import Path
import csv
31/25:
# Set the filepath
csvpath = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/python_homework/pybank/budget_data.csv')
31/26:
# Initiallize list of monthly pnl data
monthly_pnl_data = []

# Initialize variables for calculations
prev_mnth_pnl = 0
month_cnt = 0
pnl = 0.0
date = ""
total_net_pnl = 0
monthly_change = 0
greatest_profit_increase = 0
greatest_profit_decrease = 0
greastest_increase_date = ""
greatest_decrease_date = ""
monthly_change_list= []
31/27:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    #print(csv_header)
    #monthly_pnl_data.append(csv_header)
    #print(monthly_pnl_data)
    # Start for loop to iterate through list
    for row in csvreader:
        #print(row[0]) #print date
        #print(row[1]) # print profit/loss
        #print(row)
        # Calculate # of months variable is month_cnt
        month_cnt = month_cnt+1
        date = row[0]
        # Calculate total_net_pn
        pnl = float(row[1])
        total_net_pnl = total_net_pnl+pnl
        # Calculate the change in PNl - variable is monthly_change
        # initialize monthly_change_list and append monthly_change to it - need monthly_change_list to calculate average of monthly changes
        if month_cnt > 1:
            monthly_change = pnl-prev_mnth_pnl
            monthly_change_list.append(monthly_change)
            # Calculate greatest_profit_increase and greatest_increase_date
            if monthly_change > greatest_profit_increase:
                greatest_profit_increase = monthly_change
                greatest_increase_date = date
            # Calculate greatest_profit_decrease and greatest_decrease_date
            if monthly_change < greatest_profit_decrease:
                greatest_profit_decrease = monthly_change
                greatest_decrease_date = date
        prev_mnth_pnl = pnl
    print(round(sum(monthly_change_list)/len(monthly_change_list), 2))
    print(month_cnt)
    print(total_net_pnl)
    print(greatest_profit_increase)
    print(greatest_increase_date)
    print(greatest_profit_decrease)
    print(greatest_decrease_date)
31/28:
# Set the path for the output_budget_data_analysis.csv
output_budget_data_analysis = Path("C:/Users/phill/OneDrive/Desktop/CU_FinTech/python_homework/pybank/output_budget_data_analysis.csv")
31/29: # Open the output path as a file and pass into the csv.writer function
31/30:
# Open the output path as a file and pass into the csv.writer function
with open(output_budget_data_analysis, 'w') as csvfile:
    csvwriter = csv.writer(csvfile, delimiter=',')
        print("Financial Analysis")
31/31:
# Open the output path as a file and pass into the csv.writer function
with open(output_budget_data_analysis, 'w') as csvfile:
    csvwriter = csv.writer(csvfile, delimiter=',')
    for row in output_budget_data_analysis:
        csvwriter.writerow(row)
            print("Financial Analysis")
            print(______________________________")
            print(f'Total Months: {month_cnt}')
            print(f'Total Net P/L: {total_net_pnl}')
31/32:
# Import the pathlib and csv library
from pathlib import Path
import csv
31/33:
# Set the filepath
csvpath = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/python_homework/pybank/budget_data.csv')
31/34:
# Initiallize list of monthly pnl data
monthly_pnl_data = []

# Initialize variables for calculations
prev_mnth_pnl = 0
month_cnt = 0
pnl = 0.0
date = ""
total_net_pnl = 0
monthly_change = 0
average_pnl_change = 0
greatest_profit_increase = 0
greatest_profit_decrease = 0
greastest_increase_date = ""
greatest_decrease_date = ""
monthly_change_list= []
31/35:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    #print(csv_header)
    #monthly_pnl_data.append(csv_header)
    #print(monthly_pnl_data)
    # Start for loop to iterate through list
    for row in csvreader:
        #print(row[0]) #print date
        #print(row[1]) # print profit/loss
        #print(row)
        # Calculate # of months variable is month_cnt
        month_cnt = month_cnt+1
        date = row[0]
        # Calculate total_net_pn
        pnl = float(row[1])
        total_net_pnl = total_net_pnl+pnl
        # Calculate the change in PNl - variable is monthly_change
        # initialize monthly_change_list and append monthly_change to it - need monthly_change_list to calculate average of monthly changes - round average 
        if month_cnt > 1:
            monthly_change = pnl-prev_mnth_pnl
            monthly_change_list.append(monthly_change)
            average_pnl_change = round(sum(monthly_change_list)/len(monthly_change_list), 2)
            # Calculate greatest_profit_increase and greatest_increase_date
            if monthly_change > greatest_profit_increase:
                greatest_profit_increase = monthly_change
                greatest_increase_date = date
            # Calculate greatest_profit_decrease and greatest_decrease_date
            if monthly_change < greatest_profit_decrease:
                greatest_profit_decrease = monthly_change
                greatest_decrease_date = date
        prev_mnth_pnl = pnl
    print(average_pnl_change)
    print(month_cnt)
    print(total_net_pnl)
    print(greatest_profit_increase)
    print(greatest_increase_date)
    print(greatest_profit_decrease)
    print(greatest_decrease_date)
31/36:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    #print(csv_header)
    #monthly_pnl_data.append(csv_header)
    #print(monthly_pnl_data)
    # Start for loop to iterate through list
    for row in csvreader:
        #print(row[0]) #print date
        #print(row[1]) # print profit/loss
        #print(row)
        # Calculate # of months variable is month_cnt
        month_cnt = month_cnt+1
        date = row[0]
        # Calculate total_net_pn
        pnl = float(row[1])
        total_net_pnl = total_net_pnl+pnl
        # Calculate the change in PNl - variable is monthly_change
        # initialize monthly_change_list and append monthly_change to it - need monthly_change_list to calculate average of monthly changes - round average 
        if month_cnt > 1:
            monthly_change = pnl-prev_mnth_pnl
            monthly_change_list.append(monthly_change)
            average_pnl_change = round(sum(monthly_change_list)/len(monthly_change_list), 2)
            # Calculate greatest_profit_increase and greatest_increase_date
            if monthly_change > greatest_profit_increase:
                greatest_profit_increase = monthly_change
                greatest_increase_date = date
            # Calculate greatest_profit_decrease and greatest_decrease_date
            if monthly_change < greatest_profit_decrease:
                greatest_profit_decrease = monthly_change
                greatest_decrease_date = date
        prev_mnth_pnl = pnl
    print(average_pnl_change)
    print(month_cnt)
    print(total_net_pnl)
    print(greatest_profit_increase)
    print(greatest_increase_date)
    print(greatest_profit_decrease)
    print(greatest_decrease_date)
31/37:
# Import the pathlib and csv library
from pathlib import Path
import csv
31/38:
# Set the filepath
csvpath = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/python_homework/pybank/budget_data.csv')
31/39:
# Initiallize list of monthly pnl data
monthly_pnl_data = []

# Initialize variables for calculations
prev_mnth_pnl = 0
month_cnt = 0
pnl = 0.0
date = ""
total_net_pnl = 0
monthly_change = 0
average_pnl_change = 0
greatest_profit_increase = 0
greatest_profit_decrease = 0
greastest_increase_date = ""
greatest_decrease_date = ""
monthly_change_list= []
31/40:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    #print(csv_header)
    #monthly_pnl_data.append(csv_header)
    #print(monthly_pnl_data)
    # Start for loop to iterate through list
    for row in csvreader:
        #print(row[0]) #print date
        #print(row[1]) # print profit/loss
        #print(row)
        # Calculate # of months variable is month_cnt
        month_cnt = month_cnt+1
        date = row[0]
        # Calculate total_net_pn
        pnl = float(row[1])
        total_net_pnl = total_net_pnl+pnl
        # Calculate the change in PNl - variable is monthly_change
        # initialize monthly_change_list and append monthly_change to it - need monthly_change_list to calculate average of monthly changes - round average 
        if month_cnt > 1:
            monthly_change = pnl-prev_mnth_pnl
            monthly_change_list.append(monthly_change)
            average_pnl_change = round(sum(monthly_change_list)/len(monthly_change_list), 2)
            # Calculate greatest_profit_increase and greatest_increase_date
            if monthly_change > greatest_profit_increase:
                greatest_profit_increase = monthly_change
                greatest_increase_date = date
            # Calculate greatest_profit_decrease and greatest_decrease_date
            if monthly_change < greatest_profit_decrease:
                greatest_profit_decrease = monthly_change
                greatest_decrease_date = date
        prev_mnth_pnl = pnl
    print(average_pnl_change)
    print(month_cnt)
    print(total_net_pnl)
    print(greatest_profit_increase)
    print(greatest_increase_date)
    print(greatest_profit_decrease)
    print(greatest_decrease_date)
31/41:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    #print(csv_header)
    #monthly_pnl_data.append(csv_header)
    #print(monthly_pnl_data)
    # Start for loop to iterate through list
    for row in csvreader:
        #print(row[0]) #print date
        #print(row[1]) # print profit/loss
        #print(row)
        # Calculate # of months variable is month_cnt
        month_cnt = month_cnt+1
        date = row[0]
        # Calculate total_net_pn
        pnl = float(row[1])
        total_net_pnl = total_net_pnl+pnl
        # Calculate the change in PNl - variable is monthly_change
        # initialize monthly_change_list and append monthly_change to it - need monthly_change_list to calculate average of monthly changes - round average 
        if month_cnt > 1:
            monthly_change = pnl-prev_mnth_pnl
            monthly_change_list.append(monthly_change)
            average_pnl_change = round(sum(monthly_change_list)/len(monthly_change_list), 2)
            # Calculate greatest_profit_increase and greatest_increase_date
            if monthly_change > greatest_profit_increase:
                greatest_profit_increase = monthly_change
                greatest_increase_date = date
            # Calculate greatest_profit_decrease and greatest_decrease_date
            if monthly_change < greatest_profit_decrease:
                greatest_profit_decrease = monthly_change
                greatest_decrease_date = date
        prev_mnth_pnl = pnl
    print(average_pnl_change)
    print(month_cnt)
    print(total_net_pnl)
    print(greatest_profit_increase)
    print(greatest_increase_date)
    print(greatest_profit_decrease)
    print(greatest_decrease_date)
31/42:
# Import the pathlib and csv library
from pathlib import Path
import csv
31/43:
# Set the filepath
csvpath = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/python_homework/pybank/budget_data.csv')
31/44:
# Initiallize list of monthly pnl data
monthly_pnl_data = []

# Initialize variables for calculations
prev_mnth_pnl = 0
month_cnt = 0
pnl = 0.0
date = ""
total_net_pnl = 0
monthly_change = 0
average_pnl_change = 0
greatest_profit_increase = 0
greatest_profit_decrease = 0
greastest_increase_date = ""
greatest_decrease_date = ""
monthly_change_list= []
31/45:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    #print(csv_header)
    #monthly_pnl_data.append(csv_header)
    #print(monthly_pnl_data)
    # Start for loop to iterate through list
    for row in csvreader:
        #print(row[0]) #print date
        #print(row[1]) # print profit/loss
        #print(row)
        # Calculate # of months variable is month_cnt
        month_cnt = month_cnt+1
        date = row[0]
        # Calculate total_net_pn
        pnl = float(row[1])
        total_net_pnl = total_net_pnl+pnl
        # Calculate the change in PNl - variable is monthly_change
        # initialize monthly_change_list and append monthly_change to it - need monthly_change_list to calculate average of monthly changes - round average 
        if month_cnt > 1:
            monthly_change = pnl-prev_mnth_pnl
            monthly_change_list.append(monthly_change)
            average_pnl_change = round(sum(monthly_change_list)/len(monthly_change_list), 2)
            # Calculate greatest_profit_increase and greatest_increase_date
            if monthly_change > greatest_profit_increase:
                greatest_profit_increase = monthly_change
                greatest_increase_date = date
            # Calculate greatest_profit_decrease and greatest_decrease_date
            if monthly_change < greatest_profit_decrease:
                greatest_profit_decrease = monthly_change
                greatest_decrease_date = date
        prev_mnth_pnl = pnl
    print(average_pnl_change)
    print(month_cnt)
    print(total_net_pnl)
    print(greatest_profit_increase)
    print(greatest_increase_date)
    print(greatest_profit_decrease)
    print(greatest_decrease_date)
31/46:
# Set the path for the output_budget_data_analysis.csv
output_budget_data_analysis = Path("C:/Users/phill/OneDrive/Desktop/CU_FinTech/python_homework/pybank/output_budget_data_analysis.csv")
31/47:
# Open the output path as a file and pass into the csv.writer function
with open(output_budget_data_analysis, 'w') as csvfile:
    csvwriter = csv.writer(csvfile, delimiter=',')
    for row in output_budget_data_analysis:
        csvwriter.writerow(row)
            print("Financial Analysis")
            print(______________________________")
            print(f'Total Months: {month_cnt}')
            print(f'Total Net P/L: {total_net_pnl}')
            print(f'Average Monthly P/L Change: {average_pnl_change}')
            print(f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})')
            print(f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')
31/48:
# Initialize a list for financial analysis output
financial analysis = []

# Open the output path as a file and pass into the csv.writer function
with open(output_budget_data_analysis, 'w') as csvfile:
    csvwriter = csv.writer(csvfile, delimiter=',')
    for row in output_budget_data_analysis:
        csvwriter.writerow(row)
            print("Financial Analysis")
            print(______________________________")
            print(f'Total Months: {month_cnt}')
            print(f'Total Net P/L: {total_net_pnl}')
            print(f'Average Monthly P/L Change: {average_pnl_change}')
            print(f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})')
            print(f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')
31/49:
# Import the pathlib and csv library
from pathlib import Path
import csv
31/50:
# Set the filepath
csvpath = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/python_homework/pybank/budget_data.csv')
31/51:
# Initiallize list of monthly pnl data
monthly_pnl_data = []

# Initialize variables for calculations
prev_mnth_pnl = 0
month_cnt = 0
pnl = 0.0
date = ""
total_net_pnl = 0
monthly_change = 0
average_pnl_change = 0
greatest_profit_increase = 0
greatest_profit_decrease = 0
greastest_increase_date = ""
greatest_decrease_date = ""
monthly_change_list= []
31/52:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    #print(csv_header)
    #monthly_pnl_data.append(csv_header)
    #print(monthly_pnl_data)
    # Start for loop to iterate through list
    for row in csvreader:
        #print(row[0]) #print date
        #print(row[1]) # print profit/loss
        #print(row)
        # Calculate # of months variable is month_cnt
        month_cnt = month_cnt+1
        date = row[0]
        # Calculate total_net_pn
        pnl = float(row[1])
        total_net_pnl = total_net_pnl+pnl
        # Calculate the change in PNl - variable is monthly_change
        # initialize monthly_change_list and append monthly_change to it - need monthly_change_list to calculate average of monthly changes - round average 
        if month_cnt > 1:
            monthly_change = pnl-prev_mnth_pnl
            monthly_change_list.append(monthly_change)
            average_pnl_change = round(sum(monthly_change_list)/len(monthly_change_list), 2)
            # Calculate greatest_profit_increase and greatest_increase_date
            if monthly_change > greatest_profit_increase:
                greatest_profit_increase = monthly_change
                greatest_increase_date = date
            # Calculate greatest_profit_decrease and greatest_decrease_date
            if monthly_change < greatest_profit_decrease:
                greatest_profit_decrease = monthly_change
                greatest_decrease_date = date
        prev_mnth_pnl = pnl
    print(average_pnl_change)
    print(month_cnt)
    print(total_net_pnl)
    print(greatest_profit_increase)
    print(greatest_increase_date)
    print(greatest_profit_decrease)
    print(greatest_decrease_date)
31/53:
# Set the path for the output_budget_data_analysis.csv
output_budget_data_analysis = Path("C:/Users/phill/OneDrive/Desktop/CU_FinTech/python_homework/pybank/output_budget_data_analysis.csv")
31/54:
# Initialize a list for financial analysis output
financial analysis = []

# Open the output path as a file and pass into the csv.writer function
with open(output_budget_data_analysis, 'w') as csvfile:
    csvwriter = csv.writer(csvfile, delimiter=',')
    for statement in financial_analysis:
        print("Financial Analysis")
        print(______________________________")
        print(f'Total Months: {month_cnt}')
        print(f'Total Net P/L: {total_net_pnl}')
        print(f'Average Monthly P/L Change: {average_pnl_change}')
        print(f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})')
        print(f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')
31/55:
# Initialize a list for financial analysis output
financial analysis = []

# Open the output path as a file and pass into the csv.writer function
with open(output_budget_data_analysis, 'w') as csvfile:
    csvwriter = csv.writer(csvfile, delimiter=',')
    for row in financial_analysis:
        print("Financial Analysis")
        print(______________________________")
        print(f'Total Months: {month_cnt}')
        print(f'Total Net P/L: {total_net_pnl}')
        print(f'Average Monthly P/L Change: {average_pnl_change}')
        print(f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})')
        print(f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')
31/56:
# Initialize a list for financial analysis output
financial analysis = []

# Open the output path as a file and pass into the csv.writer function
with open(output_budget_data_analysis, 'w') as csvfile:
    csvwriter = csv.writer(csvfile, delimiter=',')
    for row in financial_analysis:
        print("Financial Analysis")
        print(______________________________")
        print(f'Total Months: {month_cnt}')
        print(f'Total Net P/L: {total_net_pnl}')
        print(f'Average Monthly P/L Change: {average_pnl_change}')
        print(f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})')
        print(f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')
31/57:
# Initialize a list for financial analysis output
financial_analysis = []

# Open the output path as a file and pass into the csv.writer function
with open(output_budget_data_analysis, 'w') as csvfile:
    csvwriter = csv.writer(csvfile, delimiter=',')
    for row in financial_analysis:
        print("Financial Analysis")
        print(______________________________")
        print(f'Total Months: {month_cnt}')
        print(f'Total Net P/L: {total_net_pnl}')
        print(f'Average Monthly P/L Change: {average_pnl_change}')
        print(f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})')
        print(f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')
31/58:
# Initialize a list for financial analysis output
financial_analysis = [
        print("Financial Analysis"),
        print(______________________________"),
        print(f'Total Months: {month_cnt}'),
        print(f'Total Net P/L: {total_net_pnl}'),
        print(f'Average Monthly P/L Change: {average_pnl_change}'),
        print(f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})'),
        print(f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')]

# Open the output path as a file and pass into the csv.writer function
with open(output_budget_data_analysis, 'w') as csvfile:
    csvwriter = csv.writer(csvfile, delimiter=',')
    for row in financial_analysis:
              print(row)
31/59:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    #print(csv_header)
    #monthly_pnl_data.append(csv_header)
    #print(monthly_pnl_data)
    # Start for loop to iterate through list
    for row in csvreader:
        #print(row[0]) #print date
        #print(row[1]) # print profit/loss
        #print(row)
        # Calculate # of months variable is month_cnt
        month_cnt = month_cnt+1
        date = row[0]
        # Calculate total_net_pn
        pnl = float(row[1])
        total_net_pnl = total_net_pnl+pnl
        # Calculate the change in PNl - variable is monthly_change
        # initialize monthly_change_list and append monthly_change to it - need monthly_change_list to calculate average of monthly changes - round average 
        if month_cnt > 1:
            monthly_change = pnl-prev_mnth_pnl
            monthly_change_list.append(monthly_change)
            average_pnl_change = round(sum(monthly_change_list)/len(monthly_change_list), 2)
            # Calculate greatest_profit_increase and greatest_increase_date
            if monthly_change > greatest_profit_increase:
                greatest_profit_increase = monthly_change
                greatest_increase_date = date
            # Calculate greatest_profit_decrease and greatest_decrease_date
            if monthly_change < greatest_profit_decrease:
                greatest_profit_decrease = monthly_change
                greatest_decrease_date = date
        prev_mnth_pnl = pnl
    print(average_pnl_change)
    print(month_cnt)
    print(total_net_pnl)
    print(greatest_profit_increase)
    print(greatest_increase_date)
    print(greatest_profit_decrease)
    print(greatest_decrease_date)
31/60:
# Set the path for the output_budget_data_analysis.csv
output_budget_data_analysis = Path("C:/Users/phill/OneDrive/Desktop/CU_FinTech/python_homework/pybank/output_budget_data_analysis.csv")
31/61:
# Initialize a list for financial analysis output
financial_analysis = [
        print("Financial Analysis"),
        print(______________________________"),
        print(f'Total Months: {month_cnt}'),
        print(f'Total Net P/L: {total_net_pnl}'),
        print(f'Average Monthly P/L Change: {average_pnl_change}'),
        print(f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})'),
        print(f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')]

# Open the output path as a file and pass into the csv.writer function
with open(output_budget_data_analysis, 'w') as csvfile:
    csvwriter = csv.writer(csvfile, delimiter=',')
    for row in financial_analysis:
              print(row)
31/62:
# Set the path for the output_budget_data_analysis.csv
output_budget_data_analysis = Path("C:/Users/phill/OneDrive/Desktop/CU_FinTech/python_homework/pybank/output_budget_data_analysis.csv")
31/63:
# Initialize a list for financial analysis output
financial_analysis = [
        print"Financial Analysis",
        print"______________________________",
        print(f'Total Months: {month_cnt}'),
        print(f'Total Net P/L: {total_net_pnl}'),
        print(f'Average Monthly P/L Change: {average_pnl_change}'),
        print(f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})'),
        print(f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')]

# Open the output path as a file and pass into the csv.writer function
with open(output_budget_data_analysis, 'w') as csvfile:
    csvwriter = csv.writer(csvfile, delimiter=',')
    for row in financial_analysis:
              print(row)
31/64:
# Initialize a list for financial analysis output
financial_analysis = [
        "Financial Analysis",
        "______________________________",
        print(f'Total Months: {month_cnt}'),
        print(f'Total Net P/L: {total_net_pnl}'),
        print(f'Average Monthly P/L Change: {average_pnl_change}'),
        print(f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})'),
        print(f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')]

# Open the output path as a file and pass into the csv.writer function
with open(output_budget_data_analysis, 'w') as csvfile:
    csvwriter = csv.writer(csvfile, delimiter=',')
    for row in financial_analysis:
              print(row)
31/65:
# Import the pathlib and csv library
from pathlib import Path
import csv
31/66:
# Set the filepath
csvpath = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/python_homework/pybank/budget_data.csv')
31/67:
# Initiallize list of monthly pnl data
monthly_pnl_data = []

# Initialize variables for calculations
prev_mnth_pnl = 0
month_cnt = 0
pnl = 0.0
date = ""
total_net_pnl = 0
monthly_change = 0
average_pnl_change = 0
greatest_profit_increase = 0
greatest_profit_decrease = 0
greastest_increase_date = ""
greatest_decrease_date = ""
monthly_change_list= []
31/68:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    #print(csv_header)
    #monthly_pnl_data.append(csv_header)
    #print(monthly_pnl_data)
    # Start for loop to iterate through list
    for row in csvreader:
        #print(row[0]) #print date
        #print(row[1]) # print profit/loss
        #print(row)
        # Calculate # of months variable is month_cnt
        month_cnt = month_cnt+1
        date = row[0]
        # Calculate total_net_pn
        pnl = float(row[1])
        total_net_pnl = total_net_pnl+pnl
        # Calculate the change in PNl - variable is monthly_change
        # initialize monthly_change_list and append monthly_change to it - need monthly_change_list to calculate average of monthly changes - round average 
        if month_cnt > 1:
            monthly_change = pnl-prev_mnth_pnl
            monthly_change_list.append(monthly_change)
            average_pnl_change = round(sum(monthly_change_list)/len(monthly_change_list), 2)
            # Calculate greatest_profit_increase and greatest_increase_date
            if monthly_change > greatest_profit_increase:
                greatest_profit_increase = monthly_change
                greatest_increase_date = date
            # Calculate greatest_profit_decrease and greatest_decrease_date
            if monthly_change < greatest_profit_decrease:
                greatest_profit_decrease = monthly_change
                greatest_decrease_date = date
        prev_mnth_pnl = pnl
    print(average_pnl_change)
    print(month_cnt)
    print(total_net_pnl)
    print(greatest_profit_increase)
    print(greatest_increase_date)
    print(greatest_profit_decrease)
    print(greatest_decrease_date)
31/69:
# Set the path for the output_budget_data_analysis.csv
output_budget_data_analysis = Path("C:/Users/phill/OneDrive/Desktop/CU_FinTech/python_homework/pybank/output_budget_data_analysis.csv")
31/70:
# Initialize a list for financial analysis output
financial_analysis = [
        "Financial Analysis",
        "______________________________",
        print(f'Total Months: {month_cnt}'),
        print(f'Total Net P/L: {total_net_pnl}'),
        print(f'Average Monthly P/L Change: {average_pnl_change}'),
        print(f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})'),
        print(f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')]

# Open the output path as a file and pass into the csv.writer function
with open(output_budget_data_analysis, 'w') as csvfile:
    csvwriter = csv.writer(csvfile, delimiter=',')
    for row in financial_analysis:
              print(row)
31/71:
# Import the pathlib and csv library
from pathlib import Path
import csv
31/72:
# Set the filepath
csvpath = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/python_homework/pybank/budget_data.csv')
31/73:
# Initiallize list of monthly pnl data
monthly_pnl_data = []

# Initialize variables for calculations
prev_mnth_pnl = 0
month_cnt = 0
pnl = 0.0
date = ""
total_net_pnl = 0
monthly_change = 0
average_pnl_change = 0
greatest_profit_increase = 0
greatest_profit_decrease = 0
greastest_increase_date = ""
greatest_decrease_date = ""
monthly_change_list= []
31/74:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    #print(csv_header)
    #monthly_pnl_data.append(csv_header)
    #print(monthly_pnl_data)
    # Start for loop to iterate through list
    for row in csvreader:
        #print(row[0]) #print date
        #print(row[1]) # print profit/loss
        #print(row)
        # Calculate # of months variable is month_cnt
        month_cnt = month_cnt+1
        date = row[0]
        # Calculate total_net_pn
        pnl = float(row[1])
        total_net_pnl = total_net_pnl+pnl
        # Calculate the change in PNl - variable is monthly_change
        # initialize monthly_change_list and append monthly_change to it - need monthly_change_list to calculate average of monthly changes - round average 
        if month_cnt > 1:
            monthly_change = pnl-prev_mnth_pnl
            monthly_change_list.append(monthly_change)
            average_pnl_change = round(sum(monthly_change_list)/len(monthly_change_list), 2)
            # Calculate greatest_profit_increase and greatest_increase_date
            if monthly_change > greatest_profit_increase:
                greatest_profit_increase = monthly_change
                greatest_increase_date = date
            # Calculate greatest_profit_decrease and greatest_decrease_date
            if monthly_change < greatest_profit_decrease:
                greatest_profit_decrease = monthly_change
                greatest_decrease_date = date
        prev_mnth_pnl = pnl
    print(average_pnl_change)
    print(month_cnt)
    print(total_net_pnl)
    print(greatest_profit_increase)
    print(greatest_increase_date)
    print(greatest_profit_decrease)
    print(greatest_decrease_date)
31/75:
# Set the path for the output_budget_data_analysis.csv
output_budget_data_analysis = Path("C:/Users/phill/OneDrive/Desktop/CU_FinTech/python_homework/pybank/output_budget_data_analysis.csv")
31/76:
# Initialize a list for financial analysis output
financial_analysis = [
        print("Financial Analysis"),
        print("______________________________"),
        print(f'Total Months: {month_cnt}'),
        print(f'Total Net P/L: {total_net_pnl}'),
        print(f'Average Monthly P/L Change: {average_pnl_change}'),
        print(f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})'),
        print(f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')]

# Open the output path as a file and pass into the csv.writer function
with open(output_budget_data_analysis, 'w') as csvfile:
    csvwriter = csv.writer(csvfile, delimiter=',')
    for row in financial_analysis:
              print(row)
31/77:
# Initialize a list for financial analysis output
financial_analysis = [
        print("Financial Analysis"),
        print("______________________________"),
        print(f'Total Months: {month_cnt}'),
        print(f'Total Net P/L: {total_net_pnl}'),
        print(f'Average Monthly P/L Change: {average_pnl_change}'),
        print(f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})'),
        print(f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')]

# Open the output path as a file and pass into the csv.writer function
with open(output_budget_data_analysis, 'w') as csvfile:
    csvwriter = csv.writer(csvfile, delimiter=',')
    for statement in financial_analysis:
        csvwriter.writerow(statement)
31/78:
# Initialize a list for financial analysis output
financial_analysis = [
        print("Financial Analysis"),
        print("______________________________"),
        print(f'Total Months: {month_cnt}'),
        print(f'Total Net P/L: {total_net_pnl}'),
        print(f'Average Monthly P/L Change: {average_pnl_change}'),
        print(f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})'),
        print(f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')]

# Open the output path as a file and pass into the csv.writer function
with open(output_budget_data_analysis, 'w') as csvfile:
    csvwriter = csv.writer(csvfile, delimiter=',')
    for row in financial_analysis:
        csvwriter.writerow(row)
31/79:
# Initialize a list for financial analysis output
financial_analysis = [
        ("Financial Analysis"),
        print("______________________________"),
        print(f'Total Months: {month_cnt}'),
        print(f'Total Net P/L: {total_net_pnl}'),
        print(f'Average Monthly P/L Change: {average_pnl_change}'),
        print(f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})'),
        print(f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')]

# Open the output path as a file and pass into the csv.writer function
with open(output_budget_data_analysis, 'w') as csvfile:
    csvwriter = csv.writer(csvfile, delimiter=',')
    for row in financial_analysis:
        csvwriter.writerow(row)
31/80:
# Initialize a list for financial analysis output
financial_analysis = [
        "Financial Analysis",
        "______________________________",
        "f'Total Months: {month_cnt}'",
        "f'Total Net P/L: {total_net_pnl}'",
        "f'Average Monthly P/L Change: {average_pnl_change}'",
        "f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})'",
        "f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})'"]

# Open the output path as a file and pass into the csv.writer function
with open(output_budget_data_analysis, 'w') as csvfile:
    csvwriter = csv.writer(csvfile, delimiter=',')
    for row in financial_analysis:
        csvwriter.writerow(row)
31/81:
# Import the pathlib and csv library
from pathlib import Path
import csv
31/82:
# Set the filepath
csvpath = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/python_homework/pybank/budget_data.csv')
31/83:
# Initiallize list of monthly pnl data
monthly_pnl_data = []

# Initialize variables for calculations
prev_mnth_pnl = 0
month_cnt = 0
pnl = 0.0
date = ""
total_net_pnl = 0
monthly_change = 0
average_pnl_change = 0
greatest_profit_increase = 0
greatest_profit_decrease = 0
greastest_increase_date = ""
greatest_decrease_date = ""
monthly_change_list= []
31/84:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    #print(csv_header)
    #monthly_pnl_data.append(csv_header)
    #print(monthly_pnl_data)
    # Start for loop to iterate through list
    for row in csvreader:
        #print(row[0]) #print date
        #print(row[1]) # print profit/loss
        #print(row)
        # Calculate # of months variable is month_cnt
        month_cnt = month_cnt+1
        date = row[0]
        # Calculate total_net_pn
        pnl = float(row[1])
        total_net_pnl = total_net_pnl+pnl
        # Calculate the change in PNl - variable is monthly_change
        # initialize monthly_change_list and append monthly_change to it - need monthly_change_list to calculate average of monthly changes - round average 
        if month_cnt > 1:
            monthly_change = pnl-prev_mnth_pnl
            monthly_change_list.append(monthly_change)
            average_pnl_change = round(sum(monthly_change_list)/len(monthly_change_list), 2)
            # Calculate greatest_profit_increase and greatest_increase_date
            if monthly_change > greatest_profit_increase:
                greatest_profit_increase = monthly_change
                greatest_increase_date = date
            # Calculate greatest_profit_decrease and greatest_decrease_date
            if monthly_change < greatest_profit_decrease:
                greatest_profit_decrease = monthly_change
                greatest_decrease_date = date
        prev_mnth_pnl = pnl
    print(average_pnl_change)
    print(month_cnt)
    print(total_net_pnl)
    print(greatest_profit_increase)
    print(greatest_increase_date)
    print(greatest_profit_decrease)
    print(greatest_decrease_date)
31/85:
# Set the path for the output_budget_data_analysis.csv
output_budget_data_analysis = Path("C:/Users/phill/OneDrive/Desktop/CU_FinTech/python_homework/pybank/output_budget_data_analysis.csv")
31/86:
# Initialize a list for financial analysis output
financial_analysis = [
        ("Financial Analysis"),
        ("______________________________"),
        (f'Total Months: {month_cnt}'),
        (f'Total Net P/L: {total_net_pnl}'),
        (f'Average Monthly P/L Change: {average_pnl_change}'),
        (f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})'),
        (f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')]

# Open the output path as a file and pass into the csv.writer function
with open(output_budget_data_analysis, 'w') as csvfile:
    csvwriter = csv.writer(csvfile, delimiter=',')
    for row in financial_analysis:
        csvwriter.writerow(row)
31/87:
# Initialize a list for financial analysis output
financial_analysis = [
        ("Financial Analysis"),
        ("______________________________"),
        (f'Total Months: {month_cnt}'),
        (f'Total Net P/L: {total_net_pnl}'),
        (f'Average Monthly P/L Change: {average_pnl_change}'),
        (f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})'),
        (f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')]

# Open the output path as a file and pass into the csv.writer function
with open(output_budget_data_analysis, 'w') as csvfile:
    csvwriter = csv.writer(csvfile, delimiter=',')
    for row in financial_analysis:
        csvwriter.writerow(row)
33/1:
# Import the pathlib and csv library
from pathlib import Path
import csv
33/2:
# Set the filepath
csvpath = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/python_homework/pybank/budget_data.csv')
33/3:
# Initiallize list of monthly pnl data
monthly_pnl_data = []

# Initialize variables for calculations
prev_mnth_pnl = 0
month_cnt = 0
pnl = 0.0
date = ""
total_net_pnl = 0
monthly_change = 0
average_pnl_change = 0
greatest_profit_increase = 0
greatest_profit_decrease = 0
greastest_increase_date = ""
greatest_decrease_date = ""
monthly_change_list= []
33/4:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    #print(csv_header)
    #monthly_pnl_data.append(csv_header)
    #print(monthly_pnl_data)
    # Start for loop to iterate through list
    for row in csvreader:
        #print(row[0]) #print date
        #print(row[1]) # print profit/loss
        #print(row)
        # Calculate # of months variable is month_cnt
        month_cnt = month_cnt+1
        date = row[0]
        # Calculate total_net_pn
        pnl = float(row[1])
        total_net_pnl = total_net_pnl+pnl
        # Calculate the change in PNl - variable is monthly_change
        # initialize monthly_change_list and append monthly_change to it - need monthly_change_list to calculate average of monthly changes - round average 
        if month_cnt > 1:
            monthly_change = pnl-prev_mnth_pnl
            monthly_change_list.append(monthly_change)
            average_pnl_change = round(sum(monthly_change_list)/len(monthly_change_list), 2)
            # Calculate greatest_profit_increase and greatest_increase_date
            if monthly_change > greatest_profit_increase:
                greatest_profit_increase = monthly_change
                greatest_increase_date = date
            # Calculate greatest_profit_decrease and greatest_decrease_date
            if monthly_change < greatest_profit_decrease:
                greatest_profit_decrease = monthly_change
                greatest_decrease_date = date
        prev_mnth_pnl = pnl
    print(average_pnl_change)
    print(month_cnt)
    print(total_net_pnl)
    print(greatest_profit_increase)
    print(greatest_increase_date)
    print(greatest_profit_decrease)
    print(greatest_decrease_date)
33/5:
# Initialize a list for financial analysis output
financial_analysis = [
        ("Financial Analysis"),
        ("______________________________"),
        (f'Total Months: {month_cnt}'),
        (f'Total Net P/L: {total_net_pnl}'),
        (f'Average Monthly P/L Change: {average_pnl_change}'),
        (f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})'),
        (f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')]

# Open the output path as a file and pass into the csv.writer function
with open(output_budget_data_analysis, 'w') as csvfile:
    csvwriter = csv.writer(csvfile, delimiter=',')
    for row in financial_analysis:
        csvwriter.writerow(row)
33/6:
# Set the path for the output_budget_data_analysis.csv
output_budget_data_analysis = Path("C:/Users/phill/OneDrive/Desktop/CU_FinTech/python_homework/pybank/output_budget_data_analysis.csv")
33/7:
# Initialize a list for financial analysis output
financial_analysis = [
        ("Financial Analysis"),
        ("______________________________"),
        (f'Total Months: {month_cnt}'),
        (f'Total Net P/L: {total_net_pnl}'),
        (f'Average Monthly P/L Change: {average_pnl_change}'),
        (f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})'),
        (f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')]

# Open the output path as a file and pass into the csv.writer function
with open(output_budget_data_analysis, 'w') as csvfile:
    csvwriter = csv.writer(csvfile, delimiter=',')
    for row in financial_analysis:
        csvwriter.writerow(row)
33/8:
# Set the path for the output_budget_data_analysis.csv
output_budget_data_analysis = Path("C:/Users/phill/OneDrive/Desktop/CU_FinTech/python_homework/pybank/output_budget_data_analysis.csv")
33/9:
# Initialize a list for financial analysis output
financial_analysis = [
        print("Financial Analysis"),
        print("______________________________"),
        print(f'Total Months: {month_cnt}'),
        print(f'Total Net P/L: {total_net_pnl}'),
        print(f'Average Monthly P/L Change: {average_pnl_change}'),
        print(f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})'),
        print(f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')]

# Open the output path as a file and pass into the csv.writer function
with open(output_budget_data_analysis, 'w') as csvfile:
    csvwriter = csv.writer(csvfile, delimiter=',')
    for row in financial_analysis:
        csvwriter.writerow(row)
33/10:
# Initialize a list for financial analysis output
financial_analysis = [
        ("Financial Analysis"),
        ("______________________________"),
        (f'Total Months: {month_cnt}'),
        (f'Total Net P/L: {total_net_pnl}'),
        (f'Average Monthly P/L Change: {average_pnl_change}'),
        (f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})'),
        (f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')]

# Open the output path as a file and pass into the csv.writer function
with open(output_budget_data_analysis, 'w') as csvfile:
    csvwriter = csv.writer(csvfile, delimiter=',')
    for row in financial_analysis:
        csvwriter.writerow(row)
33/11:
# Set the path for the output_budget_data_analysis.csv
output_budget_data_analysis = Path("C:/Users/phill/OneDrive/Desktop/CU_FinTech/python_homework/pybank/output_budget_data_analysis.csv")
33/12:
# Initialize a list for financial analysis output
financial_analysis = [
        "Financial Analysis",
        "______________________________",
        (f'Total Months: {month_cnt}'),
        (f'Total Net P/L: {total_net_pnl}'),
        (f'Average Monthly P/L Change: {average_pnl_change}'),
        (f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})'),
        (f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')]

# Open the output path as a file and pass into the csv.writer function
with open(output_budget_data_analysis, 'w') as csvfile:
    csvwriter = csv.writer(csvfile, delimiter=',')
    for row in financial_analysis:
        csvwriter.writerow(row)
33/13:
# Set the path for the output_budget_data_analysis.csv
output_budget_data_analysis = Path("C:/Users/phill/OneDrive/Desktop/CU_FinTech/python_homework/pybank/output_budget_data_analysis.csv")
33/14:
# Initialize a list for financial analysis output
financial_analysis = [
        "Financial Analysis",
        "______________________________",
        (f'Total Months: {month_cnt}'),
        (f'Total Net P/L: {total_net_pnl}'),
        (f'Average Monthly P/L Change: {average_pnl_change}'),
        (f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})'),
        (f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')]

# Open the output path as a file and pass into the csv.writer function
with open(output_budget_data_analysis, 'w') as csvfile:
    csvwriter = csv.writer(csvfile, delimiter=',')
    for row in financial_analysis:
        print row
33/15:
# Initialize a list for financial analysis output
financial_analysis = [
        "Financial Analysis",
        "______________________________",
        (f'Total Months: {month_cnt}'),
        (f'Total Net P/L: {total_net_pnl}'),
        (f'Average Monthly P/L Change: {average_pnl_change}'),
        (f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})'),
        (f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')]

# Open the output path as a file and pass into the csv.writer function
with open(output_budget_data_analysis, 'w') as csvfile:
    csvwriter = csv.writer(csvfile, delimiter=',')
    for row in financial_analysis:
        print(row)
33/16:
# Initialize a list for financial analysis output
financial_analysis = [
        "Financial Analysis",
        "______________________________",
        (f'Total Months: {month_cnt}'),
        (f'Total Net P/L: {total_net_pnl}'),
        (f'Average Monthly P/L Change: {average_pnl_change}'),
        (f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})'),
        (f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')]

# Open the output path as a file and pass into the csv.writer function
with open(output_budget_data_analysis, 'w') as csvfile:
    csvwriter = csv.writer(csvfile, delimiter=',')
    for row in financial_analysis:
    print(row)
33/17:
# Initialize a list for financial analysis output
financial_analysis = [
        "Financial Analysis",
        "______________________________",
        (f'Total Months: {month_cnt}'),
        (f'Total Net P/L: {total_net_pnl}'),
        (f'Average Monthly P/L Change: {average_pnl_change}'),
        (f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})'),
        (f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')]

# Open the output path as a file and pass into the csv.writer function
with open(output_budget_data_analysis, 'w') as csvfile:
    csvwriter = csv.writer(csvfile, delimiter=',')
    for row in financial_analysis:
print(row)
33/18:
# Initialize a list for financial analysis output
financial_analysis = [
        "Financial Analysis",
        "______________________________",
        (f'Total Months: {month_cnt}'),
        (f'Total Net P/L: {total_net_pnl}'),
        (f'Average Monthly P/L Change: {average_pnl_change}'),
        (f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})'),
        (f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')]

# Open the output path as a file and pass into the csv.writer function
with open(output_budget_data_analysis, 'w') as csvfile:
    csvwriter = csv.writer(csvfile, delimiter=',')
    for row in financial_analysis:
        csvwriter.writerow(str(row))
33/19:
# Set the path for the output_budget_data_analysis.csv
output_budget_data_analysis = Path("C:/Users/phill/OneDrive/Desktop/CU_FinTech/python_homework/pybank/output_budget_data_analysis.csv")
33/20:
# Initialize a list for financial analysis output
financial_analysis = [
        "Financial Analysis",
        "______________________________",
        (f'Total Months: {month_cnt}'),
        (f'Total Net P/L: {total_net_pnl}'),
        (f'Average Monthly P/L Change: {average_pnl_change}'),
        (f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})'),
        (f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')]

# Open the output path as a file and pass into the csv.writer function
with open(output_budget_data_analysis, 'w') as csvfile:
    csvwriter = csv.writer(csvfile, delimiter=',')
    for line in financial_analysis:
        print(line, end='')
        #csvwriter.writerow(str(row))
33/21:
# Initialize a list for financial analysis output
financial_analysis = [
        "Financial Analysis",
        "______________________________",
        (f'Total Months: {month_cnt}'),
        (f'Total Net P/L: {total_net_pnl}'),
        (f'Average Monthly P/L Change: {average_pnl_change}'),
        (f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})'),
        (f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')]

# Open the output path as a file and pass into the csv.writer function
with open(output_budget_data_analysis, 'w') as csvfile:
    csvwriter = csv.writer(csvfile, delimiter='')
    for line in financial_analysis:
        #print(line, end='')
        csvwriter.writerow(str(row))
33/22:
# Initialize a list for financial analysis output
financial_analysis = [
        "Financial Analysis",
        "______________________________",
        (f'Total Months: {month_cnt}'),
        (f'Total Net P/L: {total_net_pnl}'),
        (f'Average Monthly P/L Change: {average_pnl_change}'),
        (f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})'),
        (f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')]

# Open the output path as a file and pass into the csv.writer function
with open(output_budget_data_analysis, 'w') as csvfile:
    csvwriter = csv.writer(csvfile, delimiter=' ')
    for line in financial_analysis:
        #print(line, end='')
        csvwriter.writerow(str(row))
33/23:
# Initialize a list for financial analysis output
financial_analysis = [
        "Financial Analysis",
        "______________________________",
        (f'Total Months: {month_cnt}'),
        (f'Total Net P/L: {total_net_pnl}'),
        (f'Average Monthly P/L Change: {average_pnl_change}'),
        (f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})'),
        (f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')]

# Open the output path as a file and pass into the csv.writer function
with open(output_budget_data_analysis, 'w') as csvfile:
    csvwriter = csv.writer(csvfile, delimiter=',')
    for line in financial_analysis:
        #print(line, end='')
        csvwriter.writerow(str(row))
33/24:
# Import the pathlib and csv library
from pathlib import Path
import csv
33/25:
# Set the filepath
csvpath = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/python_homework/pybank/budget_data.csv')
33/26:
# Initiallize list of monthly pnl data
monthly_pnl_data = []

# Initialize variables for calculations
prev_mnth_pnl = 0
month_cnt = 0
pnl = 0.0
date = ""
total_net_pnl = 0
monthly_change = 0
average_pnl_change = 0
greatest_profit_increase = 0
greatest_profit_decrease = 0
greastest_increase_date = ""
greatest_decrease_date = ""
monthly_change_list= []
33/27:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    #print(csv_header)
    #monthly_pnl_data.append(csv_header)
    #print(monthly_pnl_data)
    # Start for loop to iterate through list
    for row in csvreader:
        #print(row[0]) #print date
        #print(row[1]) # print profit/loss
        #print(row)
        # Calculate # of months variable is month_cnt
        month_cnt = month_cnt+1
        date = row[0]
        # Calculate total_net_pn
        pnl = float(row[1])
        total_net_pnl = total_net_pnl+pnl
        # Calculate the change in PNl - variable is monthly_change
        # initialize monthly_change_list and append monthly_change to it - need monthly_change_list to calculate average of monthly changes - round average 
        if month_cnt > 1:
            monthly_change = pnl-prev_mnth_pnl
            monthly_change_list.append(monthly_change)
            average_pnl_change = round(sum(monthly_change_list)/len(monthly_change_list), 2)
            # Calculate greatest_profit_increase and greatest_increase_date
            if monthly_change > greatest_profit_increase:
                greatest_profit_increase = monthly_change
                greatest_increase_date = date
            # Calculate greatest_profit_decrease and greatest_decrease_date
            if monthly_change < greatest_profit_decrease:
                greatest_profit_decrease = monthly_change
                greatest_decrease_date = date
        prev_mnth_pnl = pnl
    print(average_pnl_change)
    print(month_cnt)
    print(total_net_pnl)
    print(greatest_profit_increase)
    print(greatest_increase_date)
    print(greatest_profit_decrease)
    print(greatest_decrease_date)
33/28:
# Set the path for the output_budget_data_analysis.csv
output_budget_data_analysis = Path("C:/Users/phill/OneDrive/Desktop/CU_FinTech/python_homework/pybank/output_budget_data_analysis.csv")
33/29:
# Initialize a list for financial analysis output
financial_analysis = [
        "Financial Analysis",
        "______________________________",
        (f'Total Months: {month_cnt}'),
        (f'Total Net P/L: {total_net_pnl}'),
        (f'Average Monthly P/L Change: {average_pnl_change}'),
        (f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})'),
        (f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')]

# Open the output path as a file and pass into the csv.writer function
with open(output_budget_data_analysis, 'w') as csvfile:
    csvwriter = csv.writer(csvfile, delimiter=',')
    for line in financial_analysis:
        #print(line, end='')
        csvwriter.writerow(str(row))
33/30:
# Initialize a list for financial analysis output
financial_analysis = [
        "Financial Analysis",
        "______________________________",
        (f'Total Months: {month_cnt}'),
        (f'Total Net P/L: {total_net_pnl}'),
        (f'Average Monthly P/L Change: {average_pnl_change}'),
        (f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})'),
        (f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')]

# Open the output path as a file and pass into the csv.writer function
with open(output_budget_data_analysis, 'w') as csvfile:
    csvwriter = csv.writer(csvfile, delimiter=',')
    for row in financial_analysis:
        #print(line, end='')
        csvwriter.writerow(str(row))
33/31:
# Initialize a list for financial analysis output
financial_analysis = [
        "Financial Analysis",
        "______________________________",
        (f'Total Months: {month_cnt}'),
        (f'Total Net P/L: {total_net_pnl}'),
        (f'Average Monthly P/L Change: {average_pnl_change}'),
        (f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})'),
        (f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')]

# Open the output path as a file and pass into the csv.writer function
with open(output_budget_data_analysis, 'w') as csvfile:
    csvwriter = csv.writer(csvfile, delimiter=' ')
    for row in financial_analysis:
        #print(line, end='')
        csvwriter.writerow(str(row))
33/32:
# Initialize a list for financial analysis output
financial_analysis = [
        "Financial Analysis",
        "______________________________",
        (f'Total Months: {month_cnt}'),
        (f'Total Net P/L: {total_net_pnl}'),
        (f'Average Monthly P/L Change: {average_pnl_change}'),
        (f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})'),
        (f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')]

# Open the output path as a file and pass into the csv.writer function
with open(output_budget_data_analysis, 'w') as csvfile:
    csvwriter = csv.writer(csvfile, delimiter='')
    for row in financial_analysis:
        #print(line, end='')
        csvwriter.writerow(str(row))
33/33:
# Initialize a list for financial analysis output
financial_analysis = [
        "Financial Analysis",
        "______________________________",
        (f'Total Months: {month_cnt}'),
        (f'Total Net P/L: {total_net_pnl}'),
        (f'Average Monthly P/L Change: {average_pnl_change}'),
        (f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})'),
        (f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')]

# Open the output path as a file and pass into the csv.writer function
with open(output_budget_data_analysis, 'w') as csvfile:
    csvwriter = csv.writer(csvfile, delimiter=' ')
    for row in financial_analysis:
        #print(line, end='')
        csvwriter.writerow(str(row))
33/34:
# Initialize a list for financial analysis output
financial_analysis = [
        "Financial Analysis",
        "______________________________",
        (f'Total Months: {month_cnt}'),
        (f'Total Net P/L: {total_net_pnl}'),
        (f'Average Monthly P/L Change: {average_pnl_change}'),
        (f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})'),
        (f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')]

# Open the output path as a file and pass into the csv.writer function
with open(output_budget_data_analysis, 'w') as csvfile:
    csvwriter = csv.writer(csvfile, delimiter=' ')
    for row in financial_analysis:
        #csvwriter.writerow(str(row))
        csvwriter.writerow(str('{:<100}'.format.(row)))
33/35:
# Initialize a list for financial analysis output
financial_analysis = [
        "Financial Analysis",
        "______________________________",
        (f'Total Months: {month_cnt}'),
        (f'Total Net P/L: {total_net_pnl}'),
        (f'Average Monthly P/L Change: {average_pnl_change}'),
        (f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})'),
        (f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')]

# Open the output path as a file and pass into the csv.writer function
with open(output_budget_data_analysis, 'w') as csvfile:
    csvwriter = csv.writer(csvfile, delimiter=' ')
    for row in financial_analysis:
        #csvwriter.writerow(str(row))
        csvwriter.writerow(str('{:<100}'.format(row)))
33/36:
# Initialize a list for financial analysis output
financial_analysis = [
        "Financial Analysis",
        "______________________________",
        (f'Total Months: {month_cnt}'),
        (f'Total Net P/L: {total_net_pnl}'),
        (f'Average Monthly P/L Change: {average_pnl_change}'),
        (f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})'),
        (f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')]

# Open the output path as a file and pass into the csv.writer function
with open(output_budget_data_analysis, 'w') as csvfile:
    csvwriter = csv.writer(csvfile, delimiter=' ')
    for row in financial_analysis:
        csvwriter.writerow(str(row))
        #csvwriter.writerow(str('{:<100}'.format(row)))
33/37:
# Initialize a list for financial analysis output
financial_analysis = [
        "Financial Analysis",
        "______________________________",
        (f'Total Months: {month_cnt}'),
        (f'Total Net P/L: {total_net_pnl}'),
        (f'Average Monthly P/L Change: {average_pnl_change}'),
        (f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})'),
        (f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')]

# Open the output path as a file and pass into the csv.writer function
with open(output_budget_data_analysis, 'w') as csvfile:
    csvwriter = csv.writer(csvfile, delimiter=' ')
    for row in financial_analysis:
        csvwriter.writerow((row))
        #csvwriter.writerow(str('{:<100}'.format(row)))
33/38:
# Initialize a list for financial analysis output
financial_analysis = [
        "Financial Analysis",
        "______________________________",
        (f'Total Months: {month_cnt}'),
        (f'Total Net P/L: {total_net_pnl}'),
        (f'Average Monthly P/L Change: {average_pnl_change}'),
        (f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})'),
        (f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')]

# Open the output path as a file and pass into the csv.writer function
with open(output_budget_data_analysis, 'w') as csvfile:
    csvwriter = csv.writer(csvfile, delimiter=' ')
    for row in financial_analysis:
        csvwriter.writerow(str(row))
        #csvwriter.writerow(str('{:<100}'.format(row)))
33/39:
# Initialize a list for financial analysis output
financial_analysis = [
        "Financial Analysis",
        "______________________________",
        (f'Total Months: {month_cnt}'),
        (f'Total Net P/L: {total_net_pnl}'),
        (f'Average Monthly P/L Change: {average_pnl_change}'),
        (f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})'),
        (f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')]

# Open the output path as a file and pass into the csv.writer function
with open(output_budget_data_analysis, 'w') as csvfile:
    csvwriter = csv.writer(csvfile, delimiter=' ')
    for row in financial_analysis:
        #csvwriter.writerow(str(row))
        csvwriter.write(str('{:<100}\n'.format(*row)))
33/40:
# Import the pathlib and csv library
from pathlib import Path
import csv
33/41:
# Set the filepath
csvpath = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/python_homework/pybank/budget_data.csv')
33/42:
# Initiallize list of monthly pnl data
monthly_pnl_data = []

# Initialize variables for calculations
prev_mnth_pnl = 0
month_cnt = 0
pnl = 0.0
date = ""
total_net_pnl = 0
monthly_change = 0
average_pnl_change = 0
greatest_profit_increase = 0
greatest_profit_decrease = 0
greastest_increase_date = ""
greatest_decrease_date = ""
monthly_change_list= []
33/43:
# Open csv file
with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    #print(csv_header)
    #monthly_pnl_data.append(csv_header)
    #print(monthly_pnl_data)
    # Start for loop to iterate through list
    for row in csvreader:
        #print(row[0]) #print date
        #print(row[1]) # print profit/loss
        #print(row)
        # Calculate # of months variable is month_cnt
        month_cnt = month_cnt+1
        date = row[0]
        # Calculate total_net_pn
        pnl = float(row[1])
        total_net_pnl = total_net_pnl+pnl
        # Calculate the change in PNl - variable is monthly_change
        # initialize monthly_change_list and append monthly_change to it - need monthly_change_list to calculate average of monthly changes - round average 
        if month_cnt > 1:
            monthly_change = pnl-prev_mnth_pnl
            monthly_change_list.append(monthly_change)
            average_pnl_change = round(sum(monthly_change_list)/len(monthly_change_list), 2)
            # Calculate greatest_profit_increase and greatest_increase_date
            if monthly_change > greatest_profit_increase:
                greatest_profit_increase = monthly_change
                greatest_increase_date = date
            # Calculate greatest_profit_decrease and greatest_decrease_date
            if monthly_change < greatest_profit_decrease:
                greatest_profit_decrease = monthly_change
                greatest_decrease_date = date
        prev_mnth_pnl = pnl
    print(average_pnl_change)
    print(month_cnt)
    print(total_net_pnl)
    print(greatest_profit_increase)
    print(greatest_increase_date)
    print(greatest_profit_decrease)
    print(greatest_decrease_date)
33/44:
# Set the path for the output_budget_data_analysis.csv
output_budget_data_analysis = Path("C:/Users/phill/OneDrive/Desktop/CU_FinTech/python_homework/pybank/output_budget_data_analysis.csv")
33/45:
# Initialize a list for financial analysis output
financial_analysis = [
        "Financial Analysis",
        "______________________________",
        (f'Total Months: {month_cnt}'),
        (f'Total Net P/L: {total_net_pnl}'),
        (f'Average Monthly P/L Change: {average_pnl_change}'),
        (f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})'),
        (f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')]

# Open the output path as a file and pass into the csv.writer function
with open(output_budget_data_analysis, 'w') as csvfile:
    csvwriter = csv.writer(csvfile, delimiter=' ')
    for row in financial_analysis:
        #csvwriter.writerow(str(row))
        csvwriter.write(str('{:<100}\n'.format(*row)))
33/46:
# Initialize a list for financial analysis output
financial_analysis = [
        "Financial Analysis",
        "______________________________",
        (f'Total Months: {month_cnt}'),
        (f'Total Net P/L: {total_net_pnl}'),
        (f'Average Monthly P/L Change: {average_pnl_change}'),
        (f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})'),
        (f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')]

# Open the output path as a file and pass into the csv.writer function
with open(output_budget_data_analysis, 'w') as csvfile:
    csvwriter = csv.writer(csvfile, delimiter=' ')
    for row in financial_analysis:
        #csvwriter.writerow(str(row))
        csvwriter.writerow(str('{:<100}\n'.format(*row)))
33/47:
# Initialize a list for financial analysis output
financial_analysis = [
        "Financial Analysis",
        "______________________________",
        (f'Total Months: {month_cnt}'),
        (f'Total Net P/L: {total_net_pnl}'),
        (f'Average Monthly P/L Change: {average_pnl_change}'),
        (f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})'),
        (f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')]

# Open the output path as a file and pass into the csv.writer function
with open(output_budget_data_analysis, 'w') as csvfile:
    csvwriter = csv.writer(csvfile, delimiter=' ')
    for row in financial_analysis:
        csvwriter.writerow(str(row))
        '{:<100}'.format(row)
        #csvwriter.writerow(str('{:<100}'.format(*row)))
        #csvwriter.writerow(str('{:<100}\n'.format(*row)))
33/48:
# Initialize a list for financial analysis output
financial_analysis = [
        "Financial Analysis",
        "______________________________",
        (f'Total Months: {month_cnt}'),
        (f'Total Net P/L: {total_net_pnl}'),
        (f'Average Monthly P/L Change: {average_pnl_change}'),
        (f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})'),
        (f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')]

# Open the output path as a file and pass into the csv.writer function
with open(output_budget_data_analysis, 'w') as csvfile:
    csvwriter = csv.writer(csvfile, delimiter=" ")
    for row in financial_analysis:
        csvwriter.writerow(str(row))
        #'{:<100}'.format(row)
        #csvwriter.writerow(str('{:<100}'.format(*row)))
        #csvwriter.writerow(str('{:<100}\n'.format(*row)))
33/49:
# Initialize a list for financial analysis output
financial_analysis = [
        "Financial Analysis",
        "______________________________",
        (f'Total Months: {month_cnt}'),
        (f'Total Net P/L: {total_net_pnl}'),
        (f'Average Monthly P/L Change: {average_pnl_change}'),
        (f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})'),
        (f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')]

# Open the output path as a file and pass into the csv.writer function
with open(output_budget_data_analysis, 'w') as csvfile:
    csvwriter = csv.writer(csvfile, )
    for row in financial_analysis:
        csvwriter.writerow(str(row))
        #'{:<100}'.format(row)
        #csvwriter.writerow(str('{:<100}'.format(*row)))
        #csvwriter.writerow(str('{:<100}\n'.format(*row)))
33/50:
# Initialize a list for financial analysis output
financial_analysis = [
        "Financial Analysis",
        "______________________________",
        (f'Total Months: {month_cnt}'),
        (f'Total Net P/L: {total_net_pnl}'),
        (f'Average Monthly P/L Change: {average_pnl_change}'),
        (f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})'),
        (f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')]

# Open the output path as a file and pass into the csv.writer function
with open(output_budget_data_analysis, 'w') as csvfile:
    csvwriter = csv.writer(csvfile, delimiter=" ")
    for row in financial_analysis:
        csvwriter.writerow(str(row))
        #'{:<100}'.format(row)
        #csvwriter.writerow(str('{:<100}'.format(*row)))
        #csvwriter.writerow(str('{:<100}\n'.format(*row)))
33/51:
# Initialize a list for financial analysis output
financial_analysis = [
        "Financial Analysis",
        "______________________________",
        (f'Total Months: {month_cnt}'),
        (f'Total Net P/L: {total_net_pnl}'),
        (f'Average Monthly P/L Change: {average_pnl_change}'),
        (f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})'),
        (f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')]

# Open the output path as a file and pass into the csv.writer function
with open(output_budget_data_analysis, 'w') as csvfile:
    csvwriter = csv.writer(csvfile, delimiter=" ")
    for row in financial_analysis:
        csvwriter.writerow(str(row))
        #'{:<100}'.format(row)
        #csvwriter.writerow(str('{:<100}'.format(*row)))
        #csvwriter.writerow(str('{:<100}\n'.format(*row)))
33/52:
# Initialize a list for financial analysis output
financial_analysis = [
        "Financial Analysis",
        "______________________________",
        (f'Total Months: {month_cnt}'),
        (f'Total Net P/L: {total_net_pnl}'),
        (f'Average Monthly P/L Change: {average_pnl_change}'),
        (f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})'),
        (f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')]

# Open the output path as a file and pass into the csv.writer function
with open(output_budget_data_analysis, 'w') as csvfile:
    #csvwriter = csv.writer(csvfile, delimiter=" ")
    csvwriter = csv.writer
    for row in financial_analysis:
        csvwriter.writerow(str(row))
        #'{:<100}'.format(row)
        #csvwriter.writerow(str('{:<100}'.format(*row)))
        #csvwriter.writerow(str('{:<100}\n'.format(*row)))
33/53:
# Initialize a list for financial analysis output
financial_analysis = [
        "Financial Analysis",
        "______________________________",
        (f'Total Months: {month_cnt}'),
        (f'Total Net P/L: {total_net_pnl}'),
        (f'Average Monthly P/L Change: {average_pnl_change}'),
        (f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})'),
        (f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')]

# Open the output path as a file and pass into the csv.writer function
with open(output_budget_data_analysis, 'w') as csvfile:
    #csvwriter = csv.writer(csvfile, delimiter=" ")
    csvwriter = csv.writer(csvfile,)
    for row in financial_analysis:
        csvwriter.writerow(str(row))
        #'{:<100}'.format(row)
        #csvwriter.writerow(str('{:<100}'.format(*row)))
        #csvwriter.writerow(str('{:<100}\n'.format(*row)))
33/54:
# Initialize a list for financial analysis output
financial_analysis = [
        "Financial Analysis",
        "______________________________",
        (f'Total Months: {month_cnt}'),
        (f'Total Net P/L: {total_net_pnl}'),
        (f'Average Monthly P/L Change: {average_pnl_change}'),
        (f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})'),
        (f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')]

# Open the output path as a file and pass into the csv.writer function
with open(output_budget_data_analysis, 'w') as csvfile:
    csvwriter = csv.writer(csvfile, delimiter=" ")
    for row in financial_analysis:
        csvwriter.writerow(str(row))
        #'{:<100}'.format(row)
        #csvwriter.writerow(str('{:<100}'.format(*row)))
        #csvwriter.writerow(str('{:<100}\n'.format(*row)))
33/55:
# Initialize a list for financial analysis output
financial_analysis = [
        "Financial Analysis",
        "______________________________",
        (f'Total Months: {month_cnt}'),
        (f'Total Net P/L: {total_net_pnl}'),
        (f'Average Monthly P/L Change: {average_pnl_change}'),
        (f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})'),
        (f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')]

# Open the output path as a file and pass into the csv.writer function
with open(output_budget_data_analysis, 'w') as csvfile:
    #csvwriter = csv.writer(csvfile, delimiter=" ")
    csvwriter = csv.writer(csvfile)
    for row in financial_analysis:
        csvwriter.writerow(str(row))
        #'{:<100}'.format(row)
        #csvwriter.writerow(str('{:<100}'.format(*row)))
        #csvwriter.writerow(str('{:<100}\n'.format(*row)))
33/56:
# Initialize a list for financial analysis output
financial_analysis = [
        "Financial Analysis",
        "______________________________",
        (f'Total Months: {month_cnt}'),
        (f'Total Net P/L: {total_net_pnl}'),
        (f'Average Monthly P/L Change: {average_pnl_change}'),
        (f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})'),
        (f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')]

# Open the output path as a file and pass into the csv.writer function
with open(output_budget_data_analysis, 'w') as csvfile:
    #csvwriter = csv.writer(csvfile, delimiter=" ")
    csvwriter = csv.writer(csvfile, quoting=csv.QUOTE_NONE)
    for row in financial_analysis:
        csvwriter.writerow(str(row))
        #'{:<100}'.format(row)
        #csvwriter.writerow(str('{:<100}'.format(*row)))
        #csvwriter.writerow(str('{:<100}\n'.format(*row)))
33/57:
# Initialize a list for financial analysis output
financial_analysis = [
        "Financial Analysis",
        "______________________________",
        (f'Total Months: {month_cnt}'),
        (f'Total Net P/L: {total_net_pnl}'),
        (f'Average Monthly P/L Change: {average_pnl_change}'),
        (f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})'),
        (f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')]

# Open the output path as a file and pass into the csv.writer function
with open(output_budget_data_analysis, 'w') as csvfile:
    #csvwriter = csv.writer(csvfile, delimiter=" ")
    for row in financial_analysis:
        csvwriter.writerow(str(row))
        #'{:<100}'.format(row)
        #csvwriter.writerow(str('{:<100}'.format(*row)))
        #csvwriter.writerow(str('{:<100}\n'.format(*row)))
33/58:
# Initialize a list for financial analysis output
financial_analysis = [
        "Financial Analysis",
        "______________________________",
        (f'Total Months: {month_cnt}'),
        (f'Total Net P/L: {total_net_pnl}'),
        (f'Average Monthly P/L Change: {average_pnl_change}'),
        (f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})'),
        (f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')]

# Open the output path as a file and pass into the csv.writer function
with open(output_budget_data_analysis, 'w') as csvfile:
    csvwriter = csv.writer(csvfile, delimiter=" ")
    for row in financial_analysis:
        csvwriter.writerow(str(row))
        #'{:<100}'.format(row)
        #csvwriter.writerow(str('{:<100}'.format(*row)))
        #csvwriter.writerow(str('{:<100}\n'.format(*row)))
33/59:
# Initialize a list for financial analysis output
financial_analysis = [
        "Financial Analysis",
        "______________________________",
        (f'Total Months: {month_cnt}'),
        (f'Total Net P/L: {total_net_pnl}'),
        (f'Average Monthly P/L Change: {average_pnl_change}'),
        (f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})'),
        (f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')]

# Open the output path as a file and pass into the csv.writer function
with open(output_budget_data_analysis, 'w') as csvfile:
    csvwriter = csv.writer(csvfile, delimiter= )
    for row in financial_analysis:
        csvwriter.writerow(str(row))
        #'{:<100}'.format(row)
        #csvwriter.writerow(str('{:<100}'.format(*row)))
        #csvwriter.writerow(str('{:<100}\n'.format(*row)))
33/60:
# Initialize a list for financial analysis output
financial_analysis = [
        "Financial Analysis",
        "______________________________",
        (f'Total Months: {month_cnt}'),
        (f'Total Net P/L: {total_net_pnl}'),
        (f'Average Monthly P/L Change: {average_pnl_change}'),
        (f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})'),
        (f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')]

# Open the output path as a file and pass into the csv.writer function
with open(output_budget_data_analysis, 'w') as csvfile:
    csvwriter = csv.writer(csvfile, delimiter=' ')
    for row in financial_analysis:
        csvwriter.writerow(str(row))
        #'{:<100}'.format(row)
        #csvwriter.writerow(str('{:<100}'.format(*row)))
        #csvwriter.writerow(str('{:<100}\n'.format(*row)))
33/61:
# Initialize a list for financial analysis output
financial_analysis = [
        "Financial Analysis",
        "______________________________",
        (f'Total Months: {month_cnt}'),
        (f'Total Net P/L: {total_net_pnl}'),
        (f'Average Monthly P/L Change: {average_pnl_change}'),
        (f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})'),
        (f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')]

# Open the output path as a file and pass into the csv.writer function
with open(output_budget_data_analysis, 'w') as csvfile:
    csvwriter = csv.writer(csvfile, delimiter=' ')
    for row in financial_analysis:
        csvwriter.writerow(str(row))
        #'{:<100}'.format(row)
        #csvwriter.writerow(str('{:<100}'.format(*row)))
        #csvwriter.writerow(str('{:<100}\n'.format(*row)))
33/62:
# Set the path for the output_budget_data_analysis.csv
output_budget_data_analysis = Path("C:/Users/phill/OneDrive/Desktop/CU_FinTech/python_homework/pybank/output_budget_data_analysis.txt")
33/63:
# Initialize a list for financial analysis output
financial_analysis = [
        "Financial Analysis",
        "______________________________",
        (f'Total Months: {month_cnt}'),
        (f'Total Net P/L: {total_net_pnl}'),
        (f'Average Monthly P/L Change: {average_pnl_change}'),
        (f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})'),
        (f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')]

with open(output_budget_data_analysis, 'w') as textfile: 
    for row in financial_analysis:
        textfile.writerow(row)
          
# Open the output path as a file and pass into the csv.writer function
#with open(output_budget_data_analysis, 'w') as csvfile:
    #csvwriter = csv.writer(csvfile, delimiter=' ')
    #for row in financial_analysis:
        #csvwriter.writerow(str(row))
        #'{:<100}'.format(row)
        #csvwriter.writerow(str('{:<100}'.format(*row)))
        #csvwriter.writerow(str('{:<100}\n'.format(*row)))
33/64:
# Initialize a list for financial analysis output
financial_analysis = [
        "Financial Analysis",
        "______________________________",
        (f'Total Months: {month_cnt}'),
        (f'Total Net P/L: {total_net_pnl}'),
        (f'Average Monthly P/L Change: {average_pnl_change}'),
        (f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})'),
        (f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')]

with open(output_budget_data_analysis, 'w') as textfile: 
    for row in financial_analysis:
        textfile.writerow(row)
          
# Open the output path as a file and pass into the csv.writer function
#with open(output_budget_data_analysis, 'w') as csvfile:
    #csvwriter = csv.writer(csvfile, delimiter=' ')
    #for row in financial_analysis:
        #csvwriter.writerow(str(row))
        #'{:<100}'.format(row)
        #csvwriter.writerow(str('{:<100}'.format(*row)))
        #csvwriter.writerow(str('{:<100}\n'.format(*row)))
33/65:
# Initialize a list for financial analysis output
financial_analysis = [
        "Financial Analysis",
        "______________________________",
        (f'Total Months: {month_cnt}'),
        (f'Total Net P/L: {total_net_pnl}'),
        (f'Average Monthly P/L Change: {average_pnl_change}'),
        (f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})'),
        (f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')]

with open(output_budget_data_analysis, 'w') as textfile: 
    for row in financial_analysis:
        textfile.write(row)
          
# Open the output path as a file and pass into the csv.writer function
#with open(output_budget_data_analysis, 'w') as csvfile:
    #csvwriter = csv.writer(csvfile, delimiter=' ')
    #for row in financial_analysis:
        #csvwriter.writerow(str(row))
        #'{:<100}'.format(row)
        #csvwriter.writerow(str('{:<100}'.format(*row)))
        #csvwriter.writerow(str('{:<100}\n'.format(*row)))
33/66:
# Set the path for the output_budget_data_analysis.csv
output_budget_data_analysis = Path("C:/Users/phill/OneDrive/Desktop/CU_FinTech/python_homework/pybank/output_budget_data_analysis.txt")
33/67:
# Initialize a list for financial analysis output
financial_analysis = [
        "Financial Analysis",
        "______________________________",
        (f'Total Months: {month_cnt}'),
        (f'Total Net P/L: {total_net_pnl}'),
        (f'Average Monthly P/L Change: {average_pnl_change}'),
        (f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})'),
        (f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')]

with open(output_budget_data_analysis, 'w') as textfile:
    textwriter = text.writer(textfile, delimiter=' ')
    for row in financial_analysis:
        textwriter.write(row)
        
        
          
# Open the output path as a file and pass into the csv.writer function
#with open(output_budget_data_analysis, 'w') as csvfile:
    #csvwriter = csv.writer(csvfile, delimiter=' ')
    #for row in financial_analysis:
        #csvwriter.writerow(str(row))
        #'{:<100}'.format(row)
        #csvwriter.writerow(str('{:<100}'.format(*row)))
        #csvwriter.writerow(str('{:<100}\n'.format(*row)))
33/68:
# Initialize a list for financial analysis output
financial_analysis = [
        "Financial Analysis",
        "______________________________",
        (f'Total Months: {month_cnt}'),
        (f'Total Net P/L: {total_net_pnl}'),
        (f'Average Monthly P/L Change: {average_pnl_change}'),
        (f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})'),
        (f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')]

with open(output_budget_data_analysis, 'w') as textfile:
    #textwriter = text.writer(textfile, delimiter=' ')
    for row in financial_analysis:
        textfile.write(row, end='')
        
        
          
# Open the output path as a file and pass into the csv.writer function
#with open(output_budget_data_analysis, 'w') as csvfile:
    #csvwriter = csv.writer(csvfile, delimiter=' ')
    #for row in financial_analysis:
        #csvwriter.writerow(str(row))
        #'{:<100}'.format(row)
        #csvwriter.writerow(str('{:<100}'.format(*row)))
        #csvwriter.writerow(str('{:<100}\n'.format(*row)))
33/69:
# Initialize a list for financial analysis output
financial_analysis = [
        "Financial Analysis",
        "______________________________",
        (f'Total Months: {month_cnt}'),
        (f'Total Net P/L: {total_net_pnl}'),
        (f'Average Monthly P/L Change: {average_pnl_change}'),
        (f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})'),
        (f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')]

with open(output_budget_data_analysis, 'w') as textfile:
    for row in financial_analysis:
        textfile.write(row)
        textfile.write("\n")        
        
          
# Open the output path as a file and pass into the csv.writer function
#with open(output_budget_data_analysis, 'w') as csvfile:
    #csvwriter = csv.writer(csvfile, delimiter=' ')
    #for row in financial_analysis:
        #csvwriter.writerow(str(row))
        #'{:<100}'.format(row)
        #csvwriter.writerow(str('{:<100}'.format(*row)))
        #csvwriter.writerow(str('{:<100}\n'.format(*row)))
33/70:
# Initialize a list for financial analysis output
financial_analysis = [
        "Financial Analysis",
        "-----------------------------------------------------------------------",
        (f'Total Months: {month_cnt}'),
        (f'Total Net P/L: {total_net_pnl}'),
        (f'Average Monthly P/L Change: {average_pnl_change}'),
        (f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})'),
        (f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')]

with open(output_budget_data_analysis, 'w') as textfile:
    for row in financial_analysis:
        textfile.write(row)
        textfile.write("\n")        
        
          
# Open the output path as a file and pass into the csv.writer function
#with open(output_budget_data_analysis, 'w') as csvfile:
    #csvwriter = csv.writer(csvfile, delimiter=' ')
    #for row in financial_analysis:
        #csvwriter.writerow(str(row))
        #'{:<100}'.format(row)
        #csvwriter.writerow(str('{:<100}'.format(*row)))
        #csvwriter.writerow(str('{:<100}\n'.format(*row)))
33/71:
# Initialize a list for financial analysis output
financial_analysis = [
        "Financial Analysis",
        "-----------------------------------------------------------------------",
        (f'Total Months: {month_cnt}'),
        (f'Total Net P/L: ${total_net_pnl}'),
        (f'Average Monthly P/L Change: {average_pnl_change}'),
        (f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})'),
        (f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')]

with open(output_budget_data_analysis, 'w') as textfile:
    for row in financial_analysis:
        textfile.write(row)
        textfile.write("\n")        
        
          
# Open the output path as a file and pass into the csv.writer function
#with open(output_budget_data_analysis, 'w') as csvfile:
    #csvwriter = csv.writer(csvfile, delimiter=' ')
    #for row in financial_analysis:
        #csvwriter.writerow(str(row))
        #'{:<100}'.format(row)
        #csvwriter.writerow(str('{:<100}'.format(*row)))
        #csvwriter.writerow(str('{:<100}\n'.format(*row)))
33/72:
# Initialize a list for financial analysis output
financial_analysis = [
        "Financial Analysis",
        "-----------------------------------------------------------------------",
        (f'Total Months: {month_cnt}'),
        (f'Total Net P/L: ${total_net_pnl}'),
        (f'Average Monthly P/L Change: {average_pnl_change}'),
        (f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})'),
        (f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')]

with open(output_budget_data_analysis, 'w') as textfile:
    for line in financial_analysis:
        textfile.write(line)
        textfile.write("\n")        
        
          
# Open the output path as a file and write rows of financial_analysis list, use "\n" to create new row
#with open(output_budget_data_analysis, 'w') as csvfile:
    #csvwriter = csv.writer(csvfile, delimiter=' ')
    #for row in financial_analysis:
        #csvwriter.writerow(str(row))
        #'{:<100}'.format(row)
        #csvwriter.writerow(str('{:<100}'.format(*row)))
        #csvwriter.writerow(str('{:<100}\n'.format(*row)))
33/73:
# Initialize a list for financial analysis output
financial_analysis = [
        "Financial Analysis",
        "-----------------------------------------------------------------------",
        (f'Total Months: {month_cnt}'),
        (f'Total Net P/L: ${total_net_pnl}'),
        (f'Average Monthly P/L Change: ${average_pnl_change}'),
        (f'Greatest Monthly Increase in Profits: {greatest_increase_date} (${greatest_profit_increase})'),
        (f'Greatest Monthly Decrease in Profits: {greatest_decrease_date} (${greatest_profit_decrease})')]

with open(output_budget_data_analysis, 'w') as textfile:
    for line in financial_analysis:
        textfile.write(line)
        textfile.write("\n")        
        
          
# Open the output path as a file and write rows of financial_analysis list, use "\n" to create new row
#with open(output_budget_data_analysis, 'w') as csvfile:
    #csvwriter = csv.writer(csvfile, delimiter=' ')
    #for row in financial_analysis:
        #csvwriter.writerow(str(row))
        #'{:<100}'.format(row)
        #csvwriter.writerow(str('{:<100}'.format(*row)))
        #csvwriter.writerow(str('{:<100}\n'.format(*row)))
34/1:
# Create a list called 'farm' with the elements "pig", "cow", "chicken", "dog", "horse", "sheep".
farm = ["pig", "cow", "chicken", "dog", "horse", "sheep"]
print(farm)

# Write an if statement that prints the string "RWAR!" if the first element of farm is NOT "Godzilla".
if farm[0] != "Godzillia":
    print("RWAR!")


# Write an else if statement that prints the string "SCREECH!" if the last element of farm is "Mothra".
if farm[-1] == "Mothra":
    print("SCREECH")



# Else, print the string "This animal is neither Godzilla nor Mothra!".
else:
    print("This animal is neither Godzilla nor Mothra!")
34/2:
# Create a list called 'farm' with the elements "pig", "cow", "chicken", "dog", "horse", "sheep".
farm = ["pig", "cow", "chicken", "dog", "horse", "sheep"]
print(farm)

# Write an if statement that prints the string "RWAR!" if the first element of farm is NOT "Godzilla".
if farm[0] != "Godzillia":
    print("RWAR!")


# Write an else if statement that prints the string "SCREECH!" if the last element of farm is "Mothra".
if farm[-1] == "sheep":
    print("SCREECH")



# Else, print the string "This animal is neither Godzilla nor Mothra!".
else:
    print("This animal is neither Godzilla nor Mothra!")
34/3:
# Create a list called 'farm' with the elements "pig", "cow", "chicken", "dog", "horse", "sheep".
farm = ["pig", "cow", "chicken", "dog", "horse", "sheep"]
print(farm)

# Write an if statement that prints the string "RWAR!" if the first element of farm is NOT "Godzilla".
if farm[0] != "Godzillia":
    print("RWAR!")


# Write an else if statement that prints the string "SCREECH!" if the last element of farm is "Mothra".
if farm[-1] == "Mothra":
    print("SCREECH")



# Else, print the string "This animal is neither Godzilla nor Mothra!".
else:
    print("This animal is neither Godzilla nor Mothra!")
34/4:
# Declare a variable named 'dog' with a string of "Spot".
dog = "Spot"
# Declare 3 variables `cat`, `city`, `car` without assigning them values.
cat = ""
city = ""
car = ""

# Assign the string "Farley" to `cat`.
cat = "Farley"

# Assign the string "San Francisco" to `city`.
city = "San Francisco"

# Assign the string "Prius" to `car`.
car = "Prius"

# Using string concatenation, print out the sentence "See Spot run!".
print(f'See {dog} run')

# Using string concatenation, print out the sentence "I drive Farley around San Francisco in my Prius".


# Declare a variable budget and assign it a value of 5000.


# Declare a variable rent_cost and assign it a value of 1500.


# Declare a variable utilities_cost and assign it a value of 150.


# Declare a variable food_cost and assign it a value of 250.


# Declare a variable transportation_cost and assign it a value of 350.


# Declare a variable computer_cost and assign it a value of 2000.


# Declare a variable called total_cost that takes the sum of all costs above (excluding budget).


# Write an if statement that checks whether the sum of all our costs is within the budget.
# If so, print "You're total cost is " concatentated with the `total_cost` variable.
# Else, print "You're over budget by " concatenated with the difference between `budget` and `total_cost`.


# Write an if statement that checks whether the rent_cost is larger than the sum of the `utilities_cost`, `food_cost`,
# and `transportation_cost`. If so, print a string that says "The rent is too damn high!".
# Else, print a string that says "Ahhh just right!"
34/5:
# Declare a variable named 'dog' with a string of "Spot".
dog = "Spot"
# Declare 3 variables `cat`, `city`, `car` without assigning them values.
cat = ""
city = ""
car = ""

# Assign the string "Farley" to `cat`.
cat = "Farley"

# Assign the string "San Francisco" to `city`.
city = "San Francisco"

# Assign the string "Prius" to `car`.
car = "Prius"

# Using string concatenation, print out the sentence "See Spot run!".
print(f'See {dog} run!')

# Using string concatenation, print out the sentence "I drive Farley around San Francisco in my Prius".


# Declare a variable budget and assign it a value of 5000.


# Declare a variable rent_cost and assign it a value of 1500.


# Declare a variable utilities_cost and assign it a value of 150.


# Declare a variable food_cost and assign it a value of 250.


# Declare a variable transportation_cost and assign it a value of 350.


# Declare a variable computer_cost and assign it a value of 2000.


# Declare a variable called total_cost that takes the sum of all costs above (excluding budget).


# Write an if statement that checks whether the sum of all our costs is within the budget.
# If so, print "You're total cost is " concatentated with the `total_cost` variable.
# Else, print "You're over budget by " concatenated with the difference between `budget` and `total_cost`.


# Write an if statement that checks whether the rent_cost is larger than the sum of the `utilities_cost`, `food_cost`,
# and `transportation_cost`. If so, print a string that says "The rent is too damn high!".
# Else, print a string that says "Ahhh just right!"
34/6:
# Declare a variable named 'dog' with a string of "Spot".
dog = "Spot"
# Declare 3 variables `cat`, `city`, `car` without assigning them values.
cat = ""
city = ""
car = ""

# Assign the string "Farley" to `cat`.
cat = "Farley"

# Assign the string "San Francisco" to `city`.
city = "San Francisco"

# Assign the string "Prius" to `car`.
car = "Prius"

# Using string concatenation, print out the sentence "See Spot run!".
print(f'See {dog} run!')

# Using string concatenation, print out the sentence "I drive Farley around San Francisco in my Prius".
print(f'I drive {cat} around {city} in my {car}')

# Declare a variable budget and assign it a value of 5000.


# Declare a variable rent_cost and assign it a value of 1500.


# Declare a variable utilities_cost and assign it a value of 150.


# Declare a variable food_cost and assign it a value of 250.


# Declare a variable transportation_cost and assign it a value of 350.


# Declare a variable computer_cost and assign it a value of 2000.


# Declare a variable called total_cost that takes the sum of all costs above (excluding budget).


# Write an if statement that checks whether the sum of all our costs is within the budget.
# If so, print "You're total cost is " concatentated with the `total_cost` variable.
# Else, print "You're over budget by " concatenated with the difference between `budget` and `total_cost`.


# Write an if statement that checks whether the rent_cost is larger than the sum of the `utilities_cost`, `food_cost`,
# and `transportation_cost`. If so, print a string that says "The rent is too damn high!".
# Else, print a string that says "Ahhh just right!"
34/7:
# Declare a variable named 'dog' with a string of "Spot".
dog = "Spot"
# Declare 3 variables `cat`, `city`, `car` without assigning them values.
cat = ""
city = ""
car = ""

# Assign the string "Farley" to `cat`.
cat = "Farley"

# Assign the string "San Francisco" to `city`.
city = "San Francisco"

# Assign the string "Prius" to `car`.
car = "Prius"

# Using string concatenation, print out the sentence "See Spot run!".
print(f'See {dog} run!')

# Using string concatenation, print out the sentence "I drive Farley around San Francisco in my Prius".
print(f'I drive {cat} around {city} in my {car}')

# Declare a variable budget and assign it a value of 5000.
budget = 5000

# Declare a variable rent_cost and assign it a value of 1500.
rent_cost = 1500

# Declare a variable utilities_cost and assign it a value of 150.
utilities_cost = 150

# Declare a variable food_cost and assign it a value of 250.
food_cost = 250

# Declare a variable transportation_cost and assign it a value of 350.
transporttation_cost = 350

# Declare a variable computer_cost and assign it a value of 2000.
computer_cost = 2000

# Declare a variable called total_cost that takes the sum of all costs above (excluding budget).
total_cost = sum(rent_cost + utilities_cost + food_cost + transportation_cost + computer_cost)
print(total_cost)

# Write an if statement that checks whether the sum of all our costs is within the budget.
# If so, print "You're total cost is " concatentated with the `total_cost` variable.
# Else, print "You're over budget by " concatenated with the difference between `budget` and `total_cost`.


# Write an if statement that checks whether the rent_cost is larger than the sum of the `utilities_cost`, `food_cost`,
# and `transportation_cost`. If so, print a string that says "The rent is too damn high!".
# Else, print a string that says "Ahhh just right!"
34/8:
# Declare a variable named 'dog' with a string of "Spot".
dog = "Spot"
# Declare 3 variables `cat`, `city`, `car` without assigning them values.
cat = ""
city = ""
car = ""

# Assign the string "Farley" to `cat`.
cat = "Farley"

# Assign the string "San Francisco" to `city`.
city = "San Francisco"

# Assign the string "Prius" to `car`.
car = "Prius"

# Using string concatenation, print out the sentence "See Spot run!".
print(f'See {dog} run!')

# Using string concatenation, print out the sentence "I drive Farley around San Francisco in my Prius".
print(f'I drive {cat} around {city} in my {car}')

# Declare a variable budget and assign it a value of 5000.
budget = 5000

# Declare a variable rent_cost and assign it a value of 1500.
rent_cost = 1500

# Declare a variable utilities_cost and assign it a value of 150.
utilities_cost = 150

# Declare a variable food_cost and assign it a value of 250.
food_cost = 250

# Declare a variable transportation_cost and assign it a value of 350.
transportation_cost = 350

# Declare a variable computer_cost and assign it a value of 2000.
computer_cost = 2000

# Declare a variable called total_cost that takes the sum of all costs above (excluding budget).
total_cost = sum(rent_cost + utilities_cost + food_cost + transportation_cost + computer_cost)
print(total_cost)

# Write an if statement that checks whether the sum of all our costs is within the budget.
# If so, print "You're total cost is " concatentated with the `total_cost` variable.
# Else, print "You're over budget by " concatenated with the difference between `budget` and `total_cost`.


# Write an if statement that checks whether the rent_cost is larger than the sum of the `utilities_cost`, `food_cost`,
# and `transportation_cost`. If so, print a string that says "The rent is too damn high!".
# Else, print a string that says "Ahhh just right!"
34/9:
# Declare a variable named 'dog' with a string of "Spot".
dog = "Spot"
# Declare 3 variables `cat`, `city`, `car` without assigning them values.
cat = ""
city = ""
car = ""

# Assign the string "Farley" to `cat`.
cat = "Farley"

# Assign the string "San Francisco" to `city`.
city = "San Francisco"

# Assign the string "Prius" to `car`.
car = "Prius"

# Using string concatenation, print out the sentence "See Spot run!".
print(f'See {dog} run!')

# Using string concatenation, print out the sentence "I drive Farley around San Francisco in my Prius".
print(f'I drive {cat} around {city} in my {car}')

# Declare a variable budget and assign it a value of 5000.
budget = 5000

# Declare a variable rent_cost and assign it a value of 1500.
rent_cost = 1500

# Declare a variable utilities_cost and assign it a value of 150.
utilities_cost = 150

# Declare a variable food_cost and assign it a value of 250.
food_cost = 250

# Declare a variable transportation_cost and assign it a value of 350.
transportation_cost = 350

# Declare a variable computer_cost and assign it a value of 2000.
computer_cost = 2000

# Declare a variable called total_cost that takes the sum of all costs above (excluding budget).
total_cost = rent_cost + utilities_cost + food_cost + transportation_cost + computer_cost)
print(total_cost

# Write an if statement that checks whether the sum of all our costs is within the budget.
# If so, print "You're total cost is " concatentated with the `total_cost` variable.
# Else, print "You're over budget by " concatenated with the difference between `budget` and `total_cost`.


# Write an if statement that checks whether the rent_cost is larger than the sum of the `utilities_cost`, `food_cost`,
# and `transportation_cost`. If so, print a string that says "The rent is too damn high!".
# Else, print a string that says "Ahhh just right!"
34/10:
# Declare a variable named 'dog' with a string of "Spot".
dog = "Spot"
# Declare 3 variables `cat`, `city`, `car` without assigning them values.
cat = ""
city = ""
car = ""

# Assign the string "Farley" to `cat`.
cat = "Farley"

# Assign the string "San Francisco" to `city`.
city = "San Francisco"

# Assign the string "Prius" to `car`.
car = "Prius"

# Using string concatenation, print out the sentence "See Spot run!".
print(f'See {dog} run!')

# Using string concatenation, print out the sentence "I drive Farley around San Francisco in my Prius".
print(f'I drive {cat} around {city} in my {car}')

# Declare a variable budget and assign it a value of 5000.
budget = 5000

# Declare a variable rent_cost and assign it a value of 1500.
rent_cost = 1500

# Declare a variable utilities_cost and assign it a value of 150.
utilities_cost = 150

# Declare a variable food_cost and assign it a value of 250.
food_cost = 250

# Declare a variable transportation_cost and assign it a value of 350.
transportation_cost = 350

# Declare a variable computer_cost and assign it a value of 2000.
computer_cost = 2000

# Declare a variable called total_cost that takes the sum of all costs above (excluding budget).
total_cost = rent_cost + utilities_cost + food_cost + transportation_cost + computer_cost
print(total_cost)

# Write an if statement that checks whether the sum of all our costs is within the budget.
# If so, print "You're total cost is " concatentated with the `total_cost` variable.
# Else, print "You're over budget by " concatenated with the difference between `budget` and `total_cost`.


# Write an if statement that checks whether the rent_cost is larger than the sum of the `utilities_cost`, `food_cost`,
# and `transportation_cost`. If so, print a string that says "The rent is too damn high!".
# Else, print a string that says "Ahhh just right!"
34/11:
# Declare a variable named 'dog' with a string of "Spot".
dog = "Spot"
# Declare 3 variables `cat`, `city`, `car` without assigning them values.
cat = ""
city = ""
car = ""

# Assign the string "Farley" to `cat`.
cat = "Farley"

# Assign the string "San Francisco" to `city`.
city = "San Francisco"

# Assign the string "Prius" to `car`.
car = "Prius"

# Using string concatenation, print out the sentence "See Spot run!".
print(f'See {dog} run!')

# Using string concatenation, print out the sentence "I drive Farley around San Francisco in my Prius".
print(f'I drive {cat} around {city} in my {car}')

# Declare a variable budget and assign it a value of 5000.
budget = 5000

# Declare a variable rent_cost and assign it a value of 1500.
rent_cost = 1500

# Declare a variable utilities_cost and assign it a value of 150.
utilities_cost = 150

# Declare a variable food_cost and assign it a value of 250.
food_cost = 250

# Declare a variable transportation_cost and assign it a value of 350.
transportation_cost = 350

# Declare a variable computer_cost and assign it a value of 2000.
computer_cost = 2000

# Declare a variable called total_cost that takes the sum of all costs above (excluding budget).
total_cost = rent_cost + utilities_cost + food_cost + transportation_cost + computer_cost
print(total_cost)
over_budget_amount = budget - total_cost
# Write an if statement that checks whether the sum of all our costs is within the budget.
# If so, print "You're total cost is " concatentated with the `total_cost` variable.
# Else, print "You're over budget by " concatenated with the difference between `budget` and `total_cost`.
if total cost < budget:
    print(f'Your total cost is {total_cost} and your budget is only {budget}')
else:
    print(f"You're over budget by {over_budget_amount}")

# Write an if statement that checks whether the rent_cost is larger than the sum of the `utilities_cost`, `food_cost`,
# and `transportation_cost`. If so, print a string that says "The rent is too damn high!".
# Else, print a string that says "Ahhh just right!"
34/12:
# Declare a variable named 'dog' with a string of "Spot".
dog = "Spot"
# Declare 3 variables `cat`, `city`, `car` without assigning them values.
cat = ""
city = ""
car = ""

# Assign the string "Farley" to `cat`.
cat = "Farley"

# Assign the string "San Francisco" to `city`.
city = "San Francisco"

# Assign the string "Prius" to `car`.
car = "Prius"

# Using string concatenation, print out the sentence "See Spot run!".
print(f'See {dog} run!')

# Using string concatenation, print out the sentence "I drive Farley around San Francisco in my Prius".
print(f'I drive {cat} around {city} in my {car}')

# Declare a variable budget and assign it a value of 5000.
budget = 5000

# Declare a variable rent_cost and assign it a value of 1500.
rent_cost = 1500

# Declare a variable utilities_cost and assign it a value of 150.
utilities_cost = 150

# Declare a variable food_cost and assign it a value of 250.
food_cost = 250

# Declare a variable transportation_cost and assign it a value of 350.
transportation_cost = 350

# Declare a variable computer_cost and assign it a value of 2000.
computer_cost = 2000

# Declare a variable called total_cost that takes the sum of all costs above (excluding budget).
total_cost = rent_cost + utilities_cost + food_cost + transportation_cost + computer_cost
print(total_cost)
over_budget_amount = budget - total_cost
# Write an if statement that checks whether the sum of all our costs is within the budget.
# If so, print "You're total cost is " concatentated with the `total_cost` variable.
# Else, print "You're over budget by " concatenated with the difference between `budget` and `total_cost`.
if total_cost < budget:
    print(f'Your total cost is {total_cost} and your budget is only {budget}')
else:
    print(f"You're over budget by {over_budget_amount}")

# Write an if statement that checks whether the rent_cost is larger than the sum of the `utilities_cost`, `food_cost`,
# and `transportation_cost`. If so, print a string that says "The rent is too damn high!".
# Else, print a string that says "Ahhh just right!"
34/13:
# Declare a variable named 'dog' with a string of "Spot".
dog = "Spot"
# Declare 3 variables `cat`, `city`, `car` without assigning them values.
cat = ""
city = ""
car = ""

# Assign the string "Farley" to `cat`.
cat = "Farley"

# Assign the string "San Francisco" to `city`.
city = "San Francisco"

# Assign the string "Prius" to `car`.
car = "Prius"

# Using string concatenation, print out the sentence "See Spot run!".
print(f'See {dog} run!')

# Using string concatenation, print out the sentence "I drive Farley around San Francisco in my Prius".
print(f'I drive {cat} around {city} in my {car}')

# Declare a variable budget and assign it a value of 5000.
budget = 5000

# Declare a variable rent_cost and assign it a value of 1500.
rent_cost = 1500

# Declare a variable utilities_cost and assign it a value of 150.
utilities_cost = 1500

# Declare a variable food_cost and assign it a value of 250.
food_cost = 250

# Declare a variable transportation_cost and assign it a value of 350.
transportation_cost = 350

# Declare a variable computer_cost and assign it a value of 2000.
computer_cost = 2000

# Declare a variable called total_cost that takes the sum of all costs above (excluding budget).
total_cost = rent_cost + utilities_cost + food_cost + transportation_cost + computer_cost
print(total_cost)
over_budget_amount = budget - total_cost
# Write an if statement that checks whether the sum of all our costs is within the budget.
# If so, print "You're total cost is " concatentated with the `total_cost` variable.
# Else, print "You're over budget by " concatenated with the difference between `budget` and `total_cost`.
if total_cost < budget:
    print(f'Your total cost is {total_cost} and your budget is only {budget}')
else:
    print(f"You're over budget by {over_budget_amount}")

# Write an if statement that checks whether the rent_cost is larger than the sum of the `utilities_cost`, `food_cost`,
# and `transportation_cost`. If so, print a string that says "The rent is too damn high!".
# Else, print a string that says "Ahhh just right!"
34/14:
# Declare a variable named 'dog' with a string of "Spot".
dog = "Spot"
# Declare 3 variables `cat`, `city`, `car` without assigning them values.
cat = ""
city = ""
car = ""

# Assign the string "Farley" to `cat`.
cat = "Farley"

# Assign the string "San Francisco" to `city`.
city = "San Francisco"

# Assign the string "Prius" to `car`.
car = "Prius"

# Using string concatenation, print out the sentence "See Spot run!".
print(f'See {dog} run!')

# Using string concatenation, print out the sentence "I drive Farley around San Francisco in my Prius".
print(f'I drive {cat} around {city} in my {car}')

# Declare a variable budget and assign it a value of 5000.
budget = 5000

# Declare a variable rent_cost and assign it a value of 1500.
rent_cost = 1500

# Declare a variable utilities_cost and assign it a value of 150.
utilities_cost = 1500

# Declare a variable food_cost and assign it a value of 250.
food_cost = 250

# Declare a variable transportation_cost and assign it a value of 350.
transportation_cost = 350

# Declare a variable computer_cost and assign it a value of 2000.
computer_cost = 2000

# Declare a variable called total_cost that takes the sum of all costs above (excluding budget).
total_cost = rent_cost + utilities_cost + food_cost + transportation_cost + computer_cost
print(total_cost)
over_budget_amount = budget - total_cost
# Write an if statement that checks whether the sum of all our costs is within the budget.
# If so, print "You're total cost is " concatentated with the `total_cost` variable.
# Else, print "You're over budget by " concatenated with the difference between `budget` and `total_cost`.
if total_cost < budget:
    print(f'Your total cost is {total_cost} and your budget is only {budget}')
else:
    print(f"You're over your budget by {over_budget_amount}")

# Write an if statement that checks whether the rent_cost is larger than the sum of the `utilities_cost`, `food_cost`,
# and `transportation_cost`. If so, print a string that says "The rent is too damn high!".
# Else, print a string that says "Ahhh just right!"
34/15:
# Declare a variable named 'dog' with a string of "Spot".
dog = "Spot"
# Declare 3 variables `cat`, `city`, `car` without assigning them values.
cat = ""
city = ""
car = ""

# Assign the string "Farley" to `cat`.
cat = "Farley"

# Assign the string "San Francisco" to `city`.
city = "San Francisco"

# Assign the string "Prius" to `car`.
car = "Prius"

# Using string concatenation, print out the sentence "See Spot run!".
print(f'See {dog} run!')

# Using string concatenation, print out the sentence "I drive Farley around San Francisco in my Prius".
print(f'I drive {cat} around {city} in my {car}')

# Declare a variable budget and assign it a value of 5000.
budget = 5000

# Declare a variable rent_cost and assign it a value of 1500.
rent_cost = 1500

# Declare a variable utilities_cost and assign it a value of 150.
utilities_cost = 1500

# Declare a variable food_cost and assign it a value of 250.
food_cost = 250

# Declare a variable transportation_cost and assign it a value of 350.
transportation_cost = 350

# Declare a variable computer_cost and assign it a value of 2000.
computer_cost = 2000

# Declare a variable called total_cost that takes the sum of all costs above (excluding budget).
total_cost = rent_cost + utilities_cost + food_cost + transportation_cost + computer_cost
print(total_cost)
over_budget_amount = budget - total_cost
# Write an if statement that checks whether the sum of all our costs is within the budget.
# If so, print "You're total cost is " concatentated with the `total_cost` variable.
# Else, print "You're over budget by " concatenated with the difference between `budget` and `total_cost`.
if total_cost < budget:
    print(f'Your total cost is {total_cost} and your budget is only {budget}')
else:
    print(f"You're over your budget by {over_budget_amount}")

# Write an if statement that checks whether the rent_cost is larger than the sum of the `utilities_cost`, `food_cost`,
# and `transportation_cost`. If so, print a string that says "The rent is too damn high!".
# Else, print a string that says "Ahhh just right!"
34/16:
# Declare a variable named 'dog' with a string of "Spot".
dog = "Spot"
# Declare 3 variables `cat`, `city`, `car` without assigning them values.
cat = ""
city = ""
car = ""

# Assign the string "Farley" to `cat`.
cat = "Farley"

# Assign the string "San Francisco" to `city`.
city = "San Francisco"

# Assign the string "Prius" to `car`.
car = "Prius"

# Using string concatenation, print out the sentence "See Spot run!".
print(f'See {dog} run!')

# Using string concatenation, print out the sentence "I drive Farley around San Francisco in my Prius".
print(f'I drive {cat} around {city} in my {car}')

# Declare a variable budget and assign it a value of 5000.
budget = 5000

# Declare a variable rent_cost and assign it a value of 1500.
rent_cost = 1500

# Declare a variable utilities_cost and assign it a value of 150.
utilities_cost = 1500

# Declare a variable food_cost and assign it a value of 250.
food_cost = 250

# Declare a variable transportation_cost and assign it a value of 350.
transportation_cost = 350

# Declare a variable computer_cost and assign it a value of 2000.
computer_cost = 2000

# Declare a variable called total_cost that takes the sum of all costs above (excluding budget).
total_cost = rent_cost + utilities_cost + food_cost + transportation_cost + computer_cost
print(total_cost)
over_budget_amount = budget - total_cost
# Write an if statement that checks whether the sum of all our costs is within the budget.
# If so, print "You're total cost is " concatentated with the `total_cost` variable.
# Else, print "You're over budget by " concatenated with the difference between `budget` and `total_cost`.
if total_cost < budget:
    print(f'Your total cost is {total_cost} and your budget is only {budget}')
else:
    print(f"You're over your budget by {over_budget_amount}")

# Write an if statement that checks whether the rent_cost is larger than the sum of the `utilities_cost`, `food_cost`,
# and `transportation_cost`. If so, print a string that says "The rent is too damn high!".
# Else, print a string that says "Ahhh just right!"
34/17:
# Declare a variable named 'dog' with a string of "Spot".
dog = "Spot"
# Declare 3 variables `cat`, `city`, `car` without assigning them values.
cat = ""
city = ""
car = ""

# Assign the string "Farley" to `cat`.
cat = "Farley"

# Assign the string "San Francisco" to `city`.
city = "San Francisco"

# Assign the string "Prius" to `car`.
car = "Prius"

# Using string concatenation, print out the sentence "See Spot run!".
print(f'See {dog} run!')

# Using string concatenation, print out the sentence "I drive Farley around San Francisco in my Prius".
print(f'I drive {cat} around {city} in my {car}')

# Declare a variable budget and assign it a value of 5000.
budget = 5000

# Declare a variable rent_cost and assign it a value of 1500.
rent_cost = 1500

# Declare a variable utilities_cost and assign it a value of 150.
utilities_cost = 1500

# Declare a variable food_cost and assign it a value of 250.
food_cost = 250

# Declare a variable transportation_cost and assign it a value of 350.
transportation_cost = 350

# Declare a variable computer_cost and assign it a value of 2000.
computer_cost = 2000

# Declare a variable called total_cost that takes the sum of all costs above (excluding budget).
total_cost = rent_cost + utilities_cost + food_cost + transportation_cost + computer_cost
print(total_cost)
over_budget_amount = total_cost - budget
# Write an if statement that checks whether the sum of all our costs is within the budget.
# If so, print "You're total cost is " concatentated with the `total_cost` variable.
# Else, print "You're over budget by " concatenated with the difference between `budget` and `total_cost`.
if total_cost < budget:
    print(f'Your total cost is {total_cost} and your budget is only {budget}')
else:
    print(f"You're over your budget by {over_budget_amount}")

# Write an if statement that checks whether the rent_cost is larger than the sum of the `utilities_cost`, `food_cost`,
# and `transportation_cost`. If so, print a string that says "The rent is too damn high!".
# Else, print a string that says "Ahhh just right!"
34/18:
# Declare a variable named 'dog' with a string of "Spot".
dog = "Spot"
# Declare 3 variables `cat`, `city`, `car` without assigning them values.
cat = ""
city = ""
car = ""

# Assign the string "Farley" to `cat`.
cat = "Farley"

# Assign the string "San Francisco" to `city`.
city = "San Francisco"

# Assign the string "Prius" to `car`.
car = "Prius"

# Using string concatenation, print out the sentence "See Spot run!".
print(f'See {dog} run!')

# Using string concatenation, print out the sentence "I drive Farley around San Francisco in my Prius".
print(f'I drive {cat} around {city} in my {car}')

# Declare a variable budget and assign it a value of 5000.
budget = 5000

# Declare a variable rent_cost and assign it a value of 1500.
rent_cost = 1500

# Declare a variable utilities_cost and assign it a value of 150.
utilities_cost = 150

# Declare a variable food_cost and assign it a value of 250.
food_cost = 250

# Declare a variable transportation_cost and assign it a value of 350.
transportation_cost = 350

# Declare a variable computer_cost and assign it a value of 2000.
computer_cost = 2000

# Declare a variable called total_cost that takes the sum of all costs above (excluding budget).
total_cost = rent_cost + utilities_cost + food_cost + transportation_cost + computer_cost
print(total_cost)
over_budget_amount = total_cost - budget
# Write an if statement that checks whether the sum of all our costs is within the budget.
# If so, print "You're total cost is " concatentated with the `total_cost` variable.
# Else, print "You're over budget by " concatenated with the difference between `budget` and `total_cost`.
if total_cost < budget:
    print(f'Your total cost is {total_cost} and your budget is only {budget}')
else:
    print(f"You're over your budget by {over_budget_amount}")

# Write an if statement that checks whether the rent_cost is larger than the sum of the `utilities_cost`, `food_cost`,
# and `transportation_cost`. If so, print a string that says "The rent is too damn high!".
# Else, print a string that says "Ahhh just right!"
34/19:
# Declare a variable named 'dog' with a string of "Spot".
dog = "Spot"
# Declare 3 variables `cat`, `city`, `car` without assigning them values.
cat = ""
city = ""
car = ""

# Assign the string "Farley" to `cat`.
cat = "Farley"

# Assign the string "San Francisco" to `city`.
city = "San Francisco"

# Assign the string "Prius" to `car`.
car = "Prius"

# Using string concatenation, print out the sentence "See Spot run!".
print(f'See {dog} run!')

# Using string concatenation, print out the sentence "I drive Farley around San Francisco in my Prius".
print(f'I drive {cat} around {city} in my {car}')

# Declare a variable budget and assign it a value of 5000.
budget = 5000

# Declare a variable rent_cost and assign it a value of 1500.
rent_cost = 1500

# Declare a variable utilities_cost and assign it a value of 150.
utilities_cost = 150

# Declare a variable food_cost and assign it a value of 250.
food_cost = 250

# Declare a variable transportation_cost and assign it a value of 350.
transportation_cost = 350

# Declare a variable computer_cost and assign it a value of 2000.
computer_cost = 2000

# Declare a variable called total_cost that takes the sum of all costs above (excluding budget).
total_cost = rent_cost + utilities_cost + food_cost + transportation_cost + computer_cost
print(total_cost)
over_budget_amount = total_cost - budget
# Write an if statement that checks whether the sum of all our costs is within the budget.
# If so, print "You're total cost is " concatentated with the `total_cost` variable.
# Else, print "You're over budget by " concatenated with the difference between `budget` and `total_cost`.
if total_cost < budget:
    print(f'Your total cost is {total_cost} and your budget is {budget}')
else:
    print(f"You're over your budget by {over_budget_amount}")

# Write an if statement that checks whether the rent_cost is larger than the sum of the `utilities_cost`, `food_cost`,
# and `transportation_cost`. If so, print a string that says "The rent is too damn high!".
# Else, print a string that says "Ahhh just right!"
34/20:
# Declare a variable named 'dog' with a string of "Spot".
dog = "Spot"
# Declare 3 variables `cat`, `city`, `car` without assigning them values.
cat = ""
city = ""
car = ""

# Assign the string "Farley" to `cat`.
cat = "Farley"

# Assign the string "San Francisco" to `city`.
city = "San Francisco"

# Assign the string "Prius" to `car`.
car = "Prius"

# Using string concatenation, print out the sentence "See Spot run!".
print(f'See {dog} run!')

# Using string concatenation, print out the sentence "I drive Farley around San Francisco in my Prius".
print(f'I drive {cat} around {city} in my {car}')

# Declare a variable budget and assign it a value of 5000.
budget = 5000

# Declare a variable rent_cost and assign it a value of 1500.
rent_cost = 1500

# Declare a variable utilities_cost and assign it a value of 150.
utilities_cost = 150

# Declare a variable food_cost and assign it a value of 250.
food_cost = 250

# Declare a variable transportation_cost and assign it a value of 350.
transportation_cost = 350

# Declare a variable computer_cost and assign it a value of 2000.
computer_cost = 2000

# Declare a variable called total_cost that takes the sum of all costs above (excluding budget).
total_cost = rent_cost + utilities_cost + food_cost + transportation_cost + computer_cost
print(total_cost)
over_budget_amount = total_cost - budget
# Write an if statement that checks whether the sum of all our costs is within the budget.
# If so, print "You're total cost is " concatentated with the `total_cost` variable.
# Else, print "You're over budget by " concatenated with the difference between `budget` and `total_cost`.
if total_cost < budget:
    print(f'Your total cost is {total_cost} and your budget is {budget}')
else:
    print(f"You're over your budget by {over_budget_amount}")

# Write an if statement that checks whether the rent_cost is larger than the sum of the `utilities_cost`, `food_cost`,
# and `transportation_cost`. If so, print a string that says "The rent is too damn high!".
if rent_cost > (utilities_cost + food_cost + transportation_cost):
    print("The rent is too damn high!")
else:
    print("Ahhh just right!")
    
# Else, print a string that says "Ahhh just right!"
36/1:
# Declare a variable `welcome_name` as an input with a string of "Welcome to the sandwich shop, what do I call you?".
welcome_name = input("Welcome to the sandwich shop, what do I call you? ")

# Then print the string "Hello" concatenated with the variable `welcome_name`.
print(f"Hello {welcome_name}")

# Declare a variable `question_sandwich` as an input with a string of "Are you here for a sandwich?".
question_sandwich = input("Are you here for a sandwich? Yes or No?")

# If `question_sandwich` is equal to true declare a variable `food_prompt` as an input with a string of "What kind of sandwich would you like?".
# Then print a string of "Please wait 10 min for your " concatenated with the variable `food_prompt`.
# Else If `question_sandwich` is false, print a string of "If you don't want a sandwich what are you here for?!".
# Else print a string of "You did not write Yes or No!"
if question_sandwich == "Yes":
    food_prompt = input("What kind of sandwich would you like?")
    print(f"Please wait 10 mins for your {food_prompt}")
elif question_sandwich == "No":
    print("If you don't want a sandwich what are you here for?!")
else:
    print("You did not write Yes or No!")
37/1:
# Declare a variable of `name` with an input and a string of "Welcome to the Boba Shop! What is your name?".
name = input("Welcome to the Bob Shop! What is your name?")

# Check if `name` is not an empty string or equal to `None`.

if name != "" or name == None:
    print(f'Hello {name}')
    
    # If so, write a print with a string of "Hello" concatenated with the variable `name`.


    # Then, declare a variable of `beverage` with an input and a string of "What kind of boba drink would you like?".
beverage = input("What kind of bob drink would you like?")

    # Then, Declare a variable of `sweetness` with an input and a string of "How sweet do you want your drink: 0, 50, 100, or 200?".
sweetness = input("How sweet do you want your drink: 0, 50, 100, or 200?")

    # If `sweetness` equals 50 print "half sweetened".
if sweetness == 50:
    sweetness = "half sweetened"
    
    # Else if `sweetness` 100 print "normal sweet".
elif sweetness == 100:
    sweetness = "normal sweet"
    # Else if `sweetness` 200 print "super sweet".
elif sweetness == 200:
    sweetness = "super sweet"
    # Else print with a string of "non-sweet".
else:
    sweetness = "non-sweet"

    # Then print the string of "Your order of " concatenated with the variable `beverage`, concatenated with " boba with a sweet level of ", concatenated with the variable `sweetness`
    print(f'Your order of {beverage} boba with a sweet level of {sweetness}')
# Else, print the string of "You didn't give us your name! Goodbye"
else:
    print"Fuck off!"
37/2:
# Declare a variable of `name` with an input and a string of "Welcome to the Boba Shop! What is your name?".
name = input("Welcome to the Bob Shop! What is your name?")

# Check if `name` is not an empty string or equal to `None`.

if name != "" or name == None:
    print(f'Hello {name}')
    
    # If so, write a print with a string of "Hello" concatenated with the variable `name`.


    # Then, declare a variable of `beverage` with an input and a string of "What kind of boba drink would you like?".
beverage = input("What kind of bob drink would you like?")

    # Then, Declare a variable of `sweetness` with an input and a string of "How sweet do you want your drink: 0, 50, 100, or 200?".
sweetness = input("How sweet do you want your drink: 0, 50, 100, or 200?")

    # If `sweetness` equals 50 print "half sweetened".
    if sweetness == 50:
        sweetness = "half sweetened"
    
    # Else if `sweetness` 100 print "normal sweet".
    elif sweetness == 100:
        sweetness = "normal sweet"
    # Else if `sweetness` 200 print "super sweet".
    elif sweetness == 200:
        sweetness = "super sweet"
    # Else print with a string of "non-sweet".
    else:
        sweetness = "non-sweet"

    # Then print the string of "Your order of " concatenated with the variable `beverage`, concatenated with " boba with a sweet level of ", concatenated with the variable `sweetness`
    print(f'Your order of {beverage} boba with a sweet level of {sweetness}')
# Else, print the string of "You didn't give us your name! Goodbye"
else:
    print"Fuck off!"
37/3:
# Declare a variable of `name` with an input and a string of "Welcome to the Boba Shop! What is your name?".
name = input("Welcome to the Bob Shop! What is your name?")

# Check if `name` is not an empty string or equal to `None`.

if name != "" or name == None:
    print(f'Hello {name}')
    
    # If so, write a print with a string of "Hello" concatenated with the variable `name`.


    # Then, declare a variable of `beverage` with an input and a string of "What kind of boba drink would you like?".
    beverage = input("What kind of bob drink would you like?")

    # Then, Declare a variable of `sweetness` with an input and a string of "How sweet do you want your drink: 0, 50, 100, or 200?".
    sweetness = input("How sweet do you want your drink: 0, 50, 100, or 200?")

    # If `sweetness` equals 50 print "half sweetened".
    if sweetness == 50:
        sweetness = "half sweetened"
    
    # Else if `sweetness` 100 print "normal sweet".
    elif sweetness == 100:
        sweetness = "normal sweet"
    # Else if `sweetness` 200 print "super sweet".
    elif sweetness == 200:
        sweetness = "super sweet"
    # Else print with a string of "non-sweet".
    else:
        sweetness = "non-sweet"

    # Then print the string of "Your order of " concatenated with the variable `beverage`, concatenated with " boba with a sweet level of ", concatenated with the variable `sweetness`
    print(f'Your order of {beverage} boba with a sweet level of {sweetness}')
# Else, print the string of "You didn't give us your name! Goodbye"
else:
    print"Fuck off!"
37/4:
# Declare a variable of `name` with an input and a string of "Welcome to the Boba Shop! What is your name?".
name = input("Welcome to the Bob Shop! What is your name?")

# Check if `name` is not an empty string or equal to `None`.

if name != "" or name == None:
    print(f'Hello {name}')
    
    # If so, write a print with a string of "Hello" concatenated with the variable `name`.


    # Then, declare a variable of `beverage` with an input and a string of "What kind of boba drink would you like?".
    beverage = input("What kind of bob drink would you like?")

    # Then, Declare a variable of `sweetness` with an input and a string of "How sweet do you want your drink: 0, 50, 100, or 200?".
    sweetness = input("How sweet do you want your drink: 0, 50, 100, or 200?")

    # If `sweetness` equals 50 print "half sweetened".
    if sweetness == 50:
        sweetness = "half sweetened"
    
    # Else if `sweetness` 100 print "normal sweet".
    elif sweetness == 100:
        sweetness = "normal sweet"
    # Else if `sweetness` 200 print "super sweet".
    elif sweetness == 200:
        sweetness = "super sweet"
    # Else print with a string of "non-sweet".
    else:
        sweetness = "non-sweet"

    # Then print the string of "Your order of " concatenated with the variable `beverage`, concatenated with " boba with a sweet level of ", concatenated with the variable `sweetness`
    print(f'Your order of {beverage} boba with a sweet level of {sweetness}')
# Else, print the string of "You didn't give us your name! Goodbye"
else:
    print()"Fuck off!")
37/5:
# Declare a variable of `name` with an input and a string of "Welcome to the Boba Shop! What is your name?".
name = input("Welcome to the Bob Shop! What is your name?")

# Check if `name` is not an empty string or equal to `None`.

if name != "" or name == None:
    print(f'Hello {name}')
    
    # If so, write a print with a string of "Hello" concatenated with the variable `name`.


    # Then, declare a variable of `beverage` with an input and a string of "What kind of boba drink would you like?".
    beverage = input("What kind of bob drink would you like?")

    # Then, Declare a variable of `sweetness` with an input and a string of "How sweet do you want your drink: 0, 50, 100, or 200?".
    sweetness = input("How sweet do you want your drink: 0, 50, 100, or 200?")

    # If `sweetness` equals 50 print "half sweetened".
    if sweetness == 50:
        sweetness = "half sweetened"
    
    # Else if `sweetness` 100 print "normal sweet".
    elif sweetness == 100:
        sweetness = "normal sweet"
    # Else if `sweetness` 200 print "super sweet".
    elif sweetness == 200:
        sweetness = "super sweet"
    # Else print with a string of "non-sweet".
    else:
        sweetness = "non-sweet"

    # Then print the string of "Your order of " concatenated with the variable `beverage`, concatenated with " boba with a sweet level of ", concatenated with the variable `sweetness`
    print(f'Your order of {beverage} boba with a sweet level of {sweetness}')
# Else, print the string of "You didn't give us your name! Goodbye"
else:
    print("Fuck off!")
37/6:
# Declare a variable of `name` with an input and a string of "Welcome to the Boba Shop! What is your name?".
name = input("Welcome to the Bob Shop! What is your name?")

# Check if `name` is not an empty string or equal to `None`.

if name != "" or name == None:
    print(f'Hello {name}')
    
    # If so, write a print with a string of "Hello" concatenated with the variable `name`.


    # Then, declare a variable of `beverage` with an input and a string of "What kind of boba drink would you like?".
    beverage = input("What kind of bob drink would you like?")

    # Then, Declare a variable of `sweetness` with an input and a string of "How sweet do you want your drink: 0, 50, 100, or 200?".
    sweetness = input("How sweet do you want your drink: 0, 50, 100, or 200?")

    # If `sweetness` equals 50 print "half sweetened".
    if sweetness == 50:
        sweetness = "half sweetened"
    
    # Else if `sweetness` 100 print "normal sweet".
    elif sweetness == 100:
        sweetness = "normal sweet"
    # Else if `sweetness` 200 print "super sweet".
    elif sweetness == 200:
        sweetness = "super sweet"
    # Else print with a string of "non-sweet".
    else:
        sweetness = "non-sweet"

    # Then print the string of "Your order of " concatenated with the variable `beverage`, concatenated with " boba with a sweet level of ", concatenated with the variable `sweetness`
    print(f'Your order is {beverage} boba with a sweet level of {sweetness}')
# Else, print the string of "You didn't give us your name! Goodbye"
else:
    print("Fuck off!")
37/7:
# Declare a variable of `name` with an input and a string of "Welcome to the Boba Shop! What is your name?".
name = input("Welcome to the Bob Shop! What is your name?")

# Check if `name` is not an empty string or equal to `None`.

if name != "" or name == None:
    print(f'Hello {name}')
    
    # If so, write a print with a string of "Hello" concatenated with the variable `name`.


    # Then, declare a variable of `beverage` with an input and a string of "What kind of boba drink would you like?".
    beverage = input("What flavor of boba drink would you like?")

    # Then, Declare a variable of `sweetness` with an input and a string of "How sweet do you want your drink: 0, 50, 100, or 200?".
    sweetness = input("How sweet do you want your drink: 0, 50, 100, or 200?")

    # If `sweetness` equals 50 print "half sweetened".
    if sweetness == 50:
        sweetness = "half sweetened"
    
    # Else if `sweetness` 100 print "normal sweet".
    elif sweetness == 100:
        sweetness = "normal sweet"
    # Else if `sweetness` 200 print "super sweet".
    elif sweetness == 200:
        sweetness = "super sweet"
    # Else print with a string of "non-sweet".
    else:
        sweetness = "non-sweet"

    # Then print the string of "Your order of " concatenated with the variable `beverage`, concatenated with " boba with a sweet level of ", concatenated with the variable `sweetness`
    print(f'Your order is {beverage} boba with a sweet level of {sweetness}')
# Else, print the string of "You didn't give us your name! Goodbye"
else:
    print("Fuck off!")
38/1:
# san_francisco = {
#     "west_coast": True,
#     "has_multiple_bridges": True,
#     "known_for_pizza": False,
#     "coastal": True,
#     "snows": False,
#     "very_hot": False,
#     "mayor": "London Breed",
#     "state": "California",
#     "country": "USA",
#     "best_food": "burritos",
#     "sports_teams": ["Giants", "Warriors", "Forty-Niners"],
#     "tallest_building": "SalesForce Building",
#     "population": 884363,
#     "city_size": "large",
#     "median_house_price": 1610000,
#     "famous_residents": ["Maya Angelou", "Robert Frost", "Carlos Santana"],
#     "homeless_pop": 1150,
#     "political_leaning": "Democrat",
#     "notable_attractions": ["Alcatraz", "Golden Gate Bridge", "Fisherman's Wharf"],
#     "natural_disasters": ["Earthquakes"],
# }

# Re-create the content of the commented out `san_francisco` dictionary by using bracket notation to manually add each of the key-value pairs (including nested objects).
san_francisco = {}

san_francisco['west_coast'] = True
san_francisco['has_multiple_bridges'] = True
san_francisco['known_for_pizza'] = False
san_francisco['coastal'] = True
san_francisco['snows'] = False
san_francisco['very_hot'] = False
san_francisco['mayor'] = "London Breed"
san_francisco['state'] = "California"
san_francisco['country'] = "USA"
san_francisco['best_food'] = "burritos"
san_francisco['sports_teams'] = ["Giants", "Warriors", "Forty-Niners"]
san_francisco['tallest_building'] = "SalesForce Building"
san_francisco['population'] = 884363
san_francisco['city_size'] = "large"
san_francisco['median_house_price'] = 1610000
san_francisco['famous_residents'] = ["Maya Angelous", "Robert Frost", "Carlos Santana"]
san_francisco['homeless_pop'] = 1150
san_francisco['political_leaning'] = "Democrat"
san_francisco['notable_attractions'] = ["Alcatraz", "Golden Gate Bridge", "Fisherman's Wharf"]
san_francisco['natural_disasters'] = ["Earthquakes"]

# Print the manually modified `san_francisco` dictionary and confirm the contents match the commented out version.
print(san_francisco)
39/1:
# Use the `from` keyword to import the `shows` dictionary from the `show_data.py` file
from show_data.py import

# QUESTION 1: Who is the actor that plays Squidward in Spongebob (kids)?


# QUESTION 2: Patrick Warburton plays Joe Swanson in Family Guy (comedy). What is the link to his imdb page?


# QUESTION 3: Is the Walking Dead still running?


# QUESTION 4: Who plays Dexter in Dexter (drama) and who plays Dexter in Dexter's Lab (kids)?
# HINT: You can print multiple items at once by using a comma like this: print(thing1, thing2)


# QUESTION 5: Who are the creators of Stranger Things (drama)?


# QUESTION 6: Who hosts the Daily Show (talk)?


# QUESTION 7: Who are all the hosts of the view (talk)
# Hint: You will need to use a loop for this one. You may not simply log the entire list, but must log each name individually


# QUESTION 8: What are the show names of the Impractical Jokers (comedy)
# Hint: You will need to use a loop for this one. You may not simply log the entire list, but must log each name individually


# QUESTION 9: Who does Will Arnett play in Arrested Development (comedy)


# QUESTION 10: Who plays Yami Yugi in Yu-Gi-Oh (kids)?


# QUESTION 11: How many seasons did the Office (comedy) run?


# QUESTION 12: Who are the main characters of the Office (comedy) (not the actors, but the actual character names)?


# QUESTION 13: List the characters in Teen Titans (kids)


# QUESTION 14: What is the link to the IMDB page for the actor who plays Mr. Krabs (Spongebob, kids)?


# QUESTION 15: Who plays Negan in The Walking Dead?


# QUESTION 16: List the main cast of Dexter (drama) (the actors, not the characters)


# QUESTION 17: Is Game of Thrones(drama) still running?


# QUESTION 18: Who does Peter Dinklage play in Game of Thrones (drama)?


# QUESTION 19: List the American Idol Judges


# QUESTION 20: Who plays Dustin in Stanger Things (drama)?
39/2:
# Use the `from` keyword to import the `shows` dictionary from the `show_data.py` file
from show_data.py import

# QUESTION 1: Who is the actor that plays Squidward in Spongebob (kids)?
print(shows['genre']['kids']['Spongebob']['cast'][3]['actor'])

# QUESTION 2: Patrick Warburton plays Joe Swanson in Family Guy (comedy). What is the link to his imdb page?


# QUESTION 3: Is the Walking Dead still running?


# QUESTION 4: Who plays Dexter in Dexter (drama) and who plays Dexter in Dexter's Lab (kids)?
# HINT: You can print multiple items at once by using a comma like this: print(thing1, thing2)


# QUESTION 5: Who are the creators of Stranger Things (drama)?


# QUESTION 6: Who hosts the Daily Show (talk)?


# QUESTION 7: Who are all the hosts of the view (talk)
# Hint: You will need to use a loop for this one. You may not simply log the entire list, but must log each name individually


# QUESTION 8: What are the show names of the Impractical Jokers (comedy)
# Hint: You will need to use a loop for this one. You may not simply log the entire list, but must log each name individually


# QUESTION 9: Who does Will Arnett play in Arrested Development (comedy)


# QUESTION 10: Who plays Yami Yugi in Yu-Gi-Oh (kids)?


# QUESTION 11: How many seasons did the Office (comedy) run?


# QUESTION 12: Who are the main characters of the Office (comedy) (not the actors, but the actual character names)?


# QUESTION 13: List the characters in Teen Titans (kids)


# QUESTION 14: What is the link to the IMDB page for the actor who plays Mr. Krabs (Spongebob, kids)?


# QUESTION 15: Who plays Negan in The Walking Dead?


# QUESTION 16: List the main cast of Dexter (drama) (the actors, not the characters)


# QUESTION 17: Is Game of Thrones(drama) still running?


# QUESTION 18: Who does Peter Dinklage play in Game of Thrones (drama)?


# QUESTION 19: List the American Idol Judges


# QUESTION 20: Who plays Dustin in Stanger Things (drama)?
39/3:
# Use the `from` keyword to import the `shows` dictionary from the `show_data.py` file
from show_data.py import shows

# QUESTION 1: Who is the actor that plays Squidward in Spongebob (kids)?
print(shows['genre']['kids']['Spongebob']['cast'][3]['actor'])

# QUESTION 2: Patrick Warburton plays Joe Swanson in Family Guy (comedy). What is the link to his imdb page?


# QUESTION 3: Is the Walking Dead still running?


# QUESTION 4: Who plays Dexter in Dexter (drama) and who plays Dexter in Dexter's Lab (kids)?
# HINT: You can print multiple items at once by using a comma like this: print(thing1, thing2)


# QUESTION 5: Who are the creators of Stranger Things (drama)?


# QUESTION 6: Who hosts the Daily Show (talk)?


# QUESTION 7: Who are all the hosts of the view (talk)
# Hint: You will need to use a loop for this one. You may not simply log the entire list, but must log each name individually


# QUESTION 8: What are the show names of the Impractical Jokers (comedy)
# Hint: You will need to use a loop for this one. You may not simply log the entire list, but must log each name individually


# QUESTION 9: Who does Will Arnett play in Arrested Development (comedy)


# QUESTION 10: Who plays Yami Yugi in Yu-Gi-Oh (kids)?


# QUESTION 11: How many seasons did the Office (comedy) run?


# QUESTION 12: Who are the main characters of the Office (comedy) (not the actors, but the actual character names)?


# QUESTION 13: List the characters in Teen Titans (kids)


# QUESTION 14: What is the link to the IMDB page for the actor who plays Mr. Krabs (Spongebob, kids)?


# QUESTION 15: Who plays Negan in The Walking Dead?


# QUESTION 16: List the main cast of Dexter (drama) (the actors, not the characters)


# QUESTION 17: Is Game of Thrones(drama) still running?


# QUESTION 18: Who does Peter Dinklage play in Game of Thrones (drama)?


# QUESTION 19: List the American Idol Judges


# QUESTION 20: Who plays Dustin in Stanger Things (drama)?
39/4:
# Use the `from` keyword to import the `shows` dictionary from the `show_data.py` file
from show_data.py import shows

# QUESTION 1: Who is the actor that plays Squidward in Spongebob (kids)?
print(shows['genre']['kids']['Spongebob']['cast'][3]['actor'])

# QUESTION 2: Patrick Warburton plays Joe Swanson in Family Guy (comedy). What is the link to his imdb page?


# QUESTION 3: Is the Walking Dead still running?


# QUESTION 4: Who plays Dexter in Dexter (drama) and who plays Dexter in Dexter's Lab (kids)?
# HINT: You can print multiple items at once by using a comma like this: print(thing1, thing2)


# QUESTION 5: Who are the creators of Stranger Things (drama)?


# QUESTION 6: Who hosts the Daily Show (talk)?


# QUESTION 7: Who are all the hosts of the view (talk)
# Hint: You will need to use a loop for this one. You may not simply log the entire list, but must log each name individually


# QUESTION 8: What are the show names of the Impractical Jokers (comedy)
# Hint: You will need to use a loop for this one. You may not simply log the entire list, but must log each name individually


# QUESTION 9: Who does Will Arnett play in Arrested Development (comedy)


# QUESTION 10: Who plays Yami Yugi in Yu-Gi-Oh (kids)?


# QUESTION 11: How many seasons did the Office (comedy) run?


# QUESTION 12: Who are the main characters of the Office (comedy) (not the actors, but the actual character names)?


# QUESTION 13: List the characters in Teen Titans (kids)


# QUESTION 14: What is the link to the IMDB page for the actor who plays Mr. Krabs (Spongebob, kids)?


# QUESTION 15: Who plays Negan in The Walking Dead?


# QUESTION 16: List the main cast of Dexter (drama) (the actors, not the characters)


# QUESTION 17: Is Game of Thrones(drama) still running?


# QUESTION 18: Who does Peter Dinklage play in Game of Thrones (drama)?


# QUESTION 19: List the American Idol Judges


# QUESTION 20: Who plays Dustin in Stanger Things (drama)?
40/1:
# Use the `from` keyword to import the `shows` dictionary from the `show_data.py` file
from show_data.py import shows

# QUESTION 1: Who is the actor that plays Squidward in Spongebob (kids)?
print(shows['genre']['kids']['Spongebob']['cast'][3]['actor'])

# QUESTION 2: Patrick Warburton plays Joe Swanson in Family Guy (comedy). What is the link to his imdb page?


# QUESTION 3: Is the Walking Dead still running?


# QUESTION 4: Who plays Dexter in Dexter (drama) and who plays Dexter in Dexter's Lab (kids)?
# HINT: You can print multiple items at once by using a comma like this: print(thing1, thing2)


# QUESTION 5: Who are the creators of Stranger Things (drama)?


# QUESTION 6: Who hosts the Daily Show (talk)?


# QUESTION 7: Who are all the hosts of the view (talk)
# Hint: You will need to use a loop for this one. You may not simply log the entire list, but must log each name individually


# QUESTION 8: What are the show names of the Impractical Jokers (comedy)
# Hint: You will need to use a loop for this one. You may not simply log the entire list, but must log each name individually


# QUESTION 9: Who does Will Arnett play in Arrested Development (comedy)


# QUESTION 10: Who plays Yami Yugi in Yu-Gi-Oh (kids)?


# QUESTION 11: How many seasons did the Office (comedy) run?


# QUESTION 12: Who are the main characters of the Office (comedy) (not the actors, but the actual character names)?


# QUESTION 13: List the characters in Teen Titans (kids)


# QUESTION 14: What is the link to the IMDB page for the actor who plays Mr. Krabs (Spongebob, kids)?


# QUESTION 15: Who plays Negan in The Walking Dead?


# QUESTION 16: List the main cast of Dexter (drama) (the actors, not the characters)


# QUESTION 17: Is Game of Thrones(drama) still running?


# QUESTION 18: Who does Peter Dinklage play in Game of Thrones (drama)?


# QUESTION 19: List the American Idol Judges


# QUESTION 20: Who plays Dustin in Stanger Things (drama)?
40/2:
# Use the `from` keyword to import the `shows` dictionary from the `show_data.py` file
from show_data.py import shows

# QUESTION 1: Who is the actor that plays Squidward in Spongebob (kids)?
print(shows['genre']['kids']['Spongebob']['cast'][3]['actor'])

# QUESTION 2: Patrick Warburton plays Joe Swanson in Family Guy (comedy). What is the link to his imdb page?


# QUESTION 3: Is the Walking Dead still running?


# QUESTION 4: Who plays Dexter in Dexter (drama) and who plays Dexter in Dexter's Lab (kids)?
# HINT: You can print multiple items at once by using a comma like this: print(thing1, thing2)


# QUESTION 5: Who are the creators of Stranger Things (drama)?


# QUESTION 6: Who hosts the Daily Show (talk)?


# QUESTION 7: Who are all the hosts of the view (talk)
# Hint: You will need to use a loop for this one. You may not simply log the entire list, but must log each name individually


# QUESTION 8: What are the show names of the Impractical Jokers (comedy)
# Hint: You will need to use a loop for this one. You may not simply log the entire list, but must log each name individually


# QUESTION 9: Who does Will Arnett play in Arrested Development (comedy)


# QUESTION 10: Who plays Yami Yugi in Yu-Gi-Oh (kids)?


# QUESTION 11: How many seasons did the Office (comedy) run?


# QUESTION 12: Who are the main characters of the Office (comedy) (not the actors, but the actual character names)?


# QUESTION 13: List the characters in Teen Titans (kids)


# QUESTION 14: What is the link to the IMDB page for the actor who plays Mr. Krabs (Spongebob, kids)?


# QUESTION 15: Who plays Negan in The Walking Dead?


# QUESTION 16: List the main cast of Dexter (drama) (the actors, not the characters)


# QUESTION 17: Is Game of Thrones(drama) still running?


# QUESTION 18: Who does Peter Dinklage play in Game of Thrones (drama)?


# QUESTION 19: List the American Idol Judges


# QUESTION 20: Who plays Dustin in Stanger Things (drama)?
40/3:
# Use the `from` keyword to import the `shows` dictionary from the `show_data.py` file
from show_data.py import shows

# QUESTION 1: Who is the actor that plays Squidward in Spongebob (kids)?
print(shows['genre']['kids']['Spongebob']['cast'][3]['actor'])

# QUESTION 2: Patrick Warburton plays Joe Swanson in Family Guy (comedy). What is the link to his imdb page?


# QUESTION 3: Is the Walking Dead still running?


# QUESTION 4: Who plays Dexter in Dexter (drama) and who plays Dexter in Dexter's Lab (kids)?
# HINT: You can print multiple items at once by using a comma like this: print(thing1, thing2)


# QUESTION 5: Who are the creators of Stranger Things (drama)?


# QUESTION 6: Who hosts the Daily Show (talk)?


# QUESTION 7: Who are all the hosts of the view (talk)
# Hint: You will need to use a loop for this one. You may not simply log the entire list, but must log each name individually


# QUESTION 8: What are the show names of the Impractical Jokers (comedy)
# Hint: You will need to use a loop for this one. You may not simply log the entire list, but must log each name individually


# QUESTION 9: Who does Will Arnett play in Arrested Development (comedy)


# QUESTION 10: Who plays Yami Yugi in Yu-Gi-Oh (kids)?


# QUESTION 11: How many seasons did the Office (comedy) run?


# QUESTION 12: Who are the main characters of the Office (comedy) (not the actors, but the actual character names)?


# QUESTION 13: List the characters in Teen Titans (kids)


# QUESTION 14: What is the link to the IMDB page for the actor who plays Mr. Krabs (Spongebob, kids)?


# QUESTION 15: Who plays Negan in The Walking Dead?


# QUESTION 16: List the main cast of Dexter (drama) (the actors, not the characters)


# QUESTION 17: Is Game of Thrones(drama) still running?


# QUESTION 18: Who does Peter Dinklage play in Game of Thrones (drama)?


# QUESTION 19: List the American Idol Judges


# QUESTION 20: Who plays Dustin in Stanger Things (drama)?
43/1:
# Declare an empty list named `our_list`.
our_list = []

# Use the `append` list function to append the number 1 into `our_list`.
our_list.append(int(1))
print(our_list)

# Append the string "hello" into `our_list`.
our_list.append("hello")
print(our_list)

# Append the boolean False into `our_list`.
our_list.append(False)

# Append the number 84 into `our_list`.
our_list.append(84)

# Append the string "world" into `our_list`
our_list.append("world")

# Print `our_list`
print(our_list)

# Declare a variable named `one_to_ten` and assign it an list containing the numbers from 1 to 10.


# Print the 4th element from `one_to_ten`.


# Print the 7th element from `one_to_ten`.


# We've declared this list for you
num_list = [2, 65, 3, 7, 39, 22, 11, 94, 299, 9, 20, 21, 51, 37]
num = 0
# Iterate through the provided `num_list` and create an if-else statement to print every number greater than 50
for num in num_list:
  if num > 50:
     print(num)


# Iterate through the provided `num_list` and use the `index` function to print the index of the first occurrence of the number 11.


# Iterate through the provided `num_list` and print the sum of all the numbers.


# Iterate through the provided `num_list` and create an if-else statement to print the sum of all the numbers greater than 50.


# Iterate through the provided `num_list` and create an if-else statement to print the sum of all the even numbers.


fruits = [
  "Apple", "Orange", "Banana", "Pomelo", "Apple", "Kiwi", "Peach", "Banana", "Grape", "Tomato",
  "Kiwi", "Apple", "Watermelon", "Lemon", "Pomelo", "Apple", "Banana", "Peach", "Apricot", "Grape"]

# Iterate through the provided `fruits` list and print the number of times "Apple" appears in the list.


# Iterate through the provided `fruits` list and print the number of times "Peach" appears in the list.


# Iterate through the provided `fruits` list and print the number of fruits that start with "P" in the list.


## Challenge

# Create a new empty list named `unique_fruits`.


# Iterate through `fruits` and populate `unique_fruits` with only unique values from `fruits`. Hint: try looking up "not in" conditionals for if statements


# Print out the `unique_fruits` list.


# In this challenge we're going to be working with nested lists.
# You can store any type of data within an list- even other lists!
two_dim_list = [
  [54, 6, 7, 46, 78],
  [43, 9, 6, 65, 65],
  [32, 1, 44, 1, 23],
  [55, 12, 2, 34, 2],
  [2, 12, 44, 2, 12]]

# Iterate through the first list inside `two_dim_list` and print all the numbers less than 25.


# Iterate through the second list inside `two_dim_list` and print all the numbers less than 25.


# Iterate through the fifth list inside `two_dim_list` and print all the numbers less than 25.



# Iterate through `two_dim_list` and the lists inside of it and print all the odd numbers.


# Iterate through `two_dim_list` and the lists inside of it and print the sum of all the numbers that are a multiple of 3.
43/2:
# Print the 4th element from `one_to_ten`.
print(onet_to_ten[3])
43/3:
# Print the 4th element from `one_to_ten`.
print(one_to_ten[3])
43/4:
# Declare an empty list named `our_list`.
our_list = []

# Use the `append` list function to append the number 1 into `our_list`.
our_list.append(int(1))
print(our_list)

# Append the string "hello" into `our_list`.
our_list.append("hello")
print(our_list)

# Append the boolean False into `our_list`.
our_list.append(False)

# Append the number 84 into `our_list`.
our_list.append(84)

# Append the string "world" into `our_list`
our_list.append("world")

# Print `our_list`
print(our_list)
43/5:
# Declare a variable named `one_to_ten` and assign it an list containing the numbers from 1 to 10.
one_to_ten = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
43/6:
# Print the 4th element from `one_to_ten`.
print(one_to_ten[3])
43/7:
# Print the 7th element from `one_to_ten`.
print(one_to_ten[6])
43/8:
# We've declared this list for you
num_list = [2, 65, 3, 7, 39, 22, 11, 94, 299, 9, 20, 21, 51, 37]
num = 0
# Iterate through the provided `num_list` and create an if-else statement to print every number greater than 50
for num in num_list:
  if num > 50:
     print(num)


# Iterate through the provided `num_list` and use the `index` function to print the index of the first occurrence of the number 11.


# Iterate through the provided `num_list` and print the sum of all the numbers.


# Iterate through the provided `num_list` and create an if-else statement to print the sum of all the numbers greater than 50.


# Iterate through the provided `num_list` and create an if-else statement to print the sum of all the even numbers.


fruits = [
  "Apple", "Orange", "Banana", "Pomelo", "Apple", "Kiwi", "Peach", "Banana", "Grape", "Tomato",
  "Kiwi", "Apple", "Watermelon", "Lemon", "Pomelo", "Apple", "Banana", "Peach", "Apricot", "Grape"]

# Iterate through the provided `fruits` list and print the number of times "Apple" appears in the list.


# Iterate through the provided `fruits` list and print the number of times "Peach" appears in the list.


# Iterate through the provided `fruits` list and print the number of fruits that start with "P" in the list.


## Challenge

# Create a new empty list named `unique_fruits`.


# Iterate through `fruits` and populate `unique_fruits` with only unique values from `fruits`. Hint: try looking up "not in" conditionals for if statements


# Print out the `unique_fruits` list.


# In this challenge we're going to be working with nested lists.
# You can store any type of data within an list- even other lists!
two_dim_list = [
  [54, 6, 7, 46, 78],
  [43, 9, 6, 65, 65],
  [32, 1, 44, 1, 23],
  [55, 12, 2, 34, 2],
  [2, 12, 44, 2, 12]]

# Iterate through the first list inside `two_dim_list` and print all the numbers less than 25.


# Iterate through the second list inside `two_dim_list` and print all the numbers less than 25.


# Iterate through the fifth list inside `two_dim_list` and print all the numbers less than 25.



# Iterate through `two_dim_list` and the lists inside of it and print all the odd numbers.


# Iterate through `two_dim_list` and the lists inside of it and print the sum of all the numbers that are a multiple of 3.
43/9:
# Iterate through the provided `num_list` and use the `index` function to print the index of the first occurrence of the number 11.
index = 0
for num in num_list:
    if index ==11
        print(index)
    index += 1
43/10:
# Iterate through the provided `num_list` and use the `index` function to print the index of the first occurrence of the number 11.
index = 0
for num in num_list:
    if index == 11
        print(index)
    index += 1
43/11:
# Iterate through the provided `num_list` and use the `index` function to print the index of the first occurrence of the number 11.
index = 0
for num in num_list:
    if index == 11:
        print(index)
    index += 1
43/12:
# Iterate through the provided `num_list` and use the `index` function to print the index of the first occurrence of the number 11.
index = 0
for num in num_list:
    if index == 11:
        print(num_list[index])
    index += 1
43/13:
# Iterate through the provided `num_list` and use the `index` function to print the index of the first occurrence of the number 11.
index = 0
for num in num_list:
    if index == 11:
        print(index)
    index += 1
43/14:
# Iterate through the provided `num_list` and print the sum of all the numbers.
sum = 0
for number in num_list:
    sum += number
print(sum)
43/15:
# Iterate through the provided `num_list` and use the `index` function to print the index of the first occurrence of the number 11.
index = 0
for num in num_list:
    if num == 11:
        print(index)
    index += 1
43/16:
# Iterate through the provided `num_list` and create an if-else statement to print the sum of all the numbers greater than 50.
sum_above_50 = 0
for number in num list:
    if number > 50:
        sum_above_50 += number
print(sum_above_50)
43/17:
# Iterate through the provided `num_list` and create an if-else statement to print the sum of all the numbers greater than 50.
sum_above_50 = 0
for number in num_list:
    if number > 50:
        sum_above_50 += number
print(sum_above_50)
43/18:
# Iterate through the provided `num_list` and create an if-else statement to print the sum of all the even numbers.
sum = 0
from num in num_list:
    if num %2 == 0:
        sum += num
print(sum)
43/19:
# Iterate through the provided `num_list` and create an if-else statement to print the sum of all the even numbers.
sum = 0
for num in num_list:
    if num %2 == 0:
        sum += num
print(sum)
43/20:
# Iterate through the provided `fruits` list and print the number of times "Apple" appears in the list.
freq = 0
for fruit in fruits:
    if fruit == "Apple"
        freq += fruit
print(freq)
43/21:
# Iterate through the provided `fruits` list and print the number of times "Apple" appears in the list.
freq = 0
for fruit in fruits:
    if fruit == Apple
        freq += fruit
print(freq)
43/22:
# Iterate through the provided `fruits` list and print the number of times "Apple" appears in the list.
count = 0
for fruit in fruits:
    if fruit == Apple
        count += 1
print(count)
43/23:
# Iterate through the provided `fruits` list and print the number of times "Apple" appears in the list.
count = 0
for fruit in fruits:
    if fruit == "Apple":
        count += 1
print(count)
43/24:
# Iterate through the provided `fruits` list and print the number of times "Peach" appears in the list.
count = 0
for fruit in fruits:
    if fruit == "Peach":
        count ++ 1
print(count)
43/25:
# Iterate through the provided `fruits` list and print the number of times "Peach" appears in the list.
count = 0
for fruit in fruits:
    if fruit == "Peach":
        count += 1
print(count)
43/26:
# Iterate through the provided `fruits` list and print the number of fruits that start with "P" in the list.
pcount = 0
for fruit in fruits:
    if
    

## Challenge

# Create a new empty list named `unique_fruits`.


# Iterate through `fruits` and populate `unique_fruits` with only unique values from `fruits`. Hint: try looking up "not in" conditionals for if statements


# Print out the `unique_fruits` list.


# In this challenge we're going to be working with nested lists.
# You can store any type of data within an list- even other lists!
two_dim_list = [
  [54, 6, 7, 46, 78],
  [43, 9, 6, 65, 65],
  [32, 1, 44, 1, 23],
  [55, 12, 2, 34, 2],
  [2, 12, 44, 2, 12]]

# Iterate through the first list inside `two_dim_list` and print all the numbers less than 25.


# Iterate through the second list inside `two_dim_list` and print all the numbers less than 25.


# Iterate through the fifth list inside `two_dim_list` and print all the numbers less than 25.



# Iterate through `two_dim_list` and the lists inside of it and print all the odd numbers.


# Iterate through `two_dim_list` and the lists inside of it and print the sum of all the numbers that are a multiple of 3.
43/27:
# Iterate through the provided `fruits` list and print the number of fruits that start with "P" in the list.
pcount = 0
for fruit in fruits:
    if fruit[0] == "P"
        pcount += 1
print(pcount)
43/28:
# Iterate through the provided `fruits` list and print the number of fruits that start with "P" in the list.
pcount = 0
for fruit in fruits:
    if fruit[0] == "P" or fruit[0] == "p":
        pcount += 1
print(pcount)
43/29:
## Challenge

# Create a new empty list named `unique_fruits`.
unique_fruits = []
43/30:
# Iterate through `fruits` and populate `unique_fruits` with only unique values from `fruits`. Hint: try looking up "not in" conditionals for if statements
for fruit in fruits:
    if fruit not in unique_fruits:
        unique_fruits.append(fruit)
43/31:
# Print out the `unique_fruits` list.
print(unique_fruits)
43/32:
# In this challenge we're going to be working with nested lists.
# You can store any type of data within an list- even other lists!
two_dim_list = [
  [54, 6, 7, 46, 78],
  [43, 9, 6, 65, 65],
  [32, 1, 44, 1, 23],
  [55, 12, 2, 34, 2],
  [2, 12, 44, 2, 12]]

# Iterate through the first list inside `two_dim_list` and print all the numbers less than 25.
nums_less_25
for number in two_dim_list[0]:
    if number > 25:
        nums_less_25.append(number)
print(nums_less_25)
43/33:
# In this challenge we're going to be working with nested lists.
# You can store any type of data within an list- even other lists!
two_dim_list = [
  [54, 6, 7, 46, 78],
  [43, 9, 6, 65, 65],
  [32, 1, 44, 1, 23],
  [55, 12, 2, 34, 2],
  [2, 12, 44, 2, 12]]

# Iterate through the first list inside `two_dim_list` and print all the numbers less than 25.
nums_less_25 = []
for number in two_dim_list[0]:
    if number > 25:
        nums_less_25.append(number)
print(nums_less_25)
43/34:
# In this challenge we're going to be working with nested lists.
# You can store any type of data within an list- even other lists!
two_dim_list = [
  [54, 6, 7, 46, 78],
  [43, 9, 6, 65, 65],
  [32, 1, 44, 1, 23],
  [55, 12, 2, 34, 2],
  [2, 12, 44, 2, 12]]

# Iterate through the first list inside `two_dim_list` and print all the numbers less than 25.
nums_less_25 = []
for number in two_dim_list[0]:
    if number < 25:
        nums_less_25.append(number)
print(nums_less_25)
43/35:
# Iterate through the second list inside `two_dim_list` and print all the numbers less than 25.
nums_less_25 = []
for number in two_dim_list[1]:
    if number < 25:
        nums_less_25.append(number)
print(nums_less_25)  

# Iterate through the fifth list inside `two_dim_list` and print all the numbers less than 25.



# Iterate through `two_dim_list` and the lists inside of it and print all the odd numbers.


# Iterate through `two_dim_list` and the lists inside of it and print the sum of all the numbers that are a multiple of 3.
43/36:
# Iterate through the second list inside `two_dim_list` and print all the numbers less than 25.
nums_less_25 = []
for number in two_dim_list[1]:
    if number < 25:
        nums_less_25.append(number)
print(nums_less_25)
43/37:
# Iterate through the fifth list inside `two_dim_list` and print all the numbers less than 25.



# Iterate through `two_dim_list` and the lists inside of it and print all the odd numbers.


# Iterate through `two_dim_list` and the lists inside of it and print the sum of all the numbers that are a multiple of 3.
43/38:
# Iterate through the fifth list inside `two_dim_list` and print all the numbers less than 25.



# Iterate through `two_dim_list` and the lists inside of it and print all the odd numbers.
for one_dim_list in two_dim_list:
    for number in one_dim_list:
        if number %2 != 0:
print(number)
    


# Iterate through `two_dim_list` and the lists inside of it and print the sum of all the numbers that are a multiple of 3.
43/39:
# Iterate through the fifth list inside `two_dim_list` and print all the numbers less than 25.



# Iterate through `two_dim_list` and the lists inside of it and print all the odd numbers.
for one_dim_list in two_dim_list:
    for number in one_dim_list:
        if number %2 != 0:
    print(number)
    


# Iterate through `two_dim_list` and the lists inside of it and print the sum of all the numbers that are a multiple of 3.
43/40:
# Iterate through the fifth list inside `two_dim_list` and print all the numbers less than 25.



# Iterate through `two_dim_list` and the lists inside of it and print all the odd numbers.
for one_dim_list in two_dim_list:
    for number in one_dim_list:
        if number %2 != 0:
            print(number)
    


# Iterate through `two_dim_list` and the lists inside of it and print the sum of all the numbers that are a multiple of 3.
43/41: # Iterate through `two_dim_list` and the lists inside of it and print the sum of all the numbers that are a multiple of 3.
43/42:
# Iterate through `two_dim_list` and the lists inside of it and print the sum of all the numbers that are a multiple of 3.
odd_num_sum = []
for one_dim_list in two_dim_list:
    for number in one_dim_list:
        if number %3 == 0:
            odd_num_sum += number
print(odd_num_sum)
43/43:
# Iterate through `two_dim_list` and the lists inside of it and print the sum of all the numbers that are a multiple of 3.
odd_num_sum = []
for one_dim_list in two_dim_list:
    for number in one_dim_list:
        if number %3 == 0:
            odd_num_sum += number
                print(odd_num_sum)
43/44:
# Iterate through `two_dim_list` and the lists inside of it and print the sum of all the numbers that are a multiple of 3.
odd_num_sum = []
for one_dim_list in two_dim_list:
    for number in one_dim_list:
        if number %3 == 0:
            odd_num_sum += number
            print(odd_num_sum)
43/45:
# Iterate through `two_dim_list` and the lists inside of it and print the sum of all the numbers that are a multiple of 3.

for one_dim_list in two_dim_list:
    for number in one_dim_list:
        if number %3 == 0:
            odd_num_sum += number
            print(odd_num_sum)
43/46:
# Iterate through `two_dim_list` and the lists inside of it and print the sum of all the numbers that are a multiple of 3.
odd_num_sum = 0
for one_dim_list in two_dim_list:
    for number in one_dim_list:
        if number %3 == 0:
            odd_num_sum += number
            print(odd_num_sum)
43/47:
# Iterate through `two_dim_list` and the lists inside of it and print the sum of all the numbers that are a multiple of 3.
odd_num_sum = 0
for one_dim_list in two_dim_list:
    for number in one_dim_list:
        if number %3 == 0:
            odd_num_sum += number
print(odd_num_sum)
43/48:
# Iterate through `two_dim_list` and the lists inside of it and print the sum of all the numbers that are a multiple of 3.
odd_num_sum = 0
for one_dim_list in two_dim_list:
    for number in one_dim_list:
        if number %3 == 0:
            odd_num_sum += number
            print(odd_num_sum)
print(odd_num_sum)
43/49:
# Iterate through `two_dim_list` and the lists inside of it and print the sum of all the numbers that are a multiple of 3.
odd_num_sum = 0
for one_dim_list in two_dim_list:
    for number in one_dim_list:
        if number %3 == 0:
            odd_num_sum += number
print(odd_num_sum)
44/1:
# Define a function `having_fun` that prints "Functions are FUN!".
def having_fun():
    print("Functions are FUN!")
44/2:
# Define a function `having_fun` that prints "Functions are FUN!".
def having_fun():
    print("Functions are FUN!")
print(having_fun)
44/3:
# Define a function `thirty_seven` that prints the sum of 18 and 19.
def thirty_seven():
    print(sum(18+19))

# Call the two functions you've defined so far.


# Define a function `hello` that takes in a string parameter and prints the parameter variable.


# Call your `hello` function.


# Define a function `user_input` that asks the user "What is your name?" and stores it in a variable called `user_name` and print the user's name.


# Call your `user_input` function.


# Define a function `good_day` that creates a input dialogue asking the user "Are you having a nice day?" and prints the response.


# Call your `good_day` function.


# Define a function `average` that calculates the average between two parameters and returns the average.


# Call the `average` function and assign to a variable `calculated_average`.
44/4:
# Define a function `thirty_seven` that prints the sum of 18 and 19.
def thirty_seven():
    print(sum(18+19))
44/5:
# Define a function `thirty_seven` that prints the sum of 18 and 19.
def thirty_seven():
    sum = 18 + 19
    print(sum)
44/6:
# Call the two functions you've defined so far.
having_fun()
thirty_seven()
44/7:
# Define a function `thirty_seven` that prints the sum of 18 and 19.
def thirty_seven():
    #sum = 18 + 19
    #print(sum)
    print(sum((18+19))
44/8:
# Define a function `thirty_seven` that prints the sum of 18 and 19.
def thirty_seven():
    sum = 18 + 19
    print(sum)
44/9:
# Call the two functions you've defined so far.
having_fun()
thirty_seven()
44/10:
# Define a function `hello` that takes in a string parameter and prints the parameter variable.
def hello(string_param):
    print(string_param)

# Call your `hello` function.


# Define a function `user_input` that asks the user "What is your name?" and stores it in a variable called `user_name` and print the user's name.


# Call your `user_input` function.


# Define a function `good_day` that creates a input dialogue asking the user "Are you having a nice day?" and prints the response.


# Call your `good_day` function.


# Define a function `average` that calculates the average between two parameters and returns the average.


# Call the `average` function and assign to a variable `calculated_average`.
44/11:
# Define a function `hello` that takes in a string parameter and prints the parameter variable.
def hello(string_param):
    print(string_param)

# Call your `hello` function.
hello()

# Define a function `user_input` that asks the user "What is your name?" and stores it in a variable called `user_name` and print the user's name.


# Call your `user_input` function.


# Define a function `good_day` that creates a input dialogue asking the user "Are you having a nice day?" and prints the response.


# Call your `good_day` function.


# Define a function `average` that calculates the average between two parameters and returns the average.


# Call the `average` function and assign to a variable `calculated_average`.
44/12:
# Define a function `hello` that takes in a string parameter and prints the parameter variable.
def hello(string_param):
    print(string_param)

# Call your `hello` function.
hello("YOOOOO!!!!")

# Define a function `user_input` that asks the user "What is your name?" and stores it in a variable called `user_name` and print the user's name.


# Call your `user_input` function.


# Define a function `good_day` that creates a input dialogue asking the user "Are you having a nice day?" and prints the response.


# Call your `good_day` function.


# Define a function `average` that calculates the average between two parameters and returns the average.


# Call the `average` function and assign to a variable `calculated_average`.
44/13:
# Define a function `user_input` that asks the user "What is your name?" and stores it in a variable called `user_name` and print the user's name.


# Call your `user_input` function.


# Define a function `good_day` that creates a input dialogue asking the user "Are you having a nice day?" and prints the response.


# Call your `good_day` function.


# Define a function `average` that calculates the average between two parameters and returns the average.


# Call the `average` function and assign to a variable `calculated_average`.
44/14:
# Define a function `user_input` that asks the user "What is your name?" and stores it in a variable called `user_name` and print the user's name.
def user_input():
    user_name = input('What is your name?')
    print(user_name)
    

# Call your `user_input` function.
user_input()
44/15:
# Define a function `good_day` that creates a input dialogue asking the user "Are you having a nice day?" and prints the response.
def good_day():
    user_day_status = input("Are you having a nice day?")
    print(user_day_status)

# Call your `good_day` function.
good_day()

# Define a function `average` that calculates the average between two parameters and returns the average.


# Call the `average` function and assign to a variable `calculated_average`.
47/1:
# initial imports
import pandas as pd
from pathlib import Path
47/2:
# set the file path
csvpath = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/cu-nyc-fin-pt-09-2020-u-c/03-Python-Pandas/2/Activities/02-Stu_Reading_CSVs/Resources/amd_stock_data.csv')

# create a Pandas dataframe from a csv file
stock_price_data = pd.read_csv(csvpath, header=None)
47/3:
# initial imports
import pandas as pd
from pathlib import Path
47/4:
# set the file path
csvpath = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/cu-nyc-fin-pt-09-2020-u-c/03-Python-Pandas/2/Activities/02-Stu_Reading_CSVs/Resources/amd_stock_data.csv')

# create a Pandas dataframe from a csv file
stock_price_data = pd.read_csv(csvpath, header=None)
47/5:
# get the first 10 rows from the dataframe
stock_price_data.head(10)
47/6:
# set colum names
columns = ["Date", "Close", "Volume", "Open", "High", "Low"]

# recreate the dataframe


# add columns names
47/7:
# set colum names
columns = ["Date", "Close", "Volume", "Open", "High", "Low"]
stock_price_data.columns = columns
# recreate the dataframe


# add columns names
47/8:
# set colum names
columns = ["Date", "Close", "Volume", "Open", "High", "Low"]

# recreate the dataframe


# add columns names
stock_price_data.columns = columns
47/9:
# get the first 10 rows from the dataframe
stock_price_data.head(10)
47/10:
# get the bottom 10 rows from the dataframe
stock_price_data.head(10)
47/11:
# get the bottom 10 rows from the dataframe
stock_price_data.head(-10)
47/12:
# set the file path
csvpath = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/cu-nyc-fin-pt-09-2020-u-c/03-Python-Pandas/2/Activities/02-Stu_Reading_CSVs/Resources/amd_stock_data.csv')

# create a Pandas dataframe from a csv file
stock_price_dataframe = pd.read_csv(csvpath, header=None)
47/13:
# get the first 10 rows from the dataframe
stock_price_dataframe.head(10)
47/14:
# set colum names
columns = ["Date", "Close", "Volume", "Open", "High", "Low"]

# recreate the dataframe


# add columns names
stock_price_dataframe.columns = columns
47/15:
# get the first 10 rows from the dataframe
stock_price_dataframe.head(10)
47/16:
# get the bottom 10 rows from the dataframe
stock_price_dataframe.tail(10)
47/17:
# get the bottom 10 rows from the dataframe
stock_price_dataframe.head(-10)
47/18:
# get the bottom 10 rows from the dataframe
stock_price_dataframe.tail(10)
48/1:
import pandas as pd
from pathlib import Path
48/2: csvpath = Path("../Resources/customers.csv")
48/3:
customer_dataframe = pd.read_csv(csvpath)
customer_dataframe.head()
47/19:
# initial imports
import pandas as pd
from pathlib import Path
50/1:
# Set the path
csvpath = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/cu-nyc-fin-pt-09-2020-u-c/03-Python-Pandas/2/Activities/07-Stu_Indexing/Resources/loans.csv')

# Read in the CSV as a DataFrame
loan_dataframe = pd.read_csv(csvpath)
loan_dataframe.head()
50/2:
# Import libraries and dependencies
import pandas as pd
from pathlib import path
50/3:
# Import libraries and dependencies
import pandas as pd
from pathlib import Path
50/4:
# Set the path
csvpath = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/cu-nyc-fin-pt-09-2020-u-c/03-Python-Pandas/2/Activities/07-Stu_Indexing/Resources/loans.csv')

# Read in the CSV as a DataFrame
loan_dataframe = pd.read_csv(csvpath)
loan_dataframe.head()
50/5:
# Retrive rows with index 0 up to 10 (not including)
loans_csv.iloc[0:10]
50/6:
# Retrive rows with index 0 up to 10 (not including)
loan_dataframe.iloc[0:10]
50/7:
# Filter the DataFrame down to the following, keep all rows

#loan_amnt
loan_dataframe.iloc[0]
loan_dataframe.head()
50/8:
# Filter the DataFrame down to the following, keep all rows

#loan_amnt
loan_dataframe.iloc[,0]
loan_dataframe.head()
50/9:
# Filter the DataFrame down to the following, keep all rows

#loan_amnt
loan_dataframe.iloc[, 0]
loan_dataframe.head()
50/10:
# Filter the DataFrame down to the following, keep all rows

#loan_amnt
loan_dataframe.iloc[:,0].head()
loan_dataframe.head()
50/11:
# Filter the DataFrame down to the following, keep all rows

#loan_amnt
loan_dataframe.iloc[:,0].head()
50/12:
#term
loan_dataframe.iloc[:,3].head()
50/13:
#int_rate
loan_dataframe.iloc[:,4].head()
50/14:
# Filter the DataFrame down to the following, keep all rows
loan_dataframe.set_index(loan_dataframe['first_name'])
loan_dataframe.head()
50/15:
# Filter the DataFrame down to the following, keep all rows
loan_dataframe.set_index(loan_dataframe['loan_amnt'])
loan_dataframe.head()
50/16:
# Filter the DataFrame down to the following, keep all rows
loan_dataframe.set_index(loan_dataframe['loan_amnt'], inplace=True)
loan_dataframe.head()
50/17:
#loan_amnt
#loan_dataframe.iloc[:,0].head()
loan_dataframe.loc['loan_amnt']
50/18:
# Filter the DataFrame down to the following, keep all rows
loan_dataframe.set_index(loan_dataframe['loan_amnt'], inplace=True)
loan_dataframe.head()
50/19:
#loan_amnt
#loan_dataframe.iloc[:,0].head()
loan_dataframe.loc['loan_amnt']
50/20:
#term
#loan_dataframe.iloc[:,3].head()
loan_dataframe.loc['term']
50/21:
#loan_amnt
#loan_dataframe.iloc[:,0].head()
#loan_dataframe.loc[:, 'loan_amnt']
50/22:
#loan_amnt
#loan_dataframe.iloc[:,0].head()
#loan_dataframe.loc[:, 'loan_amnt']
50/23:
#int_rate
loan_dataframe.iloc[:,4].head()
51/1:
# Import libraries and dependencies
import pandas as pd
from pathlib import Path
51/2:
# Set the path
csvpath = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/cu-nyc-fin-pt-09-2020-u-c/03-Python-Pandas/2/Activities/09-Stu_Pandas_Visualization/Resources/sp500.csv')

# Read in the CSV as a DataFrame
sp500_dataframe = pd.read_csv(csvpath)
sp500_dataframe.head()
51/3:
# Import libraries and dependencies
import pandas as pd
from pathlib import Path
%matplotlib inline
51/4:
# Set the path
csvpath = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/cu-nyc-fin-pt-09-2020-u-c/03-Python-Pandas/2/Activities/09-Stu_Pandas_Visualization/Resources/sp500.csv')

# Read in the CSV as a DataFrame
sp500_dataframe = pd.read_csv(csvpath)
sp500_dataframe.head()
51/5:
# Set the path
csvpath = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/cu-nyc-fin-pt-09-2020-u-c/03-Python-Pandas/2/Activities/09-Stu_Pandas_Visualization/Resources/sp500_companies.csv')

# Read in the CSV as a DataFrame
sp500_dataframe = pd.read_csv(csvpath)
sp500_dataframe.head()
51/6:
# Plot a pie chart from the distribution of company sectors
sp500_dataframe.plot()
51/7:
# Plot a pie chart from the distribution of company sectors
sp500_dataframe.plot()
51/8:
# Plot a pie chart from the distribution of company sectors
sp500_dataframe.plot()
sp500_dataframe.set_index(pd.to_datetime(sp500_dataframe['Symbol'], infer_datetime_format=true), inplace=True)
51/9:
# Plot a pie chart from the distribution of company sectors
sp500_dataframe.plot()
sp500_dataframe.set_index(pd.to_datetime(sp500_dataframe['Symbol'], infer_datetime_format=True), inplace=True)
51/10:
# Plot a pie chart from the distribution of company sectors
sp500_dataframe.plot()
sp500_dataframe.set_index(pd.to_datetime(sp500_dataframe['Symbol'], infer_datetime_format=True), inplace=True)
51/11:
# Plot a pie chart from the distribution of company sectors
sp500_dataframe.plot()
51/12:
# Plot a pie chart from the distribution of company sectors
sp_sector = sp500_dataframe['Sector'].value_counts()
51/13:
# Plot a pie chart from the distribution of company sectors
sp_sector = sp500_dataframe['Sector'].value_counts()
sp_sector.head()
51/14:
# Set the 'Symbol' as the index
sp500_dataframe.set_index(sp500_dataframe['Symbol'], inplace=True)
sp500_dataframe.head()
51/15:
# Count the frequency of each sector from the list of companies
sp_sector = sp500_dataframe['Sector'].value_counts()
sp_sector.head()
51/16:
# Plot a pie chart from the distribution of company sectors
sp_sector.plot.pie
51/17:
# Plot a pie chart from the distribution of company sectors
sp_sector.plot.(kind='pie')
51/18:
# Plot a pie chart from the distribution of company sectors
sp_sector.plot(kind='pie')
51/19:
# Grab the `Symbol` and `Market Cap` columns
sp500_dataframe[[]"Symbol", "Market Cap"]]
51/20:
# Grab the `Symbol` and `Market Cap` columns
sp500_dataframe[["Symbol", "Market Cap"]]
51/21:
# Set the 'Symbol' as the index
sp500_dataframe.set_index(sp500_dataframe['Symbol'], inplace=True)
sp500_dataframe.head()
51/22:
# Drop the extra 'Symbol' column
sp500_dataframe = sp500_dataframe.drop(columns=['Symbol'])
sp500_dataframe.head()

# Filter down to 20 companies with the largest market caps


# Display the DataFrame
51/23:
# Drop the extra 'Symbol' column
sp500_dataframe = sp500_dataframe.drop(columns=['Symbol'], inplace=True)
sp500_dataframe.head()

# Filter down to 20 companies with the largest market caps


# Display the DataFrame
51/24:
# Set the 'Symbol' as the index
sp500_dataframe.set_index(sp500_dataframe['Symbol'], inplace=True)
sp500_dataframe.head()
51/25:
# Set the 'Symbol' as the index
sp500_dataframe.set_index(sp500_dataframe['Symbol'], inplace=True)
sp500_dataframe.head()
51/26:
# Drop the extra 'Symbol' column
#sp500_dataframe = sp500_dataframe.drop(columns=['Symbol'], inplace=True)
sp500_dataframe.head()

# Filter down to 20 companies with the largest market caps
nlargest

# Display the DataFrame
51/27:
# Drop the extra 'Symbol' column
#sp500_dataframe = sp500_dataframe.drop(columns=['Symbol'], inplace=True)
sp500_dataframe.head()

# Filter down to 20 companies with the largest market caps
#nlargest

# Display the DataFrame
51/28:
# Drop the extra 'Symbol' column
#sp500_dataframe = sp500_dataframe.drop(columns=['Symbol'], inplace=True)
sp500_dataframe.head()

# Filter down to 20 companies with the largest market caps
#nlargest
sp5000_dataframe = nlargest(20, ['Market Cap'])
sp500_dataframe.head()

# Display the DataFrame
51/29:
# Drop the extra 'Symbol' column
#sp500_dataframe = sp500_dataframe.drop(columns=['Symbol'], inplace=True)
sp500_dataframe.head()

# Filter down to 20 companies with the largest market caps
#nlargest
sp5000_dataframe.nlargest(20, ['Market Cap'])
sp500_dataframe.head()

# Display the DataFrame
51/30:
# Set the 'Symbol' as the index
sp500_dataframe.set_index(sp500_dataframe['Symbol'], inplace=True)
sp500_dataframe.head()
51/31:
# Drop the extra 'Symbol' column
#sp500_dataframe = sp500_dataframe.drop(columns=['Symbol'], inplace=True)
sp500_dataframe.head()

# Filter down to 20 companies with the largest market caps
#nlargest
sp5000_dataframe.nlargest(20, ['Market Cap'])
sp500_dataframe.head()

# Display the DataFrame
51/32:
# Import libraries and dependencies
import pandas as pd
from pathlib import Path
%matplotlib inline
51/33:
# Set the path
csvpath = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/cu-nyc-fin-pt-09-2020-u-c/03-Python-Pandas/2/Activities/09-Stu_Pandas_Visualization/Resources/sp500_companies.csv')

# Read in the CSV as a DataFrame
sp500_dataframe = pd.read_csv(csvpath)
sp500_dataframe.head()
51/34:
# Count the frequency of each sector from the list of companies
sp_sector = sp500_dataframe['Sector'].value_counts()
sp_sector.head()
51/35:
# Plot a pie chart from the distribution of company sectors
sp_sector.plot(kind='pie')
51/36:
# Grab the `Symbol` and `Market Cap` columns
sp500_dataframe[["Symbol", "Market Cap"]]
51/37:
# Set the 'Symbol' as the index
sp500_dataframe.set_index(sp500_dataframe['Symbol'], inplace=True)
sp500_dataframe.head()
51/38:
# Drop the extra 'Symbol' column
#sp500_dataframe = sp500_dataframe.drop(columns=['Symbol'], inplace=True)
sp500_dataframe.head()

# Filter down to 20 companies with the largest market caps
#nlargest
sp5000_dataframe.nlargest(20, ['Market Cap'])
sp500_dataframe.head()

# Display the DataFrame
51/39:
# Drop the extra 'Symbol' column
#sp500_dataframe = sp500_dataframe.drop(columns=['Symbol'], inplace=True)
sp500_dataframe.head()

# Filter down to 20 companies with the largest market caps
#nlargest
sp5000_dataframe.nlargest(20, ['Market Cap'])
sp500_dataframe.head()

# Display the DataFrame
52/1:
# Import libraries and dependencies
import pandas as pd
from pathlib import Path
%matplotlib inline
52/2:
# Set the path
csvpath = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/cu-nyc-fin-pt-09-2020-u-c/03-Python-Pandas/2/Activities/11-Stu-Returns/Resources/amd_stock_data.csv')

# Read in the CSV as a DataFrame
amd = pd.read_csv(csvpath)
amd.head()
52/3:
# Import libraries and dependencies
import pandas as pd
from pathlib import Path
%matplotlib inline
52/4:
# Set the path
csvpath = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/cu-nyc-fin-pt-09-2020-u-c/03-Python-Pandas/2/Activities/11-Stu-Returns/Resources/amd_stock_data.csv')

# Read in the CSV as a DataFrame
amd = pd.read_csv(csvpath)
amd.head()
52/5:
# Set the path
csvpath = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/cu-nyc-fin-pt-09-2020-u-c/03-Python-Pandas/2/Activities/11-Stu-Returns/Resources/amd_stock_data.csv')

# Read in the CSV as a DataFrame
amd = pd.read_csv(csvpath)
amd.head()
52/6:
# Import libraries and dependencies
import pandas as pd
from pathlib import Path
%matplotlib inline
52/7:
# Set the path
csvpath = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/cu-nyc-fin-pt-09-2020-u-c/03-Python-Pandas/2/Activities/11-Stu-Returns/Resources/amd_stock_data.csv')

# Read in the CSV as a DataFrame
amd = pd.read_csv(csvpath)
amd.head()
52/8:
# Import libraries and dependencies
import pandas as pd
from pathlib import Path
%matplotlib inline
52/9:
# Set the path
csvpath = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/cu-nyc-fin-pt-09-2020-u-c/03-Python-Pandas/2/Activities/11-Stu-Returns/Resources/amd_stock_data.csv')

# Read in the CSV as a DataFrame
amd = pd.read_csv(csvpath)
amd.head()
52/10:
# Set the path
csvpath = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/cu-nyc-fin-pt-09-2020-u-c/03-Python-Pandas/2/Activities/11-Stu_Returns/Resources/amd_stock_data.csv')

# Read in the CSV as a DataFrame
amd = pd.read_csv(csvpath)
amd.head()
52/11:
# Drop unnecessary columns
amd.drop(columns=['Volume', 'Open', 'Low', 'High'])
52/12:
# Drop unnecessary columns
amd.drop(columns=['Volume', 'Open', 'Low', 'High'], inplace=True)
amd.head()
52/13:
# Output summary statistics for csv data
amd.describe()
52/14:
# Drop unnecessary columns
amd.drop(columns=['volume', 'open', 'low', 'high'], inplace=True)
amd.head()
52/15:
# Set the date as the index to the DataFrame
amd.set_index(pd.to_datetime(amd['date'], infer_datetime_format=True), inplace=True)
amd.head()
52/16:
# Drop the extra date column
amd.drop(columns=['date'], inplace=True)
amd.head()
52/17:
# Calculate the daily return over the last 10 years
daily_return = amd.pct_change()
52/18:
# Calculate the daily return over the last 10 years
daily_return = amd.pct_change()
amd.head()
52/19:
# Calculate the daily return over the last 10 years
daily_return = amd.pct_change()
print(daily_return)
amd.head()
53/1:
import collections
def count_letters(text):
    return collections.Counter(text)
53/2: count_letters("This interview sucks")
53/3:
Counter({' ': 1,
         'E': 1,
         'a': 1,
         'c': 1,
         'e': 4,
         'l': 1,
         'm': 1,
         'n': 2,
         'p': 1,
         's': 1,
         't': 1,
         'x': 1})
53/4: count_letters("This interview sucks")
53/5:
import collections
def count_letters(text):
    return collections.Counter(text)
53/6: count_letters()
53/7: counter()
53/8: count_letters("This interview sucks ass")
56/1:
def list_equals:
    for num in list1:
        if num not in list 2:
            return false
    for num in list2:
        if num not in list1:
            return false
    return true
56/2:
def list_equals
    for num in list1:
        if num not in list 2:
            return false
    for num in list2:
        if num not in list1:
            return false
    return true
56/3:
def list_equals(list1, list2)
    for num in list1:
        if num not in list 2:
            return false
    for num in list2:
        if num not in list1:
            return false
    return true
56/4:
def list_equals(list1, list2):
    for num in list1:
        if num not in list 2:
            return false
    for num in list2:
        if num not in list1:
            return false
    return true
56/5:
def list_equals(list1, list2):
    for num in list1:
        if num not in list2:
            return false
    for num in list2:
        if num not in list1:
            return false
    return true
56/6: list_equals()
56/7: print(list_equals)
56/8: print(list_equals(list1, list2))
56/9:
list1 = [1, 2, 3]
list2 = [3, 2, 1]
56/10:
def list_equals(list1, list2):
    for num in list1:
        if num not in list2:
            return false
    for num in list2:
        if num not in list1:
            return false
    return true
56/11: print(list_equals(list1, list2))
56/12: print(list_equals)
56/13: print(list_equals(list1, list2))
56/14: print(list_equals(list1, list2))
56/15:
list1 = [1, 2, 3]
list2 = [3, 2, 1]
56/16:
def list_equals(list1, list2):
    for num in list1:
        if num not in list2:
            return False
    for num in list2:
        if num not in list1:
            return False
    return True"
56/17:
list1 = [1, 2, 3]
list2 = [3, 2, 1]
56/18:
def list_equals(list1, list2):
    for num in list1:
        if num not in list2:
            return False
    for num in list2:
        if num not in list1:
            return False
    return True
56/19: print(list_equals(list1, list2))
57/1: list100 = []
57/2:
for num in range(1, 101)
    if num == %5 and num == %3
        print(f'{num}: fizzbuzz'):
    if num == %5
        print(f'{num}: buzz'):
    if num == %3
        print(f'{num}: fizz'):
    else
        print(num)
57/3:
for num in range(1, 101):
    if num == %5 and num == %3
        print(f'{num}: fizzbuzz'):
    if num == %5
        print(f'{num}: buzz'):
    if num == %3
        print(f'{num}: fizz'):
    else
        print(num)
57/4:
for num in range(1, 101):
    if num == % 5 and num == % 3
        print(f'{num}: fizzbuzz'):
    if num == % 5
        print(f'{num}: buzz'):
    if num == % 3
        print(f'{num}: fizz'):
    else
        print(num)
57/5:
for num in range(1, 101):
    if (num % 5 == 0) and (num % 3 == 0):
        print(f'{num}: fizzbuzz'):
    if num % 5 == 0
        print(f'{num}: buzz'):
    if num % 3 == 0
        print(f'{num}: fizz'):
    else
        print(num)
57/6:
for num in range(1, 101):
    if (num % 5 == 0) and (num % 3 == 0):
        print(f'{num}: fizzbuzz')
    if num % 5 == 0:
        print(f'{num}: buzz')
    if num % 3 == 0:
        print(f'{num}: fizz')
    else:
        print(num)
58/1: list = [17, 43, 27, 85, 107, 2, 99, 221, 4]
57/7:
for num in range(1, 101):
    if (num % 5 == 0) and (num % 3 == 0):
        print(f'{num}: fizzbuzz')
    if num % 5 == 0:
        print(f'{num}: buzz')
    if num % 3 == 0:
        print(f'{num}: fizz')
    #else:
        print(num)
57/8:
for num in range(1, 101):
    if (num % 5 == 0) and (num % 3 == 0):
        print(f'{num}: fizzbuzz')
    if num % 5 == 0:
        print(f'{num}: buzz')
    if num % 3 == 0:
        print(f'{num}: fizz')
    #else:
        #print(num)
57/9:
for num in range(1, 101):
    if (num % 5 == 0) and (num % 3 == 0):
        print(f'{num}: fizzbuzz')
    if num % 5 == 0:
        print(f'{num}: buzz')
    if num % 3 == 0:
        print(f'{num}: fizz')
    else:
        print(num)
57/10:
for num in range(1, 10):
    if (num % 5 == 0) and (num % 3 == 0):
        print(f'{num}: fizzbuzz')
    if num % 5 == 0:
        print(f'{num}: buzz')
    if num % 3 == 0:
        print(f'{num}: fizz')
    else:
        print(num)
57/11:
for num in range(1, 101):
    if (num % 5 == 0) and (num % 3 == 0):
        print(f'{num}: fizzbuzz')
    if num % 5 == 0:
        print(f'{num}: buzz')
    if num % 3 == 0:
        print(f'{num}: fizz')
    else:
        print(num)
57/12: def fizzbuzz
57/13:
for num in range(1, 101):
    if (num % 5 == 0) and (num % 3 == 0):
        print(f'{num}: fizzbuzz')
    if num % 5 == 0:
        print(f'{num}: buzz')
    if num % 3 == 0:
        print(f'{num}: fizz')
    else:
        print(num)
57/14: def fizzbuzz:
57/15: def fizzbuzz()
57/16:
for num in range(1, 101):
    if (num % 5 == 0) and (num % 3 == 0):
        print(f'{num}: fizzbuzz')
    if num % 5 == 0:
        print(f'{num}: buzz')
    if num % 3 == 0:
        print(f'{num}: fizz')
    else:
        print(num)
57/17: fizzbuzz()
57/18: def fizzbuzz():
57/19: fizzbuzz()
57/20: def fizzbuzz():
57/21:
    for num in range(1, 101):
        if (num % 5 == 0) and (num % 3 == 0):
            print(f'{num}: fizzbuzz')
        if num % 5 == 0:
            print(f'{num}: buzz')
        if num % 3 == 0:
            print(f'{num}: fizz')
        else:
            print(num)
57/22:
def fizzbuzz():  
    for num in range(1, 101):
        if (num % 5 == 0) and (num % 3 == 0):
            print(f'{num}: fizzbuzz')
        if num % 5 == 0:
            print(f'{num}: buzz')
        if num % 3 == 0:
            print(f'{num}: fizz')
        else:
            print(num)
57/23: fizzbuzz()
60/1:
# Import pandas and pathlib
import pandas as pd
from pathlib import Path
60/2:
# Use the `head` function to display a few rows of the top of the DataFrame
peopl_df.head()
60/3:
# Use the Pathlib libary to set the path to the CSV
a_path = Path('C:\Users\phill\OneDrive\Desktop\CU_FinTech\cu-nyc-fin-pt-09-2020-u-c\04-Pandas\2\Activities\01-csv-01\Unsolved/csv-01.csv')
60/4:
# Import pandas and pathlib
import pandas as pd
from pathlib import Path
60/5:
# Use the Pathlib libary to set the path to the CSV
a_path = Path('C:\Users\phill\OneDrive\Desktop\CU_FinTech\cu-nyc-fin-pt-09-2020-u-c\04-Pandas\2\Activities\01-csv-01\Unsolved/csv-01.csv')
60/6:
# Use the Pathlib libary to set the path to the CSV
a_path = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/cu-nyc-fin-pt-09-2020-u-c/04-Pandas/2/Activities/01-csv-01/Unsolved/csv-01.csv')
60/7:
# Use the file path to read the CSV into a DataFrame
people_df = pd.read_csv(a_path)
61/1:
# Import pandas, pathlib, and numpy libraries
import pandas as pd
import numpy as np
from pathlib import Path
61/2:
# Use the Pathlib libary to set the path to the CSV
csvpath = Path('C:\Users\phill\OneDrive\Desktop\CU_FinTech\cu-nyc-fin-pt-09-2020-u-c\04-Pandas\2\Activities\02-columns-01\Resources\people.csv')
61/3:
# Use the Pathlib libary to set the path to the CSV
csvpath = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/cu-nyc-fin-pt-09-2020-u-c/04-Pandas/2/Activities/02-columns-01/Resources/people.csv')
61/4:
# Use the file path to read the CSV into a DataFrame and display a few rows
people_df = pd.read_csv(csvpath)
61/5:
# Use the file path to read the CSV into a DataFrame and display a few rows
people_df = pd.read_csv(csvpath)
61/6:
# Use the file path to read the CSV into a DataFrame and display a few rows
people_df = pd.read_csv(csvpath)
people_df.head(5)
61/7:
# Use the `columns` attribute to output the column names
print
people_df.columns()
61/8:
# Use the `columns` attribute to output the column names
print
print(people_df.columns())
61/9:
# Use the `columns` attribute to output the column names
print(people_df)
61/10:
# Use the `columns` attribute to output the column names
for col in people_df:
    print(col)
61/11:
# Use the `dtypes` attribute to output the column names and data types
people_df.dtypes()
61/12:
# Use the `dtypes` attribute to output the column names and data types
people_df.dtypes
61/13:
# Set the `columns` attribute to a new list of column names
new_col_names = ['Person_ID', 'First_Name', 'Last_Name', 'Email', 'Gender', 'University', 'Occupation', 'Salary']
people_df = pd.read_csv(csvpath, header = None)
people_df.columns = new_col_names
61/14:
# Set the `columns` attribute to a new list of column names
new_col_names = ['Person_ID', 'First_Name', 'Last_Name', 'Email', 'Gender', 'University', 'Occupation', 'Salary']
people_df = pd.read_csv(csvpath, header = None)
people_df.columns = new_col_names
people_df()
61/15:
# Set the `columns` attribute to a new list of column names
new_col_names = ['Person_ID', 'First_Name', 'Last_Name', 'Email', 'Gender', 'University', 'Occupation', 'Salary']
people_df = pd.read_csv(csvpath, header = None)
people_df.columns = new_col_names
61/16:
# Set the `columns` attribute to a new list of column names
new_col_names = ['Person_ID', 'First_Name', 'Last_Name', 'Email', 'Gender', 'University', 'Occupation', 'Salary']
people_df = pd.read_csv(csvpath, header = None)
people_df.columns = new_col_names
people_df.head(5)
61/17:
# Set the `columns` attribute to a new list of column names
new_col_names = ['Person_ID', 'First_Name', 'Last_Name', 'Email', 'Gender', 'University', 'Occupation', 'Salary']
people_df = pd.read_csv(csvpath, header = None)
people_df.columns = new_col_names
people_df.head(5)
61/18:
# Use a list of re-ordered column names to alter the column order of the original DataFrame
people_df = people_df[['Person_ID', 'Last_Name', 'First_Name', 'Gender', 'University', 'Occupation', 'Salary']]
61/19:
# Use a list of re-ordered column names to alter the column order of the original DataFrame
people_df = people_df[['Person_ID', 'Last_Name', 'First_Name', 'Gender', 'University', 'Occupation', 'Salary']]
people_df.head(5)
61/20:
# Use the `randint` function to randomly generate an `Age` from 22 to 65 for 1000 rows
people_df.insert("Age", "Age_Copy")
61/21:
# Use the `randint` function to randomly generate an `Age` from 22 to 65 for 1000 rows
people_df.insert(columns=["Age", "Age_Copy"])
61/22:
# Use the `randint` function to randomly generate an `Age` from 22 to 65 for 1000 rows
people_df.insert(columns=["Age"], ["Age_Copy"])
61/23:
# Use the `randint` function to randomly generate an `Age` from 22 to 65 for 1000 rows
people_df.insert(columns=["Age"])
61/24:
# Use the `randint` function to randomly generate an `Age` from 22 to 65 for 1000 rows
people_df.insert(4, "Age")
61/25:
# Use the `randint` function to randomly generate an `Age` from 22 to 65 for 1000 rows
people_df = np.random.randint(22, 65, 5, size=1000)
people_df = pd.DataFrame(data, columns=["Age"])
61/26:
# Use the `randint` function to randomly generate an `Age` from 22 to 65 for 1000 rows
people_df = np.random.randint(22, 65, size=1000)
people_df = pd.DataFrame(data, columns=["Age"])
61/27:
# Use the `randint` function to randomly generate an `Age` from 22 to 65 for 1000 rows
def data():
people_df = np.random.randint(22, 65, size=1000)
people_df = pd.DataFrame(data, columns=["Age"])
61/28:
# Use the `randint` function to randomly generate an `Age` from 22 to 65 for 1000 rows
def data():
    people_df = np.random.randint(22, 65, size=1000)
    people_df = pd.DataFrame(data, columns=["Age"])
61/29:
# Use the `randint` function to randomly generate an `Age` from 22 to 65 for 1000 rows
def data():
    people_df = np.random.randint(22, 65, size=1000)
    people_df = pd.DataFrame(data, columns=["Age", "Age_Copy"])
61/30:
# Use the `randint` function to randomly generate an `Age` from 22 to 65 for 1000 rows
def data():
    people_df = np.random.randint(22, 65, size=1000)
    people_df = pd.DataFrame(data, columns=["Age", "Age_Copy"])

people_df.head(5)
61/31:
# Use the `randint` function to randomly generate an `Age` from 22 to 65 for 1000 rows
def data():
    people_df = np.random.randint(22, 65, size=1000)
    people_df = pd.DataFrame(data, columns=["Age", "Age_Copy"])

print(people_df)
61/32:
# Use the `randint` function to randomly generate an `Age` from 22 to 65 for 1000 rows
def data():
    people_df = np.random.randint(22, 65, size=1000)
    people_df = pd.DataFrame(data, columns=["Age"])
61/33:
# Set the `columns` attribute to a new list of column names
new_col_names = ['Person_ID', 'First_Name', 'Last_Name', 'Email', 'Gender', 'University', 'Occupation', 'Salary']
people_df = pd.read_csv(csvpath, header = None)
people_df.columns = new_col_names
people_df.head(5)
61/34:
# Use a list of re-ordered column names to alter the column order of the original DataFrame
people_df = people_df[['Person_ID', 'Last_Name', 'First_Name', 'Gender', 'University', 'Occupation', 'Salary']]
people_df.head(5)
61/35:
# Use the `randint` function to randomly generate an `Age` from 22 to 65 for 1000 rows
#def data():
    #people_df = np.random.randint(22, 65, size=1000)
    #people_df = pd.DataFrame(data, columns=["Age"])
people_df['Age'] = np.random.randint(22, 65, size=1000)
61/36:
# Use the `randint` function to randomly generate an `Age` from 22 to 65 for 1000 rows
#def data():
    #people_df = np.random.randint(22, 65, size=1000)
    #people_df = pd.DataFrame(data, columns=["Age"])
people_df['Age'] = np.random.randint(22, 65, size=1001)
61/37:
# Use the `randint` function to randomly generate an `Age` from 22 to 65 for 1000 rows
#def data():
    #people_df = np.random.randint(22, 65, size=1000)
    #people_df = pd.DataFrame(data, columns=["Age"])
people_df['Age'] = np.random.randint(22, 65, size=1001)
people_df()
61/38:
# Use the `randint` function to randomly generate an `Age` from 22 to 65 for 1000 rows
#def data():
    #people_df = np.random.randint(22, 65, size=1000)
    #people_df = pd.DataFrame(data, columns=["Age"])
people_df['Age'] = np.random.randint(22, 65, size=1001)
people_df.head(5)
61/39:
# Use the `randint` function to randomly generate an `Age` from 22 to 65 for 1000 rows
people_df['Age'] = np.random.randint(22, 65, size=1001)
people_df.head(5)
61/40:
# Save the DataFrame to the `Resources` folder
mod_output = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/cu-nyc-fin-pt-09-2020-u-c/04-Pandas/2/Activities/02-columns-01/Resources/mod_output.csv')
61/41: people_df.to_csv('mod_output.csv', encoding='utf-8', index=False)
61/42: people_df.to_csv('mod_output.csv')
61/43:
# Save the DataFrame to the `Resources` folder
mod_output = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/cu-nyc-fin-pt-09-2020-u-c/04-Pandas/2/Activities/02-columns-01/Resources/mod_output.csv')
61/44: people_df.to_csv('mod_output.csv')
62/1:
# Import the pandas and pathlib libraries
import pandas as pd
import pathlib from Path
62/2:
# Import the pandas and pathlib libraries
import pandas as pd
from pathlib import Path
62/3:
# Use the Pathlib libary to set the path to the CSV
csvpath = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/cu-nyc-fin-pt-09-2020-u-c/04-Pandas/2/Activities/03-data-cleaning-01/Resources/people_reordered.csv')
62/4:
# Use the file path to read the CSV into a DataFrame and display a few rows
people_df = pd.read_csv(csvpath)
people_df.head(5)
62/5:
# Use the `dtypes` attribute to list the column data types
people_df.dtypes
62/6:
# Use the `drop` function to drop specific columns
people_df = people_df.drop(columns=[0])
62/7:
# Use the `drop` function to drop specific columns
people_df = people_df.drop(columns=["Unnamed: 0"])
62/8:
# Use the `drop` function to drop specific columns
people_df = people_df.drop(columns=["Unnamed: 0"])
people_df()
62/9:
# Use the `drop` function to drop specific columns
people_df = people_df.drop(columns=["Unnamed: 0"])
people_df.head(5)
62/10:
# Use the `drop` function to drop specific columns
people_df = people_df.drop(columns=["Unnamed: 0"])
people_df.head(5)
62/11:
# Use the `drop` function to drop specific columns
people_df = people_df.drop(columns=["Unnamed:       0"])
people_df.head(5)
62/12:
# Use the `drop` function to drop specific columns
people_df = people_df.drop(columns=["Unnamed:       0"])
people_df.head(5)
62/13:
# Use the `drop` function to drop specific columns
people_df = people_df.drop(columns=["Unnamed: O"])
people_df.head(5)
62/14:
# Use the `drop` function to drop specific columns
people_df = people_df.drop(columns=["Unnamed: O"])
people_df.head(5)
62/15:
# Use the `drop` function to drop specific columns
people_df = people_df.drop(columns=["Last_Name"])
people_df.head(5)
62/16:
# Use the `dtypes` attribute to list the column data types
people_df.dtypes
62/17:
# Use the `dtypes` attribute to list the column data types
people_df.dtypes
62/18:
# Import the pandas and pathlib libraries
import pandas as pd
from pathlib import Path
62/19:
# Use the Pathlib libary to set the path to the CSV
csvpath = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/cu-nyc-fin-pt-09-2020-u-c/04-Pandas/2/Activities/03-data-cleaning-01/Resources/people_reordered.csv')
62/20:
# Use the file path to read the CSV into a DataFrame and display a few rows
people_df = pd.read_csv(csvpath)
people_df.head(5)
62/21:
# Use the `dtypes` attribute to list the column data types
people_df.dtypes
62/22:
# Use the `count` function to view count of non-null values for each column
people_df.count()
62/23:
# Identifying frequency counts of the `first_name` column
people_df['First_Name'].value_counts()
62/24:
# Checking for null
people_df.isnull()
62/25:
# Determining number of nulls
people_df.isnull().sum()
62/26:
# Determining percentage of nulls
people_df.isnull().mean() * 100
62/27:
# Use the `duplicated` function to determine the existance of duplicate rows: True or False
people_df.duplicated()
62/28:
# Use the `duplicated` function in conjunction with a list of columns to 
# determine the existence of duplicate rows based on the selected columns
people_df['First_Name'].duplicated()
62/29:
# Cleanse nulls from DataFrame by filling na
people_df['First_Name'] = people_df["First_Name"].fillna("Unnamed")
62/30:
# Cleanse nulls from DataFrame by filling na
people_df['First_Name'] = people_df["First_Name"].fillna("Unnamed")
people_df
62/31:
# Cleanse nulls from DataFrame by filling na
people_df['First_Name'] = people_df["First_Name"].fillna("Unnamed")
people_df
62/32:
# Cleanse nulls from DataFrame by filling na
people_df['First_Name'] = people_df["First_Name"].fillna("Unnamed")
people_df['Last_Name'] = people_df["First_Name"].fillna("Unnamed")
people_df
62/33:
# Cleanse nulls from DataFrame by filling na
people_df["First_Name"] = people_df["First_Name"].fillna("Unnamed")
people_df["Last_Name"] = people_df["First_Name"].fillna("Unnamed")
people_df
62/34:
# Use the `dropna` function to drop whole records that have at least one null value
people_df = people_df.dropna().copy()
62/35:
# Use the `isnull` function in conjunction with the `sum` function to count the number of null values for each column
people_df.isnull().sum()
65/1:
# Import libraries and dependencies
import pandas as pd
from pathlib import Path
import seaborn as sns
%matplotlib inline
65/2:
# Set file paths
hd_data = Path("../Resources/HD.csv")
jnj_data = Path("../Resources/JNJ.csv")
intc_data = Path("../Resources/INTC.csv")
amd_data = Path("../Resources/AMD.csv")
mu_data = Path("../Resources/MU.csv")
nvda_data = Path("../Resources/NVDA.csv")
tsm_data = Path("../Resources/TSM.csv")

# Read the individual CSV datasets
hd = pd.read_csv(hd_data, index_col="date")
jnj = pd.read_csv(jnj_data, index_col="date")
intc = pd.read_csv(intc_data, index_col="date")
amd = pd.read_csv(amd_data, index_col="date")
mu = pd.read_csv(mu_data, index_col="date")
nvda = pd.read_csv(nvda_data, index_col="date")
tsm = pd.read_csv(tsm_data, index_col="date")

intc.head()
65/3:
# Use the `concat` function to combine the DataFrames by matching indexes (or in this case `date`)
combined_df = pd.concat([hd, jnj, intc, amd, mu, nvda, tsm], axis="columns", join="inner")
65/4:
# Use the `concat` function to combine the DataFrames by matching indexes (or in this case `date`)
combined_df = pd.concat([hd, jnj, intc, amd, mu, nvda, tsm], axis="columns", join="inner")
combined_df
65/5:
# Use the `pct_change` function to calculate daily returns for each stock
daily_returns = combined_df,pct
combined_df
65/6:
# Use the `pct_change` function to calculate daily returns for each stock
daily_returns = combined_df.pct_change()
65/7:
# Use the `pct_change` function to calculate daily returns for each stock
daily_returns = combined_df.pct_change()
daily_returns
65/8:
# Use the `corr` function to calculate correlations for each stock pair
correlation = combined_df.corr()
correlation
65/9:
# Use the `corr` function to calculate correlations for each stock pair
correlation = daily_returns.corr()
correlation
65/10:
# Create a heatmap from the correlation values
sns.heatmap(correlation, vmin=-1, vmax=1)
68/1:
# Import libraries and dependencies
import pandas as pd
from pathlib import Path
%matplotlib inline
68/2:
# Read the daily closing prices of FB, set the `date` as a datetime index
fb_data = Path("../Resources/fb_data.csv")
fb_df = pd.read_csv(fb_data, index_col="date", parse_dates=True, infer_datetime_format=True)

# Read the daily closing prices of TWTR, set the `date` as a datetime index
twtr_data = Path("../Resources/twtr_data.csv")
twtr_df = pd.read_csv(twtr_data, index_col="date", parse_dates=True, infer_datetime_format=True)

# Read the daily closing prices of SNAP, set the `date` as a datetime index
snap_data = Path("../Resources/snap_data.csv")
snap_df = pd.read_csv(snap_data, index_col="date", parse_dates=True, infer_datetime_format=True)

# Read the daily closing prices of S&P 500, set the `date` as a datetime index
sp500_data = Path("../Resources/sp500_data.csv")
sp500_df = pd.read_csv(sp500_data, index_col="date", parse_dates=True, infer_datetime_format=True)
sp500_df.head()
68/3:
# Read the daily closing prices of FB, set the `date` as a datetime index
fb_data = Path("../Resources/fb_data.csv")
fb_df = pd.read_csv(fb_data, index_col="date", parse_dates=True, infer_datetime_format=True)

# Read the daily closing prices of TWTR, set the `date` as a datetime index
twtr_data = Path("../Resources/twtr_data.csv")
twtr_df = pd.read_csv(twtr_data, index_col="date", parse_dates=True, infer_datetime_format=True)

# Read the daily closing prices of SNAP, set the `date` as a datetime index
snap_data = Path("../Resources/snap_data.csv")
snap_df = pd.read_csv(snap_data, index_col="date", parse_dates=True, infer_datetime_format=True)

# Read the daily closing prices of S&P 500, set the `date` as a datetime index
sp500_data = Path("../Resources/sp500_data.csv")
sp500_df = pd.read_csv(sp500_data, index_col="date", parse_dates=True, infer_datetime_format=True)
sp500_df.head()
68/4:
# Create a new pivot table where the columns are the closing prices for each ticker
combined_df = pd.concat([twtr_df, snap_df, sp500_df], axis="columns", join="inner")
combined_df.head()
# Sort datetime index in ascending order (past to present)0


# Set column names to 'AMZN' and 'S&P 500'


# Display a few rows
68/5:
# Create a new pivot table where the columns are the closing prices for each ticker
combined_df = pd.concat([twtr_df, snap_df, sp500_df], axis="columns", join="inner")
combined_df.head()
# Sort datetime index in ascending order (past to present)0
combined_df.sort_index(inplace=True)

# Set column names to 'AMZN' and 'S&P 500'


# Display a few rows
68/6:
# Create a new pivot table where the columns are the closing prices for each ticker
combined_df = pd.concat([fb_df, twtr_df, snap_df, sp500_df], axis="columns", join="inner")
combined_df.head()
# Sort datetime index in ascending order (past to present)0
combined_df.sort_index(inplace=True)

# Set column names to 'AMZN' and 'S&P 500'
combined_df.columns = ["AMZN", "S&P 500"]

# Display a few rows
68/7:
# Create a new pivot table where the columns are the closing prices for each ticker
combined_df = pd.concat([fb_df, twtr_df, snap_df, sp500_df], axis="columns", join="inner")
combined_df.head()
# Sort datetime index in ascending order (past to present)0
combined_df.sort_index(inplace=True)

# Set column names to 'AMZN' and 'S&P 500'
combined_df.columns = ["FB", "TWTR", "SNAP", "S&P 500"]

# Display a few rows
68/8:
# Use the `pct_change` function to calculate daily returns of closing prices for each column
daily_returns = combined_df.pct_change()
daily_returns.head()
68/9:
# Calculate covariance of all daily returns of social media stocks vs. S&P 500
covariance = daily_returns['FB', 'TWTR, 'SNAP', 'S&P 500'].cov(daily_returns['S&P 500'])
covariance
68/10:
# Calculate covariance of all daily returns of social media stocks vs. S&P 500
covariance = daily_returns["FB", "TWTR", "SNAP", "S&P 500"].cov(daily_returns['S&P 500'])
covariance
68/11:
# Calculate covariance of all daily returns of social media stocks vs. S&P 500
covariance_fb = daily_returns['FB'].cov(daily_returns['S&P 500'])
covariance_twtr = daily_returns['TWTR'].cov(daily_returns['S&P 500'])
covariance_snap = daily_returns['SNAP'].cov(daily_returns['S&P 500'])

covariance_fb
covariance_twtr
covariance_snap
68/12:
# Calculate variance of all daily returns of social media stocks vs. S&P 500
variance = daily_returns['S&P 500'].var()
variance
68/13:
# Calculate beta of all daily returns of social media stocks
fb_beta = covariance_fb / variance
68/14:
# Calculate beta of all daily returns of social media stocks
fb_beta = covariance_fb / variance
twtr_beta = covariance_twtr / variance
snap_beta = covariance_snap / variance
68/15:
# Calculate beta of all daily returns of social media stocks
fb_beta = covariance_fb / variance
twtr_beta = covariance_twtr / variance
snap_beta = covariance_snap / variance
betalist = ['fb_beta', 'twtr_beta', 'snap_beta']
68/16:
# Calculate beta of all daily returns of social media stocks
fb_beta = covariance_fb / variance
twtr_beta = covariance_twtr / variance
snap_beta = covariance_snap / variance
betalist = ['fb_beta', 'twtr_beta', 'snap_beta']
betalist
68/17:
# Calculate beta of all daily returns of social media stocks
fb_beta = covariance_fb / variance
twtr_beta = covariance_twtr / variance
snap_beta = covariance_snap / variance
betalist = [fb_beta, twtr_beta, snap_beta]
betalist
68/18:
# Calculate 30-day rolling covariance of AMZN vs. S&P 500 and plot the data
rolling_covariance_fb = daily_returns['FB'].rolling(window=30).cov(daily_returns['S&P 500'])
rolling_covariance_fb.plot(figsize=(20, 10), title='Rolling 30-Day Covariance of FB Returns vs. S&P 500 Returns'
rolling_covariance_twtr = daily_returns['TWTR'].rolling(window=30).cov(daily_returns['S&P 500'])
rolling_covariance_twtr.plot(figsize=(20, 10), title='Rolling 30-Day Covariance of TWTR Returns vs. S&P 500 Returns'
rolling_covariance_snap = daily_returns['SNAP'].rolling(window=30).cov(daily_returns['S&P 500'])
rolling_covariance_snap.plot(figsize=(20, 10), title='Rolling 30-Day Covariance of SNAP Returns vs. S&P 500 Returns'

                           
                           
                           
# Calculate 30-day rolling covariance of AMZN vs. S&P 500 and plot the data


# Calculate 30-day rolling beta of AMZN and plot the data
68/19:
# Calculate 30-day rolling covariance of AMZN vs. S&P 500 and plot the data
rolling_covariance_fb = daily_returns['FB'].rolling(window=30).cov(daily_returns['S&P 500'])
rolling_covariance_fb.plot(figsize=(20, 10), title='Rolling 30-Day Covariance of FB Returns vs. S&P 500 Returns'
rolling_covariance_twtr = daily_returns['TWTR'].rolling(window=30).cov(daily_returns['S&P 500'])
rolling_covariance_twtr.plot(figsize=(20, 10), title='Rolling 30-Day Covariance of TWTR Returns vs. S&P 500 Returns'
rolling_covariance_snap = daily_returns['SNAP'].rolling(window=30).cov(daily_returns['S&P 500'])
rolling_covariance_snap.plot(figsize=(20, 10), title='Rolling 30-Day Covariance of SNAP Returns vs. S&P 500 Returns'

                           
                           
                           
# Calculate 30-day rolling covariance of AMZN vs. S&P 500 and plot the data


# Calculate 30-day rolling beta of AMZN and plot the data
68/20:
# Calculate 30-day rolling covariance of AMZN vs. S&P 500 and plot the data
rolling_covariance_fb = daily_returns['FB'].rolling(window=30).cov(daily_returns['S&P 500'])
rolling_covariance_fb.plot(figsize=(20, 10), title='Rolling 30-Day Covariance of FB Returns vs. S&P 500 Returns'

rolling_covariance_twtr = daily_returns['TWTR'].rolling(window=30).cov(daily_returns['S&P 500'])

rolling_covariance_twtr.plot(figsize=(20, 10), title='Rolling 30-Day Covariance of TWTR Returns vs. S&P 500 Returns'
rolling_covariance_snap = daily_returns['SNAP'].rolling(window=30).cov(daily_returns['S&P 500'])
rolling_covariance_snap.plot(figsize=(20, 10), title='Rolling 30-Day Covariance of SNAP Returns vs. S&P 500 Returns'

                           
                           
                           
# Calculate 30-day rolling covariance of AMZN vs. S&P 500 and plot the data


# Calculate 30-day rolling beta of AMZN and plot the data
68/21:
# Calculate 30-day rolling covariance of AMZN vs. S&P 500 and plot the data
rolling_covariance_fb = daily_returns['FB'].rolling(window=30).cov(daily_returns['S&P 500'])
rolling_covariance_fb.plot(figsize=(20, 10), title='Rolling 30-Day Covariance of FB Returns vs. S&P 500 Returns')

rolling_covariance_twtr = daily_returns['TWTR'].rolling(window=30).cov(daily_returns['S&P 500'])

rolling_covariance_twtr.plot(figsize=(20, 10), title='Rolling 30-Day Covariance of TWTR Returns vs. S&P 500 Returns')

rolling_covariance_snap = daily_returns['SNAP'].rolling(window=30).cov(daily_returns['S&P 500'])

rolling_covariance_snap.plot(figsize=(20, 10), title='Rolling 30-Day Covariance of SNAP Returns vs. S&P 500 Returns')

                           
                           
                           
# Calculate 30-day rolling covariance of AMZN vs. S&P 500 and plot the data


# Calculate 30-day rolling beta of AMZN and plot the data
68/22:
# Calculate 30-day rolling covariance of AMZN vs. S&P 500 and plot the data
rolling_covariance_fb = daily_returns['FB'].rolling(window=30).cov(daily_returns['S&P 500'])
rolling_covariance_fb.plot(figsize=(20, 10), title='Rolling 30-Day Covariance of FB Returns vs. S&P 500 Returns')

rolling_covariance_twtr = daily_returns['TWTR'].rolling(window=30).cov(daily_returns['S&P 500'])

rolling_covariance_twtr.plot(figsize=(20, 10), title='Rolling 30-Day Covariance of TWTR Returns vs. S&P 500 Returns')

rolling_covariance_snap = daily_returns['SNAP'].rolling(window=30).cov(daily_returns['S&P 500'])

rolling_covariance_snap.plot(ax=covariance figsize=(20, 10), title='Rolling 30-Day Covariance of SNAP Returns vs. S&P 500 Returns')

                           
                           
                           
# Calculate 30-day rolling covariance of AMZN vs. S&P 500 and plot the data


# Calculate 30-day rolling beta of AMZN and plot the data
68/23:
# Calculate 30-day rolling covariance of AMZN vs. S&P 500 and plot the data
rolling_covariance_fb = daily_returns['FB'].rolling(window=30).cov(daily_returns['S&P 500'])
rolling_covariance_fb.plot(figsize=(20, 10), title='Rolling 30-Day Covariance of FB Returns vs. S&P 500 Returns')

rolling_covariance_twtr = daily_returns['TWTR'].rolling(window=30).cov(daily_returns['S&P 500'])

rolling_covariance_twtr.plot(figsize=(20, 10), title='Rolling 30-Day Covariance of TWTR Returns vs. S&P 500 Returns')

rolling_covariance_snap = daily_returns['SNAP'].rolling(window=30).cov(daily_returns['S&P 500'])

rolling_covariance_snap.plot(ax=covariance, figsize=(20, 10), title='Rolling 30-Day Covariance of SNAP Returns vs. S&P 500 Returns')

                           
                           
                           
# Calculate 30-day rolling covariance of AMZN vs. S&P 500 and plot the data


# Calculate 30-day rolling beta of AMZN and plot the data
68/24:
# Calculate 30-day rolling covariance of AMZN vs. S&P 500 and plot the data
rolling_covariance_fb = daily_returns['FB'].rolling(window=30).cov(daily_returns['S&P 500'])
rolling_covariance_fb.plot(figsize=(20, 10), title='Rolling 30-Day Covariance of FB Returns vs. S&P 500 Returns')

rolling_covariance_twtr = daily_returns['TWTR'].rolling(window=30).cov(daily_returns['S&P 500'])

rolling_covariance_twtr.plot(figsize=(20, 10), title='Rolling 30-Day Covariance of TWTR Returns vs. S&P 500 Returns')

rolling_covariance_snap = daily_returns['SNAP'].rolling(window=30).cov(daily_returns['S&P 500'])

rolling_covariance_snap.plot(ax=rolling_covariance_snap, figsize=(20, 10), title='Rolling 30-Day Covariance of SNAP Returns vs. S&P 500 Returns')

                           
                           
                           
# Calculate 30-day rolling covariance of AMZN vs. S&P 500 and plot the data


# Calculate 30-day rolling beta of AMZN and plot the data
68/25:
# Calculate 30-day rolling covariance of AMZN vs. S&P 500 and plot the data
rolling_covariance_fb = daily_returns['FB'].rolling(window=30).cov(daily_returns['S&P 500'])

rolling_covariance_fb.plot(ax=rolling_covariance_fb, figsize=(20, 10), title='Rolling 30-Day Covariance of FB Returns vs. S&P 500 Returns')

rolling_covariance_twtr = daily_returns['TWTR'].rolling(window=30).cov(daily_returns['S&P 500'])

rolling_covariance_twtr.plot(ax=rollaing_covariance_twtr, figsize=(20, 10), title='Rolling 30-Day Covariance of TWTR Returns vs. S&P 500 Returns')

rolling_covariance_snap = daily_returns['SNAP'].rolling(window=30).cov(daily_returns['S&P 500'])

rolling_covariance_snap.plot(ax=rolling_covariance_snap, figsize=(20, 10), title='Rolling 30-Day Covariance of SNAP Returns vs. S&P 500 Returns')

                           
                           
                           
# Calculate 30-day rolling covariance of AMZN vs. S&P 500 and plot the data


# Calculate 30-day rolling beta of AMZN and plot the data
68/26:
# Calculate 30-day rolling covariance of AMZN vs. S&P 500 and plot the data
rolling_covariance_tech = 

rolling_covariance_fb = daily_returns['FB'].rolling(window=30).cov(daily_returns['S&P 500'])

rolling_covariance_fb.plot(ax=rolling_covariance_fb, figsize=(20, 10), title='Rolling 30-Day Covariance of FB Returns vs. S&P 500 Returns')

rolling_covariance_twtr = daily_returns['TWTR'].rolling(window=30).cov(daily_returns['S&P 500'])

rolling_covariance_twtr.plot(ax=rolling_covariance_twtr, figsize=(20, 10), title='Rolling 30-Day Covariance of TWTR Returns vs. S&P 500 Returns')

rolling_covariance_snap = daily_returns['SNAP'].rolling(window=30).cov(daily_returns['S&P 500'])

rolling_covariance_snap.plot(ax=rolling_covariance_snap, figsize=(20, 10), title='Rolling 30-Day Covariance of SNAP Returns vs. S&P 500 Returns')

                           
                           
                           
# Calculate 30-day rolling covariance of AMZN vs. S&P 500 and plot the data


# Calculate 30-day rolling beta of AMZN and plot the data
68/27:
# Calculate 30-day rolling covariance of AMZN vs. S&P 500 and plot the data

rolling_covariance_fb = daily_returns['FB'].rolling(window=30).cov(daily_returns['S&P 500'])

rolling_covariance_fb.plot(ax=rolling_covariance_fb, figsize=(20, 10), title='Rolling 30-Day Covariance of FB Returns vs. S&P 500 Returns')

rolling_covariance_twtr = daily_returns['TWTR'].rolling(window=30).cov(daily_returns['S&P 500'])

rolling_covariance_twtr.plot(ax=rolling_covariance_twtr, figsize=(20, 10), title='Rolling 30-Day Covariance of TWTR Returns vs. S&P 500 Returns')

rolling_covariance_snap = daily_returns['SNAP'].rolling(window=30).cov(daily_returns['S&P 500'])

rolling_covariance_snap.plot(ax=rolling_covariance_snap, figsize=(20, 10), title='Rolling 30-Day Covariance of SNAP Returns vs. S&P 500 Returns')

                           
                           
                           
# Calculate 30-day rolling covariance of AMZN vs. S&P 500 and plot the data


# Calculate 30-day rolling beta of AMZN and plot the data
68/28:
# Calculate 30-day rolling covariance of AMZN vs. S&P 500 and plot the data

rolling_covariance_fb = daily_returns['FB'].rolling(window=30).cov(daily_returns['S&P 500'])

rolling_covariance_fb.plot(figsize=(20, 10), title='Rolling 30-Day Covariance of FB Returns vs. S&P 500 Returns')

rolling_covariance_twtr = daily_returns['TWTR'].rolling(window=30).cov(daily_returns['S&P 500'])

rolling_covariance_twtr.plot(figsize=(20, 10), title='Rolling 30-Day Covariance of TWTR Returns vs. S&P 500 Returns')

rolling_covariance_snap = daily_returns['SNAP'].rolling(window=30).cov(daily_returns['S&P 500'])

rolling_covariance_snap.plot(figsize=(20, 10), title='Rolling 30-Day Covariance of SNAP Returns vs. S&P 500 Returns')

                           
                           
                           
# Calculate 30-day rolling covariance of AMZN vs. S&P 500 and plot the data


# Calculate 30-day rolling beta of AMZN and plot the data
68/29:
# Calculate 30-day rolling covariance of AMZN vs. S&P 500 and plot the data

rolling_covariance_fb = daily_returns['FB'].rolling(window=30).cov(daily_returns['S&P 500'])

rolling_covariance_fb.plot(figsize=(20, 10), title='Rolling 30-Day Covariance of FB Returns vs. S&P 500 Returns')

rolling_covariance_twtr = daily_returns['TWTR'].rolling(window=30).cov(daily_returns['S&P 500'])

rolling_covariance_twtr.plot(figsize=(20, 10), title='Rolling 30-Day Covariance of TWTR Returns vs. S&P 500 Returns')

rolling_covariance_snap = daily_returns['SNAP'].rolling(window=30).cov(daily_returns['S&P 500'])

rolling_covariance_snap.plot(figsize=(20, 10), title='Rolling 30-Day Covariance of SNAP Returns vs. S&P 500 Returns')

                           
                           
                           
# Calculate 30-day rolling covariance of AMZN vs. S&P 500 and plot the data
rolling_variance = daily_returns['S&P 500'].rolling(window=30).var()
rolling_variance.plot(figsize=(20, 10), title='Rolling 30-Day Variance of S&P 500 Returns')




# Calculate 30-day rolling beta of AMZN and plot the data
68/30:
# Calculate 30-day rolling covariance of AMZN vs. S&P 500 and plot the data

rolling_covariance_fb = daily_returns['FB'].rolling(window=30).cov(daily_returns['S&P 500'])

rolling_covariance_fb.plot(figsize=(20, 10), title='Rolling 30-Day Covariance of FB Returns vs. S&P 500 Returns')

rolling_covariance_twtr = daily_returns['TWTR'].rolling(window=30).cov(daily_returns['S&P 500'])

rolling_covariance_twtr.plot(figsize=(20, 10), title='Rolling 30-Day Covariance of TWTR Returns vs. S&P 500 Returns')

rolling_covariance_snap = daily_returns['SNAP'].rolling(window=30).cov(daily_returns['S&P 500'])

rolling_covariance_snap.plot(figsize=(20, 10), title='Rolling 30-Day Covariance of SNAP Returns vs. S&P 500 Returns')

                           
                           
                           
# Calculate 30-day rolling covariance of AMZN vs. S&P 500 and plot the data
rolling_variance = daily_returns['S&P 500'].rolling(window=30).var()
rolling_variance.plot(figsize=(20, 10), title='Rolling 30-Day Variance of S&P 500 Returns')




# Calculate 30-day rolling beta of AMZN and plot the data
rolling_beta_fb = rolling_covariance_fb / rolling_variance
rolling_beta_fb.plot(figsize=(20, 10), title='Rolling 30-Day Beta of FB')
rolling_beta_twtr = rolling_covariance_twtr / rolling_variance
rolling_beta_twtr.plot(figsize=(20, 10), title='Rolling 30-Day Beta of TWTR')
rolling_beta_snap = rolling_covariance_snap / rolling_variance
rolling_beta_snap.plot(figsize=(20, 10), title='Rolling 30-Day Beta of SNAP')
68/31:
# Calculate 30-day rolling covariance of AMZN vs. S&P 500 and plot the data

rolling_covariance_fb = daily_returns['FB'].rolling(window=30).cov(daily_returns['S&P 500'])

rolling_covariance_fb.plot(figsize=(20, 10), title='Rolling 30-Day Covariance of FB Returns vs. S&P 500 Returns')

rolling_covariance_twtr = daily_returns['TWTR'].rolling(window=30).cov(daily_returns['S&P 500'])

rolling_covariance_twtr.plot(figsize=(20, 10), title='Rolling 30-Day Covariance of TWTR Returns vs. S&P 500 Returns')

rolling_covariance_snap = daily_returns['SNAP'].rolling(window=30).cov(daily_returns['S&P 500'])

rolling_covariance_snap.plot(figsize=(20, 10), title='Rolling 30-Day Covariance of SNAP Returns vs. S&P 500 Returns')
68/32:
                          
                           
                           
# Calculate 30-day rolling covariance of AMZN vs. S&P 500 and plot the data
rolling_variance = daily_returns['S&P 500'].rolling(window=30).var()
rolling_variance.plot(figsize=(20, 10), title='Rolling 30-Day Variance of S&P 500 Returns')
68/33:
# Set the figure and plot the different datasets as multiple trends on the same figure
ax = rolling_beta_fb.plot(figsize=(20, 10), title='Rolling 30-Day Beta of Social Media Stocks')
rolling_beta_twtr.plot(ax=ax)
rolling_beta_snap.plot(ax=ax)


# Set the legend of the figure
ax.legend(["FB", "TWTR", "SNAP"])
68/34:
# Set the figure and plot the different datasets as multiple trends on the same figure
betas = rolling_beta_fb.plot(figsize=(20, 10), title='Rolling 30-Day Beta of Social Media Stocks')
rolling_beta_twtr.plot(ax=betas)
rolling_beta_snap.plot(ax=betas)


# Set the legend of the figure
ax.legend(["FB", "TWTR", "SNAP"])
70/1:
# Create a new pivot table where the columns are the closing prices for each ticker
all_prices = pd.concat([bk_df, fang_df, jnj_df, luv_df, mu_df, nke_df, sbux_df. t_df, wdc_df, wrk_df], axis="rows", join="inner")

# Sort datetime index in ascending order (past to present)


# Set column names


# Display a few rows
70/2:
# Create a new pivot table where the columns are the closing prices for each ticker
all_prices = pd.concat([bk_df, fang_df, jnj_df, luv_df, mu_df, nke_df, sbux_df. t_df, wdc_df, wrk_df], axis="rows", join="inner")
70/3:
# Create a new pivot table where the columns are the closing prices for each ticker
all_prices = all_prices.concat([bk_df, fang_df, jnj_df, luv_df, mu_df, nke_df, sbux_df. t_df, wdc_df, wrk_df], axis="rows", join="inner")
70/4:
# Create a new pivot table where the columns are the closing prices for each ticker
all_prices = pd.concat([bk_df, fang_df, jnj_df, luv_df, mu_df, nke_df, sbux_df. t_df, wdc_df, wrk_df], axis="rows", join="inner")
70/5:
# Create a new pivot table where the columns are the closing prices for each ticker
all_prices = pd.concat([bk_df, fang_df, jnj_df, luv_df, mu_df, nke_df, sbux_df, t_df, wdc_df, wrk_df], axis="rows", join="inner")
70/6:
# Create a new pivot table where the columns are the closing prices for each ticker
all_prices = pd.concat([bk_df, fang_df, jnj_df, luv_df, mu_df, nke_df, sbux_df, t_df, wdc_df, wrk_df], axis="rows", join="inner")
70/7:
# Create a new pivot table where the columns are the closing prices for each ticker
all_prices = pd.concat([bk_df, fang_df, jnj_df, luv_df, mu_df, nke_df, sbux_df, t_df, wdc_df, wrk_df], axis="rows", join="inner")
70/8:
# Create a new pivot table where the columns are the closing prices for each ticker
all_prices = pd.concat([bk_df, fang_df, jnj_df, luv_df, mu_df, nke_df, sbux_df, t_df, wdc_df, wrk_df], axis="rows", join="inner")

all_prices.sort(inplace=True)
70/9:
# Create a new pivot table where the columns are the closing prices for each ticker
all_prices = pd.concat([bk_df, fang_df, jnj_df, luv_df, mu_df, nke_df, sbux_df, t_df, wdc_df, wrk_df], axis="columns", join="inner")

all_prices.sort(inplace=True)
70/10:
# Import libraries and dependencies
import numpy as np
import pandas as pd
from pathlib import Path
%matplotlib inline
70/11:
# Set the file paths
bk_data = Path("../Resources/bk_data.csv")
fang_data = Path("../Resources/fang_data.csv")
jnj_data = Path("../Resources/jnj_data.csv")
luv_data = Path("../Resources/luv_data.csv")
mu_data = Path("../Resources/mu_data.csv")
nke_data = Path("../Resources/nke_data.csv")
sbux_data = Path("../Resources/sbux_data.csv")
t_data = Path("../Resources/t_data.csv")
wdc_data = Path("../Resources/wdc_data.csv")
wrk_data = Path("../Resources/wrk_data.csv")

# Read the CSVs and set the `date` column as a datetime index to the DataFrame
bk_df = pd.read_csv(bk_data, index_col="date", infer_datetime_format=True, parse_dates=True)
fang_df = pd.read_csv(fang_data, index_col="date", infer_datetime_format=True, parse_dates=True)
jnj_df = pd.read_csv(jnj_data, index_col="date", infer_datetime_format=True, parse_dates=True)
luv_df = pd.read_csv(luv_data, index_col="date", infer_datetime_format=True, parse_dates=True)
mu_df = pd.read_csv(mu_data, index_col="date", infer_datetime_format=True, parse_dates=True)
nke_df = pd.read_csv(nke_data, index_col="date", infer_datetime_format=True, parse_dates=True)
sbux_df = pd.read_csv(sbux_data, index_col="date", infer_datetime_format=True, parse_dates=True)
t_df = pd.read_csv(t_data, index_col="date", infer_datetime_format=True, parse_dates=True)
wdc_df = pd.read_csv(wdc_data, index_col="date", infer_datetime_format=True, parse_dates=True)
wrk_df = pd.read_csv(wrk_data, index_col="date", infer_datetime_format=True, parse_dates=True)

# Display a few rows
wrk_df.head()
70/12:
# Create a new pivot table where the columns are the closing prices for each ticker
all_prices = pd.concat([bk_df, fang_df, jnj_df, luv_df, mu_df, nke_df, sbux_df, t_df, wdc_df, wrk_df], axis="columns", join="inner")

all_prices.sort(inplace=True)
70/13:
# Create a new pivot table where the columns are the closing prices for each ticker
all_prices = pd.concat([bk_df, fang_df, jnj_df, luv_df, mu_df, nke_df, sbux_df, t_df, wdc_df, wrk_df], axis="columns", join="inner")

all_prices.sort(inplace=True)
70/14:
# Import libraries and dependencies
import numpy as np
import pandas as pd
from pathlib import Path
%matplotlib inline
70/15:
# Set the file paths
bk_data = Path("../Resources/bk_data.csv")
fang_data = Path("../Resources/fang_data.csv")
jnj_data = Path("../Resources/jnj_data.csv")
luv_data = Path("../Resources/luv_data.csv")
mu_data = Path("../Resources/mu_data.csv")
nke_data = Path("../Resources/nke_data.csv")
sbux_data = Path("../Resources/sbux_data.csv")
t_data = Path("../Resources/t_data.csv")
wdc_data = Path("../Resources/wdc_data.csv")
wrk_data = Path("../Resources/wrk_data.csv")

# Read the CSVs and set the `date` column as a datetime index to the DataFrame
bk_df = pd.read_csv(bk_data, index_col="date", infer_datetime_format=True, parse_dates=True)
fang_df = pd.read_csv(fang_data, index_col="date", infer_datetime_format=True, parse_dates=True)
jnj_df = pd.read_csv(jnj_data, index_col="date", infer_datetime_format=True, parse_dates=True)
luv_df = pd.read_csv(luv_data, index_col="date", infer_datetime_format=True, parse_dates=True)
mu_df = pd.read_csv(mu_data, index_col="date", infer_datetime_format=True, parse_dates=True)
nke_df = pd.read_csv(nke_data, index_col="date", infer_datetime_format=True, parse_dates=True)
sbux_df = pd.read_csv(sbux_data, index_col="date", infer_datetime_format=True, parse_dates=True)
t_df = pd.read_csv(t_data, index_col="date", infer_datetime_format=True, parse_dates=True)
wdc_df = pd.read_csv(wdc_data, index_col="date", infer_datetime_format=True, parse_dates=True)
wrk_df = pd.read_csv(wrk_data, index_col="date", infer_datetime_format=True, parse_dates=True)

# Display a few rows
wrk_df.head()
70/16:
# Create a new pivot table where the columns are the closing prices for each ticker
all_prices = pd.concat([bk_df, fang_df, jnj_df, luv_df, mu_df, nke_df, sbux_df, t_df, wdc_df, wrk_df], axis="columns", join="inner")

all_prices.sort(inplace=True)
70/17:
# Create a new pivot table where the columns are the closing prices for each ticker
all_prices = pd.concat([bk_df, fang_df, jnj_df, luv_df, mu_df, nke_df, sbux_df, t_df, wdc_df, wrk_df], axis="columns", join="inner")
70/18:
all_prices = all_prices.reset_index()

all_prices.sort(inplace=True)
70/19:
# Create a new pivot table where the columns are the closing prices for each ticker
all_prices = pd.concat([bk_df, fang_df, jnj_df, luv_df, mu_df, nke_df, sbux_df, t_df, wdc_df, wrk_df], axis="columns", join="inner")
70/20:
# Create a new pivot table where the columns are the closing prices for each ticker
all_prices = pd.concat([bk_df, fang_df, jnj_df, luv_df, mu_df, nke_df, sbux_df, t_df, wdc_df, wrk_df], axis="columns", join="inner")


all_prices
70/21:
all_prices = all_prices.reset_index()

all_prices.sort(inplace=True)
70/22: all_prices = all_prices.reset_index()
70/23: all_prices.sort(inplace=True)
72/1:
# Import libraries and dependencies
import numpy as np
import pandas as pd
from pathlib import Path
import seaborn as sns
%matplotlib inline
72/2:
# Set the file paths
bk_data = Path("../Resources/bk_data.csv")
fang_data = Path("../Resources/fang_data.csv")
jnj_data = Path("../Resources/jnj_data.csv")
luv_data = Path("../Resources/luv_data.csv")
mu_data = Path("../Resources/mu_data.csv")
nke_data = Path("../Resources/nke_data.csv")
sbux_data = Path("../Resources/sbux_data.csv")
t_data = Path("../Resources/t_data.csv")
wdc_data = Path("../Resources/wdc_data.csv")
wrk_data = Path("../Resources/wrk_data.csv")

# Read the CSVs and set the `date` column as a datetime index to the DataFrame
bk_df = pd.read_csv(bk_data, index_col="date", infer_datetime_format=True, parse_dates=True)
fang_df = pd.read_csv(fang_data, index_col="date", infer_datetime_format=True, parse_dates=True)
jnj_df = pd.read_csv(jnj_data, index_col="date", infer_datetime_format=True, parse_dates=True)
luv_df = pd.read_csv(luv_data, index_col="date", infer_datetime_format=True, parse_dates=True)
mu_df = pd.read_csv(mu_data, index_col="date", infer_datetime_format=True, parse_dates=True)
nke_df = pd.read_csv(nke_data, index_col="date", infer_datetime_format=True, parse_dates=True)
sbux_df = pd.read_csv(sbux_data, index_col="date", infer_datetime_format=True, parse_dates=True)
t_df = pd.read_csv(t_data, index_col="date", infer_datetime_format=True, parse_dates=True)
wdc_df = pd.read_csv(wdc_data, index_col="date", infer_datetime_format=True, parse_dates=True)
wrk_df = pd.read_csv(wrk_data, index_col="date", infer_datetime_format=True, parse_dates=True)

# Display a few rows
wrk_df.head()
72/3:
# Create a new pivot table where the columns are the closing prices for each ticker
combined_df = pd.concat([bk_df, fang_df, jnj_df, luv_df, mu_df, nke_df, sbux_df, t_df, wdc_df, wrk_df], axis="columns", join="inner")

# Sort datetime index in ascending order (past to present)
combined_df.sort_index(inplace=True)

# Set column names
combined_df.columns = ['BK', 'FANG', 'JNJ', 'LUV', 'MU', 'NKE', 'SBUX', 'T', 'WDC', 'WRK']

# Display a few rows
combined_df.head()
72/4:
# Use the `pct_change` function to calculate daily returns
daily_returns = combined_df.pct_change()
daily_returns.head()
72/5:
# Use the `std` function and multiply by the square root of the number of trading days in a year to get annualized volatility
volatility = daily_returns.std() * np.sqrt(252)
volatility.sort_values(inplace=True)
volatility
72/6:
# Drop the 5 stocks with the highest volatility in daily returns
daily_returns.drop(columns=['MU', 'WDC', 'FANG', 'WRK', 'LUV'], inplace=True)
daily_returns.head()
72/7:
# Set weights for corresponding risk profile of stocks, use the `dot` function to sum the product each weight and the corresponding stock daily return
# BK, JNJ, NKE, SBUX, T
weights = [0.15, 0.05, 0.10, 0.2, 0.50]
portfolio_returns = daily_returns.dot(weights)
portfolio_returns.head()
72/8:
# Use the `cumprod` function to calculate cumulative returns
cumulative_returns = (1 + portfolio_returns).cumprod()
cumulative_returns.head()
72/9:
# Plot the returns of the portfolio in terms of money
initial_investment = 10000
cumulative_profit = initial_investment * cumulative_returns
cumulative_profit.plot()
72/10:
# Re-calculate daily returns as the DataFrame was modified in part 1

# Use the `pct_change` function to calculate daily returns
daily_returns = combined_df.pct_change()
daily_returns.head()
72/11:
# Use the `corr` function to calculate the correlation between stock returns
daily_returns_corr = daily_returns.corr()
72/12:
# Use the `corr` function to calculate the correlation between stock returns
daily_returns_corr = daily_returns.corr()
daily_returns_corr
72/13:
# Use the `heatmap` function from the Seaborn library to visualize the correlation table
sns.heatmap(daily_returns_corr)
72/14:
# Use the `heatmap` function from the Seaborn library to visualize the correlation table
sns.heatmap(daily_returns_corr, vmin=-1, vmax=1)
72/15:
# Alternatively, sum total correlation for each stock
daily_returns_corr.sum(axis="row")
72/16:
# Alternatively, sum total correlation for each stock
daily_returns_corr.sum(axis="0")
72/17:
# Alternatively, sum total correlation for each stock
daily_returns_corr.sum(axis=0)
72/18:
# Alternatively, sum total correlation for each stock
daily_returns_corr.sum(axis=0).sort_values()
72/19:
# Drop highly correlated stocks and keep only the non-correlated stocks
daily_returns.drop(columns=["wrk"], ["BK"])
72/20:
# Drop highly correlated stocks and keep only the non-correlated stocks
daily_returns.drop(columns=["wrk", "BK"])
72/21:
# Drop highly correlated stocks and keep only the non-correlated stocks
daily_returns.drop(columns=["wrk", "BK"], inplace=True)
72/22:
# Drop highly correlated stocks and keep only the non-correlated stocks
daily_returns.drop(columns=["WRK", "BK"], inplace=True)
daily_returns
72/23:
# Use the `mean` and `std` functions to calculate the annualized sharpe ratio
sharpe_ratio = (daily_returns.mean()*252) / (daily_retunrs.std()*np.sqrt(252))
sharpe_ratio
72/24:
# Use the `mean` and `std` functions to calculate the annualized sharpe ratio
sharpe_ratio = (daily_returns.mean()*252) / (daily_returns.std()*np.sqrt(252))
sharpe_ratio
72/25:
# Use the `mean` and `std` functions to calculate the annualized sharpe ratio
sharpe_ratio = (daily_returns.mean()*252) / (daily_returns.std()*np.sqrt(252))
sharpe_ratio.sort_values
sharpe_ratio
72/26:
# Use the `mean` and `std` functions to calculate the annualized sharpe ratio
sharpe_ratio = (daily_returns.mean()*252) / (daily_returns.std()*np.sqrt(252))
sharpe_ratio.sort_values
72/27:
# Use the `mean` and `std` functions to calculate the annualized sharpe ratio
sharpe_ratio = (daily_returns.mean()*252) / (daily_returns.std()*np.sqrt(252))
sharpe_ratio.sort_values()
72/28:
# Drop the lowest sharpe ratio stocks and keep only the postive sharpe ratio stocks
daily_returns.drop(columns=["WDC", "T", "FANG"])
daily_returns
72/29:
# Drop the lowest sharpe ratio stocks and keep only the postive sharpe ratio stocks
daily_returns.drop(columns=["WDC", "T", "FANG"], inplace=True)
daily_returns
73/1:
import pandas as pd
import numpy as np
import datetime as dt
from pathlib import Path
%matplotlib inline
73/2:
# Reading whale returns
whale_returns_csv = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/pandas_homework/Starter_Code/Resources/whale_returns.csv')
# YOUR CODE HERE
73/3:
# Reading whale returns
whale_returns_csv = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/pandas_homework/Starter_Code/Resources/whale_returns.csv')
whale_returns_df = pd.read_csv(whale_returns_csv, index_col="Date", infer_datetime_format=True, parse_dates=True)
whale_returns_df.head()
# YOUR CODE HERE
73/4:
# Count nulls
# YOUR CODE HERE
whale_returns_df.isnull().sum()
73/5:
# Drop nulls
# YOUR CODE HERE
whale_returns_df = whale_returns_df.dropna()
whale_returns_df.isnull().sum()
73/6:
# Reading algorithmic returns
algo_returns_csv = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/pandas_homework/Starter_Code/Resources/algo_returns.csv')
# YOUR CODE HERE
algo_returns_df = pd.read_csv(algo_returns_csv, index_col="Date", infer_datetime_format=True, parse_dates=True)
algo_returns_df.head()
73/7:
# Count nulls
# YOUR CODE HERE
algo_returns_df.isnull().sum()
73/8:
# Drop nulls
# YOUR CODE HERE
algo_returns_df = algo_returns_df.dropna()
algo_returns_df.isnull().sum()
73/9:
# Reading S&P 500 Closing Prices
sp500_history_csv = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/pandas_homework/Starter_Code/Resources/sp500_history.csv')
# YOUR CODE HERE
sp500_df = pd.read_csv(sp500_history_csv, index_col="Date", infer_datetime_format=True, parse_dates=True)
sp500_df.head()
73/10:
# Reading whale returns
whale_returns_csv = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/pandas_homework/Starter_Code/Resources/whale_returns.csv')
whale_returns_df = pd.read_csv(whale_returns_csv, index_col="Date", infer_datetime_format=True, parse_dates=True)
whale_returns_df.sort_index(inplace=True)
whale_returns_df.head()
# YOUR CODE HERE
73/11:
# Count nulls
# YOUR CODE HERE
whale_returns_df.isnull().sum()
73/12:
# Drop nulls
# YOUR CODE HERE
whale_returns_df = whale_returns_df.dropna()
whale_returns_df.isnull().sum()
73/13:
# Reading algorithmic returns
algo_returns_csv = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/pandas_homework/Starter_Code/Resources/algo_returns.csv')
# YOUR CODE HERE
algo_returns_df = pd.read_csv(algo_returns_csv, index_col="Date", infer_datetime_format=True, parse_dates=True)
algo_returns_df.sort_index(inplace=True)
algo_returns_df.head()
73/14:
# Count nulls
# YOUR CODE HERE
algo_returns_df.isnull().sum()
73/15:
# Drop nulls
# YOUR CODE HERE
algo_returns_df = algo_returns_df.dropna()
algo_returns_df.isnull().sum()
73/16:
# Reading S&P 500 Closing Prices
sp500_history_csv = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/pandas_homework/Starter_Code/Resources/sp500_history.csv')
# YOUR CODE HERE
sp500_df = pd.read_csv(sp500_history_csv, index_col="Date", infer_datetime_format=True, parse_dates=True)
sp500_df.sort_index(inlace=True)
sp500_df.head()
73/17:
# Reading S&P 500 Closing Prices
sp500_history_csv = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/pandas_homework/Starter_Code/Resources/sp500_history.csv')
# YOUR CODE HERE
sp500_df = pd.read_csv(sp500_history_csv, index_col="Date", infer_datetime_format=True, parse_dates=True)
sp500_df.sort_index(inlace=True)
sp500_df.head()
73/18:
# Reading S&P 500 Closing Prices
sp500_history_csv = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/pandas_homework/Starter_Code/Resources/sp500_history.csv')
# YOUR CODE HERE
sp500_df = pd.read_csv(sp500_history_csv, index_col="Date", infer_datetime_format=True, parse_dates=True)
sp500_df.sort_index(inplace=True)
sp500_df.head()
73/19:
# Check Data Types
# YOUR CODE HERE
sp500_df.dtypes
73/20:
# Fix Data Types
# YOUR CODE HERE
sp500_df = sp500_df.str.replace('$', '')
sp500_df.head()
73/21:
# Fix Data Types
# YOUR CODE HERE
sp500_df.str.replace('$', '')
sp500_df.head()
73/22:
# Fix Data Types
# YOUR CODE HERE
sp500_df['Close'] = sp500_df.str.replace('$', '')
sp500_df.head()
73/23:
# Fix Data Types
# YOUR CODE HERE
sp500_df['Close'] = sp500_df['Close'].str.replace('$', '')
sp500_df.head()
73/24:
# Fix Data Types
# YOUR CODE HERE
#get rid of $ sign
sp500_df['Close'] = sp500_df['Close'].str.replace('$', '')
sp500_df.head()
sp500_df['Close'] = sp500_df['Close'].astype('float')
sp500_df.dtypes
73/25:
# Calculate Daily Returns
# YOUR CODE HERE
sp500_daily_returns = sp500_df.pct_change()
sp500_daily_returns.head()
73/26:
# Drop nulls
# YOUR CODE HERE
sp500_daily_returns.isnull().sum()
73/27:
# Drop nulls
# YOUR CODE HERE
sp500_daily_returns.isnull().sum()
sp500_daily_returns.dropna()
sp500_daily_returns.isnull().sum()
73/28:
# Drop nulls
# YOUR CODE HERE
sp500_daily_returns.isnull().sum()
sp500_daily_returns.dropna()
sp500_daily_returns.isnull().sum()
73/29:
# Drop nulls
# YOUR CODE HERE
sp500_daily_returns.isnull().sum()
sp500_daily_returns.dropna(inplace=True)
sp500_daily_returns.isnull().sum()
73/30:
# Drop nulls
# YOUR CODE HERE
sp500_daily_returns.isnull().sum()
sp500_daily_returns.dropna(inplace=True)
sp500_daily_returns.isnull().sum()
sp500_daily_returns.head()
73/31:
# Rename Column
# YOUR CODE HERE
sp500_daily_returns.columns = ['SP 500']
sp500_daily_returns.head()
73/32:
# Rename Column
# YOUR CODE HERE
sp500_daily_returns.columns = ['S&P 500']
sp500_daily_returns.head()
73/33:
# Concatenate all DataFrames into a single DataFrame
# YOUR CODE HERE
investment_strategy_analysis = pd.concat([whale_returns_df, algo_returns_df, sp500_daily_returns], axis="columns", join="inner")
investment_strategy_analysis.head()
73/34:
# Concatenate all DataFrames into a single DataFrame
# YOUR CODE HERE
combined_strategies_df = pd.concat([whale_returns_df, algo_returns_df, sp500_daily_returns], axis="columns", join="inner")
combined_strategies_df.head()
73/35:
# Plot daily returns
# YOUR CODE HERE
ax = combined_strategies_returns_df.plot(figsize=(20, 10), title='Daily Returns')
73/36:
# Concatenate all DataFrames into a single DataFrame
# YOUR CODE HERE
combined_strategies_returns_df = pd.concat([whale_returns_df, algo_returns_df, sp500_daily_returns], axis="columns", join="inner")
combined_strategies_returns_df.head()
73/37:
# Plot daily returns
# YOUR CODE HERE
combined_strategies_returns_df.plot(figsize=(20, 10), title='Daily Returns')
73/38:
# Plot cumulative returns
# YOUR CODE HERE
combined_strategies_cumulative_returns_df = (1 + combined_strategies_returns_df).cumprod()
combined_strategies_cumulative_returns_df.plot(figsize=(20, 10), title="Cumulative Returns")
73/39:
# Plot daily returns
# YOUR CODE HERE
combined_strategies_returns_df.plot(figsize=(15, 10), title='Daily Returns')
73/40:
# Plot daily returns
# YOUR CODE HERE
combined_strategies_returns_df.plot(figsize=(20, 10), title='Daily Returns')
73/41:
# Concatenate all DataFrames into a single DataFrame
# YOUR CODE HERE
combined_strategies_returns_df = pd.concat([whale_returns_df, algo_returns_df, sp500_daily_returns], axis="columns", join="inner")
combined_strategies_returns_df.head()
combined_strategies_returns_df.describe
73/42:
# Concatenate all DataFrames into a single DataFrame
# YOUR CODE HERE
combined_strategies_returns_df = pd.concat([whale_returns_df, algo_returns_df, sp500_daily_returns], axis="columns", join="inner")
combined_strategies_returns_df.head()
combined_strategies_returns_df.describe()
73/43:
# Concatenate all DataFrames into a single DataFrame
# YOUR CODE HERE
combined_strategies_returns_df = pd.concat([whale_returns_df, algo_returns_df, sp500_daily_returns], axis="columns", join="inner")
combined_strategies_returns_df.head()
#combined_strategies_returns_df.describe()
73/44:
# Plot daily returns
# YOUR CODE HERE
combined_strategies_returns_df.plot(title='Daily Returns')
73/45:
# Plot daily returns
# YOUR CODE HERE
combined_strategies_returns_df.plot(figsize=(20, 10), title='Daily Returns')
73/46:
# Concatenate all DataFrames into a single DataFrame
# YOUR CODE HERE
combined_strategies_returns_df = pd.concat([whale_returns_df, algo_returns_df, sp500_daily_returns], axis="columns", join="inner")
combined_strategies_returns_df.head()
combined_strategies_returns_df.describe
73/47:
# Concatenate all DataFrames into a single DataFrame
# YOUR CODE HERE
combined_strategies_returns_df = pd.concat([whale_returns_df, algo_returns_df, sp500_daily_returns], axis="columns", join="inner")
combined_strategies_returns_df.head()
combined_strategies_returns_df.describe()
73/48:
# Plot daily returns
# YOUR CODE HERE
#combined_strategies_returns_ITD_df
ax = combined_strategies_returns_df.plot(figsize=(20, 10), title='Daily Returns')
73/49:
# Plot daily returns
# YOUR CODE HERE
#combined_strategies_returns_ITD_df
combined_strategies_returns_df.plot(figsize=(20, 10), title='Daily Returns')
73/50:
# Concatenate all DataFrames into a single DataFrame
# YOUR CODE HERE
combined_strategies_returns_df = pd.concat([whale_returns_df, algo_returns_df, sp500_daily_returns], axis="columns", join="inner")
combined_strategies_returns_df.head()
combined_strategies_returns_df.describe
73/51:
# Plot daily returns
# YOUR CODE HERE
#combined_strategies_returns_ITD_df
combined_strategies_returns_df.plot(figsize=(20, 10), title='Daily Returns')
combined_strategies_returns_df.index.min()
73/52:
# Plot daily returns
# YOUR CODE HERE
#combined_strategies_returns_ITD_df
combined_strategies_returns_df.plot(figsize=(20, 10), title='Daily Returns')
combined_strategies_returns_df.index.min()
combined_strategies_returns_df.index.max()
73/53:
# Plot daily returns
# YOUR CODE HERE
#combined_strategies_returns_ITD_df
combined_strategies_returns_df.plot(xlim=(combined_strategies_returns_df.index.min(), df.index.max()), figsize=(20, 10), title='Daily Returns')
combined_strategies_returns_df.index.min()
combined_strategies_returns_df.index.max()
73/54:
# Plot daily returns
# YOUR CODE HERE
#combined_strategies_returns_ITD_df
combined_strategies_returns_df.plot(figsize=(20, 10), xlim=(combined_strategies_returns_df.index.min(),combined_strategies_returns_df.index.max()), title='Daily Returns')
73/55:
# Plot cumulative returns
# YOUR CODE HERE
combined_strategies_cumulative_returns_df = (1 + combined_strategies_returns_df).cumprod()
combined_strategies_cumulative_returns_df.plot(figsize=(20, 10), xlim=(combined_strategies_cumulative_returns_df.index.min(),combined_strategies_cumulative_returns_df.index.max()), title="Cumulative Returns")
73/56:
# Plot cumulative returns
# YOUR CODE HERE
combined_strategies_cumulative_returns_df = (1 + combined_strategies_returns_df).cumprod()
combined_strategies_cumulative_returns_df.plot(figsize=(20, 10), xlim=(combined_strategies_cumulative_returns_df.index.min(),combined_strategies_cumulative_returns_df.index.max()), title="Cumulative Returns")
combined_strategies_cumulative_returns_df.describe
73/57:
# Plot cumulative returns
# YOUR CODE HERE
combined_strategies_cumulative_returns_df = (1 + combined_strategies_returns_df).cumprod()
combined_strategies_cumulative_returns_df.plot(figsize=(20, 10), xlim=(combined_strategies_cumulative_returns_df.index.min(),combined_strategies_cumulative_returns_df.index.max()), title="Cumulative Returns")
combined_strategies_cumulative_returns_df.describe()
73/58:
# Plot cumulative returns
# YOUR CODE HERE
combined_strategies_cumulative_returns_df = (1 + combined_strategies_returns_df).cumprod()
combined_strategies_cumulative_returns_df.plot(figsize=(20, 10), xlim=(combined_strategies_cumulative_returns_df.index.min(),combined_strategies_cumulative_returns_df.index.max()), title="Cumulative Returns")
combined_strategies_cumulative_returns_df.describe()
combined_strategies_cumulative_returns_df.sum(axis=0).sort_values()
73/59:
#Does any portfolio outperform the S&P 500?
combined_strategies_cumulative_returns_df.sum(axis=0).sort_values()
73/60:
# Plot cumulative returns
# YOUR CODE HERE
combined_strategies_cumulative_returns_df = (1 + combined_strategies_returns_df).cumprod()
combined_strategies_cumulative_returns_df.plot(figsize=(20, 10), xlim=(combined_strategies_cumulative_returns_df.index.min(),combined_strategies_cumulative_returns_df.index.max()), title="Cumulative Returns")
combined_strategies_cumulative_returns_df.describe()
73/61:
#Does any portfolio outperform the S&P 500?
combined_strategies_cumulative_returns_df
73/62:
#Does any portfolio outperform the S&P 500?
combined_strategies_cumulative_returns_df.sum
73/63:
#Does any portfolio outperform the S&P 500?
combined_strategies_cumulative_returns_df.sum()
73/64:
#Does any portfolio outperform the S&P 500?
combined_strategies_cumulative_returns_df.sum().sort_values()
73/65:
#Does any portfolio outperform the S&P 500?
combined_strategies_cumulative_returns_df.sort_values()
73/66:
#Does any portfolio outperform the S&P 500?
combined_strategies_cumulative_returns_df.sum().sort_values()
73/67:
#Does any portfolio outperform the S&P 500?
combined_strategies_cumulative_returns_df.sum().sort_values()
combined_strategies_cumulative_returns_df
73/68:
#Does any portfolio outperform the S&P 500?
combined_strategies_cumulative_returns_df.sum().sort_values()
combined_strategies_cumulative_returns_df()
73/69:
#Does any portfolio outperform the S&P 500?
combined_strategies_cumulative_returns_df.sum().sort_values()
combined_strategies_cumulative_returns_df.cumprod
73/70:
#Does any portfolio outperform the S&P 500?
combined_strategies_cumulative_returns_df.sum().sort_values()
combined_strategies_cumulative_returns_df.cumprod()
73/71:
#Does any portfolio outperform the S&P 500?
combined_strategies_cumulative_returns_df.sum().sort_values()
print(combined_strategies_cumulative_returns_df.cumprod())
73/72:
#Does any portfolio outperform the S&P 500?
combined_strategies_cumulative_returns_df.sum().sort_values()
73/73:
# Box plot to visually show risk
# YOUR CODE HERE
combined_strategies_returns_df.plot.box(figsize=(20, 10), title='Portfolio Risk')
73/74:
# Daily Standard Deviations
# Calculate the standard deviation for each portfolio. 
# Which portfolios are riskier than the S&P 500?
# YOUR CODE HERE
daily_std = combined_strategies_returns_df.std()
daily_std.head()
73/75:
# Daily Standard Deviations
# Calculate the standard deviation for each portfolio. 
# Which portfolios are riskier than the S&P 500?
# YOUR CODE HERE
daily_std = combined_strategies_returns_df.std()
daily_std
73/76:
# Daily Standard Deviations
# Calculate the standard deviation for each portfolio. 
# Which portfolios are riskier than the S&P 500?
# YOUR CODE HERE
daily_std = combined_strategies_returns_df.std()
daily_std.sort_values
73/77:
# Daily Standard Deviations
# Calculate the standard deviation for each portfolio. 
# Which portfolios are riskier than the S&P 500?
# YOUR CODE HERE
daily_std = combined_strategies_returns_df.std()
daily_std
73/78: daily_std.loc[daily_std[1]]
73/79: daily_std.iloc[:,-1]
73/80: daily_std.iloc[:,-1].head()
73/81: daily_std.loc[:,-1].head()
73/82: annualized_std = combined_strategies_returns_df.std() * np.sqrt(252)
73/83:
annualized_std = combined_strategies_returns_df.std() * np.sqrt(252)
annualized_std
73/84:
# Calculate the annualized standard deviation (252 trading days)
# YOUR CODE HERE
annualized_std = combined_strategies_returns_df.std() * np.sqrt(252)
annualized_std
73/85:
for std in daily_std:
    if std > .008342:
        return True
    else:
        return False
    print(daily_std)
73/86:
for std in daily_std:
    if std > .008342:
        return True
    else:
        return False
        print(daily_std)
73/87:
for std in daily_std:
    if std > .008342:
        return True
    else:
        return False
print(daily_std)
73/88:
true_false = ''
for std in daily_std:
    if std > .008342:
        return True
    else:
        return False
print(true_false)
73/89:
sp500_std = sp500_daily_returns.std
sp500_std
73/90:
sp500_std = sp500_daily_returns.std()
sp500_std
73/91:
sp500_std = daily_std['S&P 500']
sp500_std
73/92:


for std in daily_std:
    if std > sp500_std:
        return True
    else:
        return False
73/93:
combined_strategies_21day_std = combined_strategies_returns_df.rolling(window=21).std()
combined_strategies_21day_std.plot(figsize=(20, 10), xlim=(combined_strategies_21day_std.index.min(),combined_strategies_21day_std.index.max()), title="21 Day Rolling Standard Deviation")
73/94:
combined_strategies_correlation = combined_strategies_returns_df.corr()
combined_strategies_correlation
73/95:
combined_strategies_correlation = combined_strategies_returns_df.corr()
combined_strategies_correlation
sns.heatmap(combined_strategies_correlation)
73/96:
import pandas as pd
import numpy as np
import datetime as dt
from pathlib import Path
import seaborn as sns
%matplotlib inline
73/97:
combined_strategies_correlation = combined_strategies_returns_df.corr()
combined_strategies_correlation
sns.heatmap(combined_strategies_correlation)
73/98:
combined_strategies_correlation = combined_strategies_returns_df.corr()
combined_strategies_correlation
73/99:
import pandas as pd
import numpy as np
import datetime as dt
from pathlib import Path
import seaborn as sns
import matplotlib.pyplot as plt
%matplotlib inline
73/100:
combined_strategies_correlation = combined_strategies_returns_df.corr()
combined_strategies_correlation
plt.matshow(combined_strategies_correlation()
#combined_strategies_correlation.style.background_gradient(cmap='')
73/101:
combined_strategies_correlation = combined_strategies_returns_df.corr()
combined_strategies_correlation
plt.matshow(combined_strategies_correlation()
73/102:
combined_strategies_correlation = combined_strategies_returns_df.corr()
combined_strategies_correlation
plt.matshow(combined_strategies_correlation())
73/103:
combined_strategies_correlation = combined_strategies_returns_df.corr()
combined_strategies_correlation
plt.matshow(combined_strategies_correlation)
73/104:
combined_strategies_correlation = combined_strategies_returns_df.corr()
combined_strategies_correlation
73/105:
combined_strategies_correlation = combined_strategies_returns_df.corr()
combined_strategies_correlation
combined_strategies_correlation.style.background_gradient(cmap='RdYlGn')
73/106:
combined_strategies_correlation = combined_strategies_returns_df.corr()
combined_strategies_correlation
combined_strategies_correlation.style.background_gradient(cmap='YG')
73/107:
combined_strategies_correlation = combined_strategies_returns_df.corr()
combined_strategies_correlation
combined_strategies_correlation.style.background_gradient(cmap='YlGn')
73/108:
combined_strategies_correlation = combined_strategies_returns_df.corr()
combined_strategies_correlation
combined_strategies_correlation.style.background_gradient(cmap='GnYl')
73/109:
combined_strategies_correlation = combined_strategies_returns_df.corr()
combined_strategies_correlation
combined_strategies_correlation.style.background_gradient(cmap='YlGn')
73/110:
combined_strategies_correlation = combined_strategies_returns_df.corr()
combined_strategies_correlation
combined_strategies_correlation.style.background_gradient(cmap='YlGn')\
    .set_table_styles(magnify))
73/111:
combined_strategies_correlation = combined_strategies_returns_df.corr()
combined_strategies_correlation
combined_strategies_correlation.style.background_gradient(cmap='YlGn').set_table_styles(magnify))
73/112:
combined_strategies_correlation = combined_strategies_returns_df.corr()
combined_strategies_correlation
combined_strategies_correlation.style.background_gradient(cmap='YlGn').set_table_styles(magnify)
73/113:
combined_strategies_correlation = combined_strategies_returns_df.corr()
combined_strategies_correlation
combined_strategies_correlation.style.background_gradient(cmap='YlGn')
73/114:
combined_strategies_correlation = combined_strategies_returns_df.corr()
combined_strategies_correlation
combined_strategies_correlation.style.background_gradient(cmap='YlGn', vmin=-1, vmax=1)
73/115:
combined_strategies_correlation = combined_strategies_returns_df.corr()
combined_strategies_correlation
combined_strategies_correlation.style.background_gradient(cmap='YlGn')
73/116:
combined_strategies_correlation = combined_strategies_returns_df.corr()
combined_strategies_correlation
combined_strategies_correlation.style.background_gradient(cmap='YlGn_r')
73/117:
combined_strategies_correlation = combined_strategies_returns_df.corr()
combined_strategies_correlation
combined_strategies_correlation.style.background_gradient(cmap='YlGn_r', title='Strategy Correlations')
73/118:
combined_strategies_correlation = combined_strategies_returns_df.corr()
combined_strategies_correlation
combined_strategies_correlation.style.background_gradient(cmap=('YlGn_r'), title=('Strategy Correlations'))
73/119:
combined_strategies_correlation = combined_strategies_returns_df.corr()
combined_strategies_correlation
combined_strategies_correlation.style.background_gradient(cmap='YlGn_r')
73/120:
combined_strategies_correlation = combined_strategies_returns_df.corr()
combined_strategies_correlation
#combined_strategies_correlation.style.background_gradient(cmap='YlGn_r')
combined_strategies_correlation.plot(cmap='YlGn_r', vmin=0, vmax=1)
73/121:
combined_strategies_correlation = combined_strategies_returns_df.corr()
combined_strategies_correlation
combined_strategies_correlation.style.background_gradient(cmap='YlGn_r')
73/122:
# Calculate and plot the rolling standard deviation for
# the S&P 500 and whale portfolios using a 21 trading day window
# YOUR CODE HERE
combined_strategies_21day_std = combined_strategies_returns_df.rolling(window=21).std()
combined_strategies_21day_std.plot(figsize=(20, 10), xlim=(combined_strategies_21day_std.index.min(),(combined_strategies_21day_std.index.max()), title="21 Day Rolling Standard Deviation"))
73/123:
# Calculate and plot the rolling standard deviation for
# the S&P 500 and whale portfolios using a 21 trading day window
# YOUR CODE HERE
combined_strategies_21day_std = combined_strategies_returns_df.rolling(window=21).std()
combined_strategies_21day_std.plot(figsize=(20, 10), xlim=(combined_strategies_21day_std.index.min(),(combined_strategies_21day_std.index.max()), title="21 Day Rolling Standard Deviation")
73/124:
# Calculate and plot the rolling standard deviation for
# the S&P 500 and whale portfolios using a 21 trading day window
# YOUR CODE HERE
combined_strategies_21day_std = combined_strategies_returns_df.rolling(window=21).std()
combined_strategies_21day_std.plot(figsize=(20, 10), xlim=(combined_strategies_21day_std.index.min(),combined_strategies_21day_std.index.max()), title="21 Day Rolling Standard Deviation")
73/125:
rolling_variance = combined_strategies_returns_df['S&P 500'].rolling(window=21).var()
berkshire_rolling_covariance = combined_strategies_returns_df['BERKSHIRE HATHAWAY INC'].rolling(window=21).cov()
berkshire_rolling_beta = berkshire_rolling_covariance / rolling_variance
berkshire_rolling_beta.plot(figsize=(20, 10), xlim=(berkshire_rolling_beta.index.min(),combined_strategies_21day_std.index.max()), title="Berkshire Hathaway Inc. Beta")
73/126:
rolling_variance = combined_strategies_returns_df['S&P 500'].rolling(window=30).var()
berkshire_rolling_covariance = combined_strategies_returns_df['BERKSHIRE HATHAWAY INC'].rolling(window=30).cov()
berkshire_rolling_beta = berkshire_rolling_covariance / rolling_variance
berkshire_rolling_beta.plot(figsize=(20, 10), xlim=(berkshire_rolling_beta.index.min(),combined_strategies_21day_std.index.max()), title="Berkshire Hathaway Inc. Beta")
73/127:
rolling_variance = combined_strategies_returns_df['S&P 500'].rolling(window=30).var()
berkshire_rolling_covariance = combined_strategies_returns_df['BERKSHIRE HATHAWAY INC'].rolling(window=30).cov()
berkshire_rolling_beta = berkshire_rolling_covariance / rolling_variance
berkshire_rolling_beta
berkshire_rolling_beta.plot(figsize=(20, 10), xlim=(berkshire_rolling_beta.index.min(),combined_strategies_21day_std.index.max()), title="Berkshire Hathaway Inc. Beta")
73/128:
rolling_variance = combined_strategies_returns_df['S&P 500'].rolling(window=180).var()
berkshire_rolling_covariance = combined_strategies_returns_df['BERKSHIRE HATHAWAY INC'].rolling(window=180).cov()
berkshire_rolling_beta = berkshire_rolling_covariance / rolling_variance
berkshire_rolling_beta
berkshire_rolling_beta.plot(figsize=(20, 10), xlim=(berkshire_rolling_beta.index.min(),combined_strategies_21day_std.index.max()), title="Berkshire Hathaway Inc. Beta")
73/129:
rolling_variance = combined_strategies_returns_df['S&P 500'].rolling(window=252).var()
berkshire_rolling_covariance = combined_strategies_returns_df['BERKSHIRE HATHAWAY INC'].rolling(window=252).cov()
berkshire_rolling_beta = berkshire_rolling_covariance / rolling_variance
berkshire_rolling_beta
berkshire_rolling_beta.plot(figsize=(20, 10), xlim=(berkshire_rolling_beta.index.min(),combined_strategies_21day_std.index.max()), title="Berkshire Hathaway Inc. Beta")
73/130:
rolling_variance = combined_strategies_returns_df['S&P 500'].rolling(window=10).var()
berkshire_rolling_covariance = combined_strategies_returns_df['BERKSHIRE HATHAWAY INC'].rolling(window=10).cov()
berkshire_rolling_beta = berkshire_rolling_covariance / rolling_variance
berkshire_rolling_beta
berkshire_rolling_beta.plot(figsize=(20, 10), xlim=(berkshire_rolling_beta.index.min(),combined_strategies_21day_std.index.max()), title="Berkshire Hathaway Inc. Beta")
73/131:
rolling_variance = combined_strategies_returns_df['S&P 500'].rolling(window=30).var()
berkshire_rolling_covariance = combined_strategies_returns_df['BERKSHIRE HATHAWAY INC'].rolling(window=30).cov()
berkshire_rolling_beta = berkshire_rolling_covariance / rolling_variance
berkshire_rolling_beta
berkshire_rolling_beta.plot(figsize=(20, 10), xlim=(berkshire_rolling_beta.index.min(),combined_strategies_21day_std.index.max()), title="Berkshire Hathaway Inc. Beta")
73/132:
rolling_variance = combined_strategies_returns_df['S&P 500'].rolling(window=30).var()
berkshire_rolling_covariance = combined_strategies_returns_df['BERKSHIRE HATHAWAY INC'].rolling(window=30).cov()
berkshire_rolling_beta = berkshire_rolling_covariance / rolling_variance
berkshire_rolling_beta
#berkshire_rolling_beta.plot(figsize=(20, 10), xlim=(berkshire_rolling_beta.index.min(),combined_strategies_21day_std.index.max()), title="Berkshire Hathaway Inc. Beta")
73/133:
rolling_variance = combined_strategies_returns_df['S&P 500'].rolling(window=30).var()
berkshire_rolling_covariance = combined_strategies_returns_df['BERKSHIRE HATHAWAY INC'].rolling(window=30).cov()
berkshire_rolling_beta = berkshire_rolling_covariance / rolling_variance
berkshire_rolling_beta
rolling_variance
#berkshire_rolling_beta.plot(figsize=(20, 10), xlim=(berkshire_rolling_beta.index.min(),combined_strategies_21day_std.index.max()), title="Berkshire Hathaway Inc. Beta")
73/134:
rolling_variance = combined_strategies_returns_df['S&P 500'].rolling(window=30).var()
berkshire_rolling_covariance = combined_strategies_returns_df['BERKSHIRE HATHAWAY INC'].rolling(window=30).cov()
berkshire_rolling_beta = berkshire_rolling_covariance / rolling_variance

#berkshire_rolling_beta.plot(figsize=(20, 10), xlim=(berkshire_rolling_beta.index.min(),combined_strategies_21day_std.index.max()), title="Berkshire Hathaway Inc. Beta")
73/135:
rolling_variance = combined_strategies_returns_df['S&P 500'].rolling(window=30).var()
berkshire_rolling_covariance = combined_strategies_returns_df['BERKSHIRE HATHAWAY INC'].rolling(window=30).cov()
berkshire_rolling_beta = berkshire_rolling_covariance / rolling_variance
berkshire_rolling_beta.plot(figsize=(20, 10), xlim=(berkshire_rolling_beta.index.min(),combined_strategies_21day_std.index.max()), title="Berkshire Hathaway Inc. Beta")
73/136:
rolling_variance = combined_strategies_returns_df['S&P 500'].rolling(window=30).var()
berkshire_rolling_covariance = combined_strategies_returns_df['BERKSHIRE HATHAWAY INC'].rolling(window=30).cov(combined_strategies_returns_df['S&P 500'])
berkshire_rolling_beta = berkshire_rolling_covariance / rolling_variance
berkshire_rolling_beta.plot(figsize=(20, 10), xlim=(berkshire_rolling_beta.index.min(),combined_strategies_21day_std.index.max()), title="Berkshire Hathaway Inc. Beta")
73/137:
rolling_variance = combined_strategies_returns_df['S&P 500'].rolling(window=21).var()
berkshire_rolling_covariance = combined_strategies_returns_df['BERKSHIRE HATHAWAY INC'].rolling(window=21).cov(combined_strategies_returns_df['S&P 500'])
berkshire_rolling_beta = berkshire_rolling_covariance / rolling_variance
berkshire_rolling_beta.plot(figsize=(20, 10), xlim=(berkshire_rolling_beta.index.min(),combined_strategies_21day_std.index.max()), title="Berkshire Hathaway Inc. Beta")
73/138:
# Calculate Beta for a single portfolio compared to the total market (S&P 500)
# (Your graph may differ, dependent upon which portfolio you are comparing)
# YOUR CODE HERE
# beta = covariance/variance - calculate rolling variance, rolling covariance
rolling_variance = combined_strategies_returns_df['S&P 500'].rolling(window=21).var()
berkshire_rolling_covariance = combined_strategies_returns_df['BERKSHIRE HATHAWAY INC'].rolling(window=21).cov(combined_strategies_returns_df['S&P 500'])
berkshire_rolling_beta = berkshire_rolling_covariance / rolling_variance
berkshire_rolling_beta.plot(figsize=(20, 10), xlim=(berkshire_rolling_beta.index.min(),combined_strategies_21day_std.index.max()), title="Berkshire Hathaway Inc. Beta")
73/139:
# Construct a correlation table
# YOUR CODE HERE
combined_strategies_correlation = combined_strategies_returns_df.corr()
combined_strategies_correlation
combined_strategies_correlation.style.background_gradient(cmap='YlGn_r')
73/140:
ewm = combined_strategies_returns_df.ewm(halflife=21, times=pd.DatetimeIndex(times)).mean()
ewm
73/141:
ewm = combined_strategies_returns_df.ewm(halflife=21)mean()
ewm
73/142:
ewm = combined_strategies_returns_df.ewm(halflife=21).mean()
ewm
73/143:
ewm = combined_strategies_returns_df.ewm(halflife=21).mean()
ewm.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")
73/144: ewm.index.min()
73/145: ewm.index.range()
73/146: ewm.len.index()
73/147: ewm
73/148:
times = [ewm.len.index()]
ewm = combined_strategies_returns_df.ewm(halflife=21)
ewm.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")
73/149:
#times = [ewm.len.index()]
ewm = combined_strategies_returns_df.ewm(halflife=21)
ewm.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")
73/150:
#times = [ewm.len.index()]
ewm = combined_strategies_returns_df.ewm(halflife=21)
#ewm.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")
73/151: ewm
73/152: ewm()
73/153: ewm.head()
73/154:
#times = [ewm.len.index()]
ewm = combined_strategies_returns_df.ewm(halflife=21).mean()
#ewm.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")
73/155:
#times = [ewm.len.index()]
ewm = combined_strategies_returns_df.ewm(halflife=21).mean()
ewm.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")
73/156:
#times = [ewm.len.index()]
ewm = combined_strategies_returns_df.ewm(halflife=21).mean()
ewm.plot(figsize=(20, 10), title="Exponentially Weighted Average")
73/157:
#times = [ewm.len.index()]
ewm = combined_strategies_returns_df.ewm(halflife=21).mean()
ewm.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")
73/158:
#times = [ewm.len.index()]
ewm = combined_strategies_returns_df.ewm(halflife=21).mean()
ewm.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")
combined_strategies_returns_df.head()
73/159:
#times = [ewm.len.index()]
ewm = combined_strategies_returns_df.ewm(halflife=21).mean()
ewm.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")
combined_strategies_returns_df.head(20)
73/160:
#times = [ewm.len.index()]
ewm = combined_strategies_returns_df.ewm(halflife=21).mean()
ewm.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")
73/161:
#times = [ewm.len.index()]
#ewm = combined_strategies_returns_df.ewm(halflife=21).mean()
#ewm.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")
rolling_mov_avg = combined_strategies_returns_df.rolling(window=21).mean()
73/162:
#times = [ewm.len.index()]
#ewm = combined_strategies_returns_df.ewm(halflife=21).mean()
#ewm.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")
rolling_mov_avg = combined_strategies_returns_df.rolling(window=21).mean()
rolling_mov_avg.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")
73/163:
#times = [ewm.len.index()]
#ewm = combined_strategies_returns_df.ewm(halflife=21).mean()
#ewm.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")
rolling_mov_avg = combined_strategies_returns_df.rolling(window=21, min_periods=1).mean()
rolling_mov_avg.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")
73/164:
#times = [ewm.len.index()]
#ewm = combined_strategies_returns_df.ewm(halflife=21).mean()
#ewm.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")
rolling_mov_avg = combined_strategies_returns_df.rolling(window=21).mean()
rolling_mov_avg.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")
73/165:
#times = [ewm.len.index()]
#ewm = combined_strategies_returns_df.ewm(halflife=21).mean()
#ewm.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")
rolling_mov_avg = combined_strategies_returns_df.rolling(window=21, min_periods=2).mean()
rolling_mov_avg.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")
73/166:
#times = [ewm.len.index()]
#ewm = combined_strategies_returns_df.ewm(halflife=21).mean()
#ewm.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")
rolling_mov_avg = combined_strategies_returns_df.rolling(window=21).mean()
rolling_mov_avg.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")
73/167:
#times = [ewm.len.index()]
#ewm = combined_strategies_returns_df.ewm(halflife=21).mean()
#ewm.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")
rolling_mov_avg = combined_strategies_returns_df.rolling().mean()
rolling_mov_avg.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")
73/168:
#times = [ewm.len.index()]
#ewm = combined_strategies_returns_df.ewm(halflife=21).mean()
#ewm.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")
rolling_mov_avg = combined_strategies_returns_df.rolling(window=100).mean()
rolling_mov_avg.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")
73/169:
#times = [ewm.len.index()]
#ewm = combined_strategies_returns_df.ewm(halflife=21).mean()
#ewm.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")
rolling_mov_avg = combined_strategies_returns_df.rolling(window=10).mean()
rolling_mov_avg.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")
73/170:
#times = [ewm.len.index()]
ewm = combined_strategies_returns_df.ewm(halflife=21).mean()
ewm.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")
#rolling_mov_avg = combined_strategies_returns_df.rolling(window=10).mean()
#rolling_mov_avg.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")
73/171:
#times = [ewm.len.index()]
ewm = combined_strategies_returns_df.ewm(halflife=21, ignore_na=True).mean()
ewm.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")
#rolling_mov_avg = combined_strategies_returns_df.rolling(window=10).mean()
#rolling_mov_avg.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")
73/172:
#times = [ewm.len.index()]
ewm = combined_strategies_returns_df.ewm(halflife=21, ignore_na=False).mean()
ewm.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")
#rolling_mov_avg = combined_strategies_returns_df.rolling(window=10).mean()
#rolling_mov_avg.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")
73/173:
#times = [ewm.len.index()]
ewm = combined_strategies_returns_df.ewm(halflife=21).mean()
ewm.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")
#rolling_mov_avg = combined_strategies_returns_df.rolling(window=10).mean()
#rolling_mov_avg.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")
73/174:
#times = [ewm.len.index()]
ewm = combined_strategies_returns_df.ewm(halflife=21-np.log(2)/3).mean()
ewm.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")
#rolling_mov_avg = combined_strategies_returns_df.rolling(window=10).mean()
#rolling_mov_avg.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")
73/175:
#times = [ewm.len.index()]
ewm = combined_strategies_returns_df.ewm(halflife=21.mean()
ewm.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")
#rolling_mov_avg = combined_strategies_returns_df.rolling(window=10).mean()
#rolling_mov_avg.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")
73/176:
#times = [ewm.len.index()]
ewm = combined_strategies_returns_df.ewm(halflife=21).mean()
ewm.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")
#rolling_mov_avg = combined_strategies_returns_df.rolling(window=10).mean()
#rolling_mov_avg.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")
73/177:
#times = [ewm.len.index()]
#ewm = combined_strategies_returns_df.ewm(halflife=21).mean()
ewma = combined_strategies_returns_df.ewma(halflife=21)
ewma.plot(figsize=(20, 10), xlim=(ewma.index.min(),ewma.index.max()), title="Exponentially Weighted Average")
#ewm.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")
#rolling_mov_avg = combined_strategies_returns_df.rolling(window=10).mean()
#rolling_mov_avg.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")
73/178:
#times = [ewm.len.index()]
ewm = combined_strategies_returns_df.ewm(halflife=21).mean()
ewm.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")
#rolling_mov_avg = combined_strategies_returns_df.rolling(window=10).mean()
#rolling_mov_avg.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")
73/179:
combined_strategies_returns_df.std() > 0.008554
#for std in daily_std:
    #if (std > sp500_std):
        #return True
    #else:
        #return False
73/180:
sp500_std
#combined_strategies_returns_df.std() > 0.008554
combined_strategies_returns_df.std() > sp500_std
73/181:
ewm = combined_strategies_returns_df.ewm(halflife=21, adjust=false).mean()
ewm.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")
#rolling_mov_avg = combined_strategies_returns_df.rolling(window=10).mean()
#rolling_mov_avg.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")
73/182:
ewm = combined_strategies_returns_df.ewm(halflife=21, adjust=False).mean()
ewm.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")
#rolling_mov_avg = combined_strategies_returns_df.rolling(window=10).mean()
#rolling_mov_avg.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")
73/183:
ewm = combined_strategies_returns_df.ewm(halflife=21).mean()
ewm.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")
#rolling_mov_avg = combined_strategies_returns_df.rolling(window=10).mean()
#rolling_mov_avg.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")
73/184:
#ewm = combined_strategies_returns_df.ewm(halflife=21).mean()
#ewm.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")
ewm = combined_strategies_cumulative_returns_df.ewm(halflife=21).mean()
ewm.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")
#combined_strategies_cumulative_returns_df
#rolling_mov_avg = combined_strategies_returns_df.rolling(window=10).mean()
#rolling_mov_avg.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")
73/185:
ewm = combined_strategies_returns_df.ewm(halflife=100).mean()
ewm.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")

#combined_strategies_cumulative_returns_df
#rolling_mov_avg = combined_strategies_returns_df.rolling(window=10).mean()
#rolling_mov_avg.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")
73/186:
ewm = combined_strategies_returns_df.ewm(span=21).mean()
ewm.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")

#combined_strategies_cumulative_returns_df
#rolling_mov_avg = combined_strategies_returns_df.rolling(window=10).mean()
#rolling_mov_avg.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")
73/187:
ewm = combined_strategies_returns_df.ewm(span=180).mean()
ewm.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")

#combined_strategies_cumulative_returns_df
#rolling_mov_avg = combined_strategies_returns_df.rolling(window=10).mean()
#rolling_mov_avg.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")
73/188:
ewm = combined_strategies_returns_df.ewm(haflife=180).mean()
ewm.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")

#combined_strategies_cumulative_returns_df
#rolling_mov_avg = combined_strategies_returns_df.rolling(window=10).mean()
#rolling_mov_avg.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")
73/189:
ewm = combined_strategies_returns_df.ewm(halfife=180).mean()
ewm.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")

#combined_strategies_cumulative_returns_df
#rolling_mov_avg = combined_strategies_returns_df.rolling(window=10).mean()
#rolling_mov_avg.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")
73/190:
ewm = combined_strategies_returns_df.ewm(halflife=180).mean()
ewm.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")

#combined_strategies_cumulative_returns_df
#rolling_mov_avg = combined_strategies_returns_df.rolling(window=10).mean()
#rolling_mov_avg.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")
73/191:
# Determine which portfolios are riskier than the S&P 500
# YOUR CODE HERE
sp500_std = daily_std['S&P 500']
sp500_std
combined_strategies_returns_df.std() > sp500_std
73/192:
ewm = combined_strategies_returns_df.ewm(halflife=21).mean()
ewm.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")

#combined_strategies_cumulative_returns_df
#rolling_mov_avg = combined_strategies_returns_df.rolling(window=10).mean()
#rolling_mov_avg.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")
73/193:
ewm = combined_strategies_returns_df.ewm(halflife=21)
ewm.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")

#combined_strategies_cumulative_returns_df
#rolling_mov_avg = combined_strategies_returns_df.rolling(window=10).mean()
#rolling_mov_avg.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")
73/194:
ewm = combined_strategies_returns_df.ewm(halflife=21).mean()
ewm.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")

#combined_strategies_cumulative_returns_df
#rolling_mov_avg = combined_strategies_returns_df.rolling(window=10).mean()
#rolling_mov_avg.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")
73/195:
ewm = combined_strategies_returns_df.ewm(span=21, adjust=False).mean()
ewm.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")

#combined_strategies_cumulative_returns_df
#rolling_mov_avg = combined_strategies_returns_df.rolling(window=10).mean()
#rolling_mov_avg.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")
73/196:
ewm = combined_strategies_returns_df.ewm(halflife=21, adjust=False).mean()
ewm.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")

#combined_strategies_cumulative_returns_df
#rolling_mov_avg = combined_strategies_returns_df.rolling(window=10).mean()
#rolling_mov_avg.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")
75/1:
# Execute get request
requests.get(url)
75/2: import requests
75/3:
# Create variable to hold request url
url = "http://api.worldbank.org/v2/country/us/indicator/NY.GDP.MKTP.CD"
75/4:
# Add format specifier to request url
url = url + "?format=json"
75/5:
# Execute get request
requests.get(url)
76/1: import requests
76/2:
# Declare `url` variables
prog_joke_url = "https://official-joke-api.appspot.com/jokes/programming/random"
rand_joke_url = "https://official-joke-api.appspot.com/jokes/random"
cat_facts_url = "https://cat-fact.herokuapp.com/facts"
dot_spending_url = "https://api.usaspending.gov//api/v2/references/agency/456/"
us_gdp_data_url = "http://api.worldbank.org/v2/country/us?format=json"
76/3:
# Execute `GET` request with url
requests.get(url)
76/4:
# Execute `GET` request with url
url = rand_joke_url
requests.get(url)
76/5:
# Print `response_data variable`
response_data = - requests.get(url)
76/6:
# Print `response_data variable`
response_data = requests.get(url)
print(response_data)
76/7:
# Store response using `content` attribute
request_content = response_data.content
print(request_content)
76/8:
# Format data as JSON
import json
data = response_data.json()
76/9:
import json
print(json.dumps(data, indent=4))

# Use json.dumps to format data
76/10:
# Select a programming joke 
programming_joke = data['programming']
setup
punchline

# Select a cat joke from JSON output


# selected_value = data['all'][0]['text']
76/11:
# Select a programming joke 
programming_joke = data['setup']
print(setup)
punchline

# Select a cat joke from JSON output


# selected_value = data['all'][0]['text']
76/12:
import json
print(json.dumps(data, indent=4))

# Use json.dumps to format data
76/13:
# Select a programming joke 
programming_joke = data["setup"]
print(setup)
punchline

# Select a cat joke from JSON output


# selected_value = data['all'][0]['text']
76/14:
# Select a programming joke 
setup = data["setup"]
print(setup)
punchline

# Select a cat joke from JSON output


# selected_value = data['all'][0]['text']
76/15:
# Select a programming joke 
setup = data["setup"]
print(setup)
punchline = data["punchline"]
print(punchline)

# Select a cat joke from JSON output


# selected_value = data['all'][0]['text']
77/1:
import requests
import json
77/2:
# Declare request url to create deck id
create_deck_url = "https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=6"

# Execute create deck url
77/3:
# Declare draw_cards_url and shuffle_deck_url
# Use string interpolation to incorporate the deck_id
draw_cards_url = f"https://deckofcardsapi.com/api/deck/{deck_id}/draw/?count=2"
shuffle_deck_url = f"https://deckofcardsapi.com/api/deck/{deck_id}/shuffle/"
print(draw_cards_url)
print(shuffle_deck_url)
77/4:
# Select deck_id

print(deck_id)
77/5:
# Declare request url to create deck id
create_deck_url = "https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=6"

# Execute create deck url
deal = requests.get(create_deck_url).json()
77/6:
# Declare request url to create deck id
create_deck_url = "https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=6"

# Execute create deck url
card_deal = requests.get(create_deck_url).json()
print(json.dumps(card_deal, indent=4))
77/7:
# Select deck_id
card_deal[deck_id]

print(deck_id)
77/8:
# Select deck_id
card_deal["deck_id"]

print(deck_id)
77/9:
# Select deck_id
card_deal["deck_id"]

print("deck_id")
77/10:
# Select deck_id
card_deal["deck_id"]

print(card_deal)
77/11:
# Select deck_id
card_deal["deck_id"]
77/12:
# Declare draw_cards_url and shuffle_deck_url
# Use string interpolation to incorporate the deck_id
draw_cards_url = f"https://deckofcardsapi.com/api/deck/{deck_id}/draw/?count=2"
shuffle_deck_url = f"https://deckofcardsapi.com/api/deck/{deck_id}/shuffle/"
print(draw_cards_url)
print(shuffle_deck_url)
77/13:
# Declare draw_cards_url and shuffle_deck_url
# Use string interpolation to incorporate the deck_id
draw_cards_url = f"https://deckofcardsapi.com/api/deck/yxgd4v08ns1a/draw/?count=2"
shuffle_deck_url = f"https://deckofcardsapi.com/api/deck/yxgd4v08ns1a/shuffle/"
print(draw_cards_url)
print(shuffle_deck_url)
77/14:
# Draw two cards
cards = requests.get(draw_cards_url).json()
print(json.dumps(draw_cards_url, indent=4))
77/15:
# Declare draw_cards_url and shuffle_deck_url
# Use string interpolation to incorporate the deck_id
draw_cards_url = f"https://deckofcardsapi.com/api/deck/yxgd4v08ns1a/draw/?count=2"
shuffle_deck_url = f"https://deckofcardsapi.com/api/deck/yxgd4v08ns1a/shuffle/"
print(draw_cards_url)
print(shuffle_deck_url)
77/16:
# Draw two cards
cards = requests.get(draw_cards_url).json()
print(json.dumps(draw_cards_url, indent=4))
77/17:
# Draw two cards
cards = requests.get(draw_cards_url).json()
print(json.dumps(draw_cards_url, indent=4))
print(cards)
77/18:
# Declare request url to create deck id
create_deck_url = "https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=6"

# Execute create deck url
deck_data = requests.get(create_deck_url).json()
print(json.dumps(deck_data, indent=4))
77/19:
# Select deck_id
deck_data["deck_id"]
77/20:
# Declare draw_cards_url and shuffle_deck_url
# Use string interpolation to incorporate the deck_id
draw_cards_url = f"https://deckofcardsapi.com/api/deck/97934hgm47b2/draw/?count=2"
shuffle_deck_url = f"https://deckofcardsapi.com/api/deck/97934hgm47b2/shuffle/"
print(draw_cards_url)
print(shuffle_deck_url)
77/21:
# Draw two cards
cards = requests.get(draw_cards_url).json()
print(json.dumps(draw_cards_url, indent=4))
print(cards)
77/22:
# Select deck_id
deck_id = deck_data["deck_id"]
77/23:
# Declare draw_cards_url and shuffle_deck_url
# Use string interpolation to incorporate the deck_id
draw_cards_url = f"https://deckofcardsapi.com/api/deck/{deck_id}/draw/?count=2"
shuffle_deck_url = f"https://deckofcardsapi.com/api/deck/{deck_id}/shuffle/"
print(draw_cards_url)
print(shuffle_deck_url)
77/24:
# Draw two cards
cards = requests.get(draw_cards_url).json()
print(json.dumps(draw_cards_url, indent=4))
print(cards)
77/25:
# Select returned card's value and suit (i.e. 3 of clubs)
player_1_card_1_suit = cards['cards'][0]['suit']
player_1_card_1_value = cards['cards'][0]['value']
# Print player cards
print(player_1_card_1)
print(player_1_card_2)
77/26:
# Select returned card's value and suit (i.e. 3 of clubs)
player_1_card_1_suit = cards['cards'][0]['suit']
player_1_card_1_value = cards['cards'][0]['value']
# Print player cards
73/197:
ewm = combined_strategies_returns_df.ewm(halflife=21, adjust=False).std()
ewm.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")

#combined_strategies_cumulative_returns_df
#rolling_mov_avg = combined_strategies_returns_df.rolling(window=10).mean()
#rolling_mov_avg.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")
73/198:
ewm_std = combined_strategies_returns_df.ewm(halflife=21, adjust=False).std()
ewm.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average (.std)")
ewm_mean = combined_strategies_returns_df.ewm(halflife=21, adjust=False).mean()
ewm.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average (.mean)")
#combined_strategies_cumulative_returns_df
#rolling_mov_avg = combined_strategies_returns_df.rolling(window=10).mean()
#rolling_mov_avg.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")
73/199:
ewm_std = combined_strategies_returns_df.ewm(halflife=21, adjust=False).std()
ewm.plot(figsize=(20, 10), xlim=(ewm_std.index.min(),ewm_std.index.max()), title="Exponentially Weighted Average (.std)")
ewm_mean = combined_strategies_returns_df.ewm(halflife=21, adjust=False).mean()
ewm.plot(figsize=(20, 10), xlim=(ewm_mean.index.min(),ewm_mean.index.max()), title="Exponentially Weighted Average (.mean)")
#combined_strategies_cumulative_returns_df
#rolling_mov_avg = combined_strategies_returns_df.rolling(window=10).mean()
#rolling_mov_avg.plot(figsize=(20, 10), xlim=(ewm.index.min(),ewm.index.max()), title="Exponentially Weighted Average")
73/200:
ewm_std = combined_strategies_returns_df.ewm(halflife=21, adjust=False).std()
ewm.plot(figsize=(20, 10), xlim=(ewm_std.index.min(),ewm_std.index.max()), title="Exponentially Weighted Average (.std)")
#ewm_mean = combined_strategies_returns_df.ewm(halflife=21, adjust=False).mean()
#ewm.plot(figsize=(20, 10), xlim=(ewm_mean.index.min(),ewm_mean.index.max()), title="Exponentially Weighted Average (.mean)")
73/201:
# Calculate a rolling window using the exponentially weighted moving average. 
# YOUR CODE HERE
ewm_std = combined_strategies_returns_df.ewm(halflife=21, adjust=False).std()
ewm.plot(figsize=(20, 10), xlim=(ewm_std.index.min(),ewm_std.index.max()), title="Exponentially Weighted Average (.std)")
#ewm_mean = combined_strategies_returns_df.ewm(halflife=21, adjust=False).mean()
#ewm.plot(figsize=(20, 10), xlim=(ewm_mean.index.min(),ewm_mean.index.max()), title="Exponentially Weighted Average (.mean)")
73/202: sharpe_ratios = (combined_strategies_returns_df.mean() * 252) / (combined_strategies_returns_df.std() * np.sqrt(252))
73/203:
sharpe_ratios = (combined_strategies_returns_df.mean() * 252) / (combined_strategies_returns_df.std() * np.sqrt(252))
sharpe_ratios
73/204:
# Calculate annualized Sharpe Ratios
# YOUR CODE HERE
sharpe_ratios = (combined_strategies_returns_df.mean() * 252) / (combined_strategies_returns_df.std() * np.sqrt(252))
sharpe_ratios
73/205:
# Visualize the sharpe ratios as a bar plot
# YOUR CODE HERE
sharpe_ratios.plot.box()
73/206:
# Visualize the sharpe ratios as a bar plot
# YOUR CODE HERE
sharpe_ratios.plot(kind=bar, title="Sharpe Ratios")
73/207:
# Visualize the sharpe ratios as a bar plot
# YOUR CODE HERE
sharpe_ratios.plot(kind="bar", title="Sharpe Ratios")
73/208:
# Calculate Beta for a single portfolio compared to the total market (S&P 500)
# (Your graph may differ, dependent upon which portfolio you are comparing)
# YOUR CODE HERE
# beta = covariance/variance - calculate rolling variance, rolling covariance
rolling_variance = combined_strategies_returns_df['S&P 500'].rolling(window=60).var()
berkshire_rolling_covariance = combined_strategies_returns_df['BERKSHIRE HATHAWAY INC'].rolling(window=60).cov(combined_strategies_returns_df['S&P 500'])
berkshire_rolling_beta = berkshire_rolling_covariance / rolling_variance
berkshire_rolling_beta.plot(figsize=(20, 10), xlim=(berkshire_rolling_beta.index.min(),combined_strategies_21day_std.index.max()), title="Berkshire Hathaway Inc. Beta")
73/209:
# Read the first stock
# YOUR CODE HERE
# TSLA
tsla_csv = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/pandas_homework/Starter_Code/Resources/wtsla_historical.csv') 
tsla_historical = pd.read_csv(tsla_csv, index_col="Date", infer_datetime_format=True, parse_dates=True)
tsla_historical.sort_index(inplace=True)
tsla_historical.head()
73/210:
# Read the first stock
# YOUR CODE HERE
# TSLA
tsla_csv = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/pandas_homework/Starter_Code/Resources/tsla_historical.csv') 
tsla_historical = pd.read_csv(tsla_csv, index_col="Date", infer_datetime_format=True, parse_dates=True)
tsla_historical.sort_index(inplace=True)
tsla_historical.head()
73/211:
# Read the first stock
# YOUR CODE HERE
# TSLA
tsla_csv = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/pandas_homework/Starter_Code/Resources/tsla_historical.csv') 
tsla_historical = pd.read_csv(tsla_csv, index_col="Date", infer_datetime_format=True, parse_dates=True)
tsla_historical.sort_index(inplace=True)
tsla_historical.index = tsla_historical.index.date
tsla_historical.head()
73/212:
# Read the second stock
# YOUR CODE HERE
# FB
fb_csv = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/pandas_homework/Starter_Code/Resources/fb_historical.csv') 
fb_historical = pd.read_csv(tsla_csv, index_col="Date", infer_datetime_format=True, parse_dates=True)
fb_historical.sort_index(inplace=True)
fb_historical.index = fb_historical.index.date
fb_historical.head()
73/213:
# Read the second stock
# YOUR CODE HERE
# FB
fb_csv = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/pandas_homework/Starter_Code/Resources/fb_historical.csv') 
fb_historical = pd.read_csv(tsla_csv, index_col="Date", infer_datetime_format=True, parse_dates=True)
fb_historical.sort_index(inplace=True)
fb_historical.index = fb_historical.index.date
fb_historical.head()
73/214:
# Read the second stock
# YOUR CODE HERE
# FB
fb_csv = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/pandas_homework/Starter_Code/Resources/fb_historical.csv') 
fb_historical = pd.read_csv(fb_csv, index_col="Date", infer_datetime_format=True, parse_dates=True)
fb_historical.sort_index(inplace=True)
fb_historical.index = fb_historical.index.date
fb_historical.head()
73/215:
# Read the first stock
# YOUR CODE HERE
# TSLA
tsla_csv = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/pandas_homework/Starter_Code/Resources/tsla_historical.csv') 
tsla_historical = pd.read_csv(tsla_csv, index_col="Date", infer_datetime_format=True, parse_dates=True)
tsla_historical.sort_index(inplace=True)
tsla_historical.index = tsla_historical.index.date
tsla_historical.head()
73/216:
# Read the second stock
# YOUR CODE HERE
# FB
fb_csv = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/pandas_homework/Starter_Code/Resources/fb_historical.csv') 
fb_historical = pd.read_csv(fb_csv, index_col="Date", infer_datetime_format=True, parse_dates=True)
fb_historical.sort_index(inplace=True)
fb_historical.index = fb_historical.index.date
fb_historical.head()
73/217:
# Read the third stock
# YOUR CODE HERE
# JPM
jpm_csv = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/pandas_homework/Starter_Code/Resources/jpm_historical.csv') 
jpm_historical = pd.read_csv(jpm_csv, index_col="Date", infer_datetime_format=True, parse_dates=True)
jpm_historical.sort_index(inplace=True)
jpm_historical.index = jpm_historical.index.date
jpm_historical.head()
73/218:
# Concatenate all stocks into a single DataFrame
# YOUR CODE HERE
custom_portfolio_historical = pd.concat([tsla_historical, fb_historical, jpm_historical], axis='columns', join='inner')
custom_portfolio_historical.head()
73/219:
# Pivot so that each column of prices represents a unique symbol
# YOUR CODE HERE
custom_portfolio_historical = custom_portfolio_historical.pivot(index='Date', columns='Symbol', values=('TSLA', 'FB', 'JPM'))
73/220:
# Pivot so that each column of prices represents a unique symbol
# YOUR CODE HERE
custom_portfolio_historical = custom_portfolio_historical.pivot(index='Date', columns='Symbol', values=['TSLA', 'FB', 'JPM'])
73/221:
# Reset the index
# YOUR CODE HERE
custom_portfolio_historical.reset_index(level="Date")
custom_portfolio_historical.head()
73/222:
# Reset the index
# YOUR CODE HERE
custom_portfolio_historical.reset_index()
custom_portfolio_historical.head()
73/223:
# Reset the index
# YOUR CODE HERE
custom_portfolio_historical.reset_index()
custom_portfolio_historical.head()
73/224:
# Reset the index
# YOUR CODE HERE
custom_portfolio_historical.reset_index(drop=True)
custom_portfolio_historical.head()
73/225:
# Concatenate all stocks into a single DataFrame
# YOUR CODE HERE
custom_portfolio_historical = pd.concat([tsla_historical, fb_historical, jpm_historical], axis='columns', join='inner')
custom_portfolio_historical.head()
73/226:
# Reset the index
# YOUR CODE HERE
custom_portfolio_historical.reset_index(inplace=True)
custom_portfolio_historical.head()
73/227:
# Reset the index
# YOUR CODE HERE
custom_portfolio_historical.reset_Date(inplace=True)
custom_portfolio_historical.head()
73/228:
# Read the first stock
# YOUR CODE HERE
# TSLA
tsla_csv = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/pandas_homework/Starter_Code/Resources/tsla_historical.csv') 
tsla_historical = pd.read_csv(tsla_csv, index_col="Date", infer_datetime_format=True, parse_dates=True)
tsla_historical.sort_index(inplace=True)
tsla_historical.index = tsla_historical.index.date
tsla_historical.head()
73/229:
# Read the second stock
# YOUR CODE HERE
# FB
fb_csv = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/pandas_homework/Starter_Code/Resources/fb_historical.csv') 
fb_historical = pd.read_csv(fb_csv, index_col="Date", infer_datetime_format=True, parse_dates=True)
fb_historical.sort_index(inplace=True)
fb_historical.index = fb_historical.index.date
fb_historical.head()
73/230:
# Read the third stock
# YOUR CODE HERE
# JPM
jpm_csv = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/pandas_homework/Starter_Code/Resources/jpm_historical.csv') 
jpm_historical = pd.read_csv(jpm_csv, index_col="Date", infer_datetime_format=True, parse_dates=True)
jpm_historical.sort_index(inplace=True)
jpm_historical.index = jpm_historical.index.date
jpm_historical.head()
73/231:
# Concatenate all stocks into a single DataFrame
# YOUR CODE HERE
custom_portfolio_historical = pd.concat([tsla_historical, fb_historical, jpm_historical], axis='columns', join='inner')
custom_portfolio_historical.head()
73/232:
# Reset the index
# YOUR CODE HERE
custom_portfolio_historical.reset_Date(inplace=True)
custom_portfolio_historical.head()
73/233:
# Read the third stock
# YOUR CODE HERE
# JPM
jpm_csv = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/pandas_homework/Starter_Code/Resources/jpm_historical.csv') 
jpm_historical = pd.read_csv(jpm_csv, index_col="Date", infer_datetime_format=True, parse_dates=True)
jpm_historical.sort_index(inplace=True)
jpm_historical.index = jpm_historical.index.date
jpm_historical.head()
73/234:
# Concatenate all stocks into a single DataFrame
# YOUR CODE HERE
custom_portfolio_historical = pd.concat([tsla_historical, fb_historical, jpm_historical], axis='columns', join='inner')
custom_portfolio_historical.head()
73/235:
# Reset the index
# YOUR CODE HERE
custom_portfolio_historical.reset_index(inplace=True)
custom_portfolio_historical.head()
73/236:
# Pivot so that each column of prices represents a unique symbol
# YOUR CODE HERE
custom_portfolio_historical = custom_portfolio_historical.pivot(index='Date', columns='Symbol', values=['TSLA', 'FB', 'JPM'])
73/237:
# Read the third stock
# YOUR CODE HERE
# JPM
jpm_csv = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/pandas_homework/Starter_Code/Resources/jpm_historical.csv') 
jpm_historical = pd.read_csv(jpm_csv, index_col="Date", infer_datetime_format=True, parse_dates=True)
jpm_historical.sort_index(inplace=True)
jpm_historical.index = jpm_historical.index.date
jpm_historical.head()
73/238:
# Read the first stock
# YOUR CODE HERE
# TSLA
tsla_csv = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/pandas_homework/Starter_Code/Resources/tsla_historical.csv') 
tsla_historical = pd.read_csv(tsla_csv, index_col="Date", infer_datetime_format=True, parse_dates=True)
tsla_historical.sort_index(inplace=True)
tsla_historical.index = tsla_historical.index.date
tsla_historical.head()
73/239:
# Read the second stock
# YOUR CODE HERE
# FB
fb_csv = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/pandas_homework/Starter_Code/Resources/fb_historical.csv') 
fb_historical = pd.read_csv(fb_csv, index_col="Date", infer_datetime_format=True, parse_dates=True)
fb_historical.sort_index(inplace=True)
fb_historical.index = fb_historical.index.date
fb_historical.head()
73/240:
# Concatenate all stocks into a single DataFrame
# YOUR CODE HERE
custom_portfolio_historical = pd.concat([tsla_historical, fb_historical, jpm_historical], axis='columns', join='inner')
custom_portfolio_historical.head()
73/241:
# Concatenate all stocks into a single DataFrame
# YOUR CODE HERE
custom_portfolio_historical = pd.concat([tsla_historical, fb_historical, jpm_historical], axis='columns', join='inner')
custom_portfolio_historical.head()
73/242:
# Concatenate all stocks into a single DataFrame
# YOUR CODE HERE
custom_portfolio_historical = pd.concat([tsla_historical, fb_historical, jpm_historical], axis='columns', join='inner')
custom_portfolio_historical.head()
73/243:
# Read the first stock
# YOUR CODE HERE
# TSLA
tsla_csv = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/pandas_homework/Starter_Code/Resources/tsla_historical.csv') 
tsla_historical = pd.read_csv(tsla_csv, index_col="Date", infer_datetime_format=True, parse_dates=True)
tsla_historical.sort_index(inplace=True)
tsla_historical.index = tsla_historical.index.date
tsla_historical.head()
73/244:
# Read the second stock
# YOUR CODE HERE
# FB
fb_csv = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/pandas_homework/Starter_Code/Resources/fb_historical.csv') 
fb_historical = pd.read_csv(fb_csv, index_col="Date", infer_datetime_format=True, parse_dates=True)
fb_historical.sort_index(inplace=True)
fb_historical.index = fb_historical.index.date
fb_historical.head()
73/245:
# Read the third stock
# YOUR CODE HERE
# JPM
jpm_csv = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/pandas_homework/Starter_Code/Resources/jpm_historical.csv') 
jpm_historical = pd.read_csv(jpm_csv, index_col="Date", infer_datetime_format=True, parse_dates=True)
jpm_historical.sort_index(inplace=True)
jpm_historical.index = jpm_historical.index.date
jpm_historical.head()
73/246:
# Read the third stock
# YOUR CODE HERE
# JPM
jpm_csv = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/pandas_homework/Starter_Code/Resources/jpm_historical.csv') 
jpm_historical = pd.read_csv(jpm_csv, index_col="Date", infer_datetime_format=True, parse_dates=True)
jpm_historical.sort_index(inplace=True)
jpm_historical.index = jpm_historical.index.date
jpm_historical.head(5)
73/247:
# Read the third stock
# YOUR CODE HERE
# JPM
jpm_csv = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/pandas_homework/Starter_Code/Resources/jpm_historical.csv') 
jpm_historical = pd.read_csv(jpm_csv, index_col="Date", infer_datetime_format=True, parse_dates=True)
jpm_historical.sort_index(inplace=True)
jpm_historical.index = jpm_historical.index.date
jpm_historical.head()
73/248:
# Concatenate all stocks into a single DataFrame
# YOUR CODE HERE
custom_portfolio_historical = pd.concat([tsla_historical, fb_historical, jpm_historical], axis='columns', join='inner')
custom_portfolio_historical.head()
73/249:
# Reset the index
# YOUR CODE HERE
custom_portfolio_historical.reset_index(inplace=True)
custom_portfolio_historical.head()
73/250:
# Pivot so that each column of prices represents a unique symbol
# YOUR CODE HERE
custom_portfolio_historical = custom_portfolio_historical.pivot(index='index', columns='Symbol', values=['TSLA', 'FB', 'JPM'])
73/251:
# Concatenate all stocks into a single DataFrame
# YOUR CODE HERE
custom_portfolio_historical = pd.concat([tsla_historical, fb_historical, jpm_historical], axis='columns', join='inner')
custom_portfolio_historical.head()
73/252:
# Reset the index
# YOUR CODE HERE
custom_portfolio_historical.reset_index(drop=True), inplace=True)
custom_portfolio_historical.head()
73/253:
# Reset the index
# YOUR CODE HERE
custom_portfolio_historical.reset_index(drop=True, inplace=True)
custom_portfolio_historical.head()
73/254:
# Concatenate all stocks into a single DataFrame
# YOUR CODE HERE
custom_portfolio_historical = pd.concat([tsla_historical, fb_historical, jpm_historical], axis='columns', join='inner')
custom_portfolio_historical.head()
73/255:
# Read the first stock
# YOUR CODE HERE
# TSLA
tsla_csv = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/pandas_homework/Starter_Code/Resources/tsla_historical.csv') 
tsla_historical = pd.read_csv(tsla_csv, index_col="Date", infer_datetime_format=True, parse_dates=True)
tsla_historical.sort_index(inplace=True)
tsla_historical.index = tsla_historical.index.date
tsla_historical.head()
73/256:
# Read the second stock
# YOUR CODE HERE
# FB
fb_csv = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/pandas_homework/Starter_Code/Resources/fb_historical.csv') 
fb_historical = pd.read_csv(fb_csv, index_col="Date", infer_datetime_format=True, parse_dates=True)
fb_historical.sort_index(inplace=True)
fb_historical.index = fb_historical.index.date
fb_historical.head()
73/257:
# Read the third stock
# YOUR CODE HERE
# JPM
jpm_csv = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/pandas_homework/Starter_Code/Resources/jpm_historical.csv') 
jpm_historical = pd.read_csv(jpm_csv, index_col="Date", infer_datetime_format=True, parse_dates=True)
jpm_historical.sort_index(inplace=True)
jpm_historical.index = jpm_historical.index.date
jpm_historical.head()
73/258:
# Concatenate all stocks into a single DataFrame
# YOUR CODE HERE
custom_portfolio_historical = pd.concat([tsla_historical, fb_historical, jpm_historical], axis='columns', join='inner')
custom_portfolio_historical.head()
73/259:
# Reset the index
# YOUR CODE HERE
custom_portfolio_historical.reset_index()
custom_portfolio_historical.head()
73/260:
# Pivot so that each column of prices represents a unique symbol
# YOUR CODE HERE
custom_portfolio_historical = custom_portfolio_historical.pivot_table(index='Date', columns='Symbol', values="Close")
73/261:
# Reset the index
# YOUR CODE HERE
custom_portfolio_historical.reset_index(inplace=True)
custom_portfolio_historical.head()
73/262:
# Read the third stock
# YOUR CODE HERE
# JPM
jpm_csv = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/pandas_homework/Starter_Code/Resources/jpm_historical.csv') 
jpm_historical = pd.read_csv(jpm_csv, index_col="Date", infer_datetime_format=True, parse_dates=True)
jpm_historical.sort_index(inplace=True)
#jpm_historical.index = jpm_historical.index.date
jpm_historical.head()
73/263:
# Read the third stock
# YOUR CODE HERE
# JPM
jpm_csv = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/pandas_homework/Starter_Code/Resources/jpm_historical.csv') 
jpm_historical = pd.read_csv(jpm_csv, index_col="Date", infer_datetime_format=True, parse_dates=True)
jpm_historical.sort_index(inplace=True)
jpm_historical.index = jpm_historical.index.date
jpm_historical.head()
73/264:
# Read the first stock
# YOUR CODE HERE
# TSLA
tsla_csv = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/pandas_homework/Starter_Code/Resources/tsla_historical.csv') 
tsla_historical = pd.read_csv(tsla_csv, index_col="Date", infer_datetime_format=True, parse_dates=True)
tsla_historical.sort_index(inplace=True)
tsla_historical.index = tsla_historical.index.date
tsla_historical.index.names = ['Date']
tsla_historical.head()
73/265:
# Read the second stock
# YOUR CODE HERE
# FB
fb_csv = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/pandas_homework/Starter_Code/Resources/fb_historical.csv') 
fb_historical = pd.read_csv(fb_csv, index_col="Date", infer_datetime_format=True, parse_dates=True)
fb_historical.sort_index(inplace=True)
fb_historical.index = fb_historical.index.date
fb_historical.index.names = ['Date']
fb_historical.head()
73/266:
# Read the third stock
# YOUR CODE HERE
# JPM
jpm_csv = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/pandas_homework/Starter_Code/Resources/jpm_historical.csv') 
jpm_historical = pd.read_csv(jpm_csv, index_col="Date", infer_datetime_format=True, parse_dates=True)
jpm_historical.sort_index(inplace=True)
jpm_historical.index = jpm_historical.index.date
jpm_historical.index.names = ['Date']
jpm_historical.head()
73/267:
# Concatenate all stocks into a single DataFrame
# YOUR CODE HERE
custom_portfolio_historical = pd.concat([tsla_historical, fb_historical, jpm_historical], axis='columns', join='inner')
custom_portfolio_historical.head()
73/268:
# Reset the index
# YOUR CODE HERE
custom_portfolio_historical.reset_index(inplace=True)
custom_portfolio_historical.head()
73/269:
# Pivot so that each column of prices represents a unique symbol
# YOUR CODE HERE
custom_portfolio_historical = custom_portfolio_historical.pivot_table(index='Date', columns='Symbol', values="Close")
73/270:
# Pivot so that each column of prices represents a unique symbol
# YOUR CODE HERE
custom_portfolio_historical = custom_portfolio_historical.pivot_table(index='Date', columns='Symbol', values="Close")
custom_portfolio_historical.head()
73/271:
# Pivot so that each column of prices represents a unique symbol
# YOUR CODE HERE
custom_portfolio_historical.groupby(['Symbol'])
#custom_portfolio_historical = custom_portfolio_historical.pivot_table(index='Date', columns='Symbol', values="Close")
#custom_portfolio_historical.head()
73/272:
# Pivot so that each column of prices represents a unique symbol
# YOUR CODE HERE
custom_portfolio_historical.groupby('Symbol')
#custom_portfolio_historical = custom_portfolio_historical.pivot_table(index='Date', columns='Symbol', values="Close")
#custom_portfolio_historical.head()
73/273:
# Reset the index
# YOUR CODE HERE
custom_portfolio_historical.reset_index(inplace=True)
custom_portfolio_historical.columns = ['Date', 'Close', 'TSLA', 'Close', 'FB', 'Clos', 'JPM']
custom_portfolio_historical.head()
73/274:
# Reset the index
# YOUR CODE HERE
custom_portfolio_historical.reset_index(inplace=True)
custom_portfolio_historical.columns = ['Date', 'Close', 'TSLA', 'Close', 'FB', 'Close', 'JPM']
custom_portfolio_historical.head()
73/275:
# Reset the index
# YOUR CODE HERE
custom_portfolio_historical.reset_index(inplace=True)
#custom_portfolio_historical.columns = ['Date', 'Close', 'TSLA', 'Close', 'FB', 'Close', 'JPM']
custom_portfolio_historical.head()
73/276:
# Concatenate all stocks into a single DataFrame
# YOUR CODE HERE
custom_portfolio_historical = pd.concat([tsla_historical, fb_historical, jpm_historical], axis='columns', join='inner')
custom_portfolio_historical.head()
73/277:
# Reset the index
# YOUR CODE HERE
custom_portfolio_historical.reset_index(inplace=True)
#custom_portfolio_historical.columns = ['Date', 'Close', 'TSLA', 'Close', 'FB', 'Close', 'JPM']
custom_portfolio_historical.head()
73/278:
# Concatenate all stocks into a single DataFrame
# YOUR CODE HERE
custom_portfolio_historical = pd.concat([tsla_historical, fb_historical, jpm_historical], axis='columns', join='inner')
custom_portfolio_historical.head()
73/279:
# Reset the index
# YOUR CODE HERE
custom_portfolio_historical.reset_index(inplace=True)
custom_portfolio_historical.columns = ['Date', 'Close', 'TSLA', 'Close', 'FB', 'Close', 'JPM']
custom_portfolio_historical.head()
78/1:
# Initial imports
from dotenv import load_dotenv
78/2:
# Initial imports
from dotenv import load_dotenv
import os
78/3: load_dotenv()
78/4: load_dotenv()
78/5: api_key = os.getenv("QUANDL_API_KEY")
78/6: print(api_key)
78/7: api_key(type)
78/8: print(type)
78/9: print(type(api_key))
80/1: custom_portfolio_historical.groupby('Symbol')
80/2: symbol_df = custom_portfolio_historical.groupby('Symbol')
81/1:
# Reset the index
# YOUR CODE HERE
custom_portfolio_historical.reset_index(inplace=True)
custom_portfolio_historical.columns = ['Date', 'Close', 'TSLA', 'Close', 'FB', 'Close', 'JPM']
custom_portfolio_historical.head()
81/2:
import pandas as pd
import numpy as np
import datetime as dt
from pathlib import Path
import seaborn as sns
import matplotlib.pyplot as plt
%matplotlib inline
81/3:
# Reading whale returns
whale_returns_csv = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/pandas_homework/Starter_Code/Resources/whale_returns.csv')
whale_returns_df = pd.read_csv(whale_returns_csv, index_col="Date", infer_datetime_format=True, parse_dates=True)
whale_returns_df.sort_index(inplace=True)
whale_returns_df.head()
# YOUR CODE HERE
81/4:
# Count nulls
# YOUR CODE HERE
whale_returns_df.isnull().sum()
81/5:
# Drop nulls
# YOUR CODE HERE
whale_returns_df = whale_returns_df.dropna()
whale_returns_df.isnull().sum()
81/6:
# Reading algorithmic returns
algo_returns_csv = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/pandas_homework/Starter_Code/Resources/algo_returns.csv')
# YOUR CODE HERE
algo_returns_df = pd.read_csv(algo_returns_csv, index_col="Date", infer_datetime_format=True, parse_dates=True)
algo_returns_df.sort_index(inplace=True)
algo_returns_df.head()
81/7:
# Count nulls
# YOUR CODE HERE
algo_returns_df.isnull().sum()
81/8:
# Drop nulls
# YOUR CODE HERE
algo_returns_df = algo_returns_df.dropna()
algo_returns_df.isnull().sum()
81/9:
# Reading S&P 500 Closing Prices
sp500_history_csv = Path('C:/Users/phill/OneDrive/Desktop/CU_FinTech/pandas_homework/Starter_Code/Resources/sp500_history.csv')
# YOUR CODE HERE
sp500_df = pd.read_csv(sp500_history_csv, index_col="Date", infer_datetime_format=True, parse_dates=True)
sp500_df.sort_index(inplace=True)
sp500_df.head()
81/10:
# Check Data Types
# YOUR CODE HERE
sp500_df.dtypes
81/11:
# Fix Data Types
# YOUR CODE HERE
#get rid of $ sign
sp500_df['Close'] = sp500_df['Close'].str.replace('$', '')
sp500_df.head()
sp500_df['Close'] = sp500_df['Close'].astype('float')
sp500_df.dtypes
81/12:
# Calculate Daily Returns
# YOUR CODE HERE
sp500_daily_returns = sp500_df.pct_change()
sp500_daily_returns.head()
81/13:
# Drop nulls
# YOUR CODE HERE
sp500_daily_returns.isnull().sum()
sp500_daily_returns.dropna(inplace=True)
sp500_daily_returns.isnull().sum()
sp500_daily_returns.head()
81/14:
# Rename Column
# YOUR CODE HERE
sp500_daily_returns.columns = ['S&P 500']
sp500_daily_returns.head()
81/15:
# Concatenate all DataFrames into a single DataFrame
# YOUR CODE HERE
combined_strategies_returns_df = pd.concat([whale_returns_df, algo_returns_df, sp500_daily_returns], axis="columns", join="inner")
combined_strategies_returns_df.head()
combined_strategies_returns_df.describe
81/16:
# Plot daily returns
# YOUR CODE HERE
#combined_strategies_returns_ITD_df
combined_strategies_returns_df.plot(figsize=(20, 10), xlim=(combined_strategies_returns_df.index.min(),combined_strategies_returns_df.index.max()), title='Daily Returns')
81/17:
#Does any portfolio outperform the S&P 500?
## Yes, Algo 1 and Berkshire Hathway produced cumulative returns in excess of the S&P 500. 
combined_strategies_cumulative_returns_df.sum().sort_values()
81/18:
# Plot cumulative returns
# YOUR CODE HERE
combined_strategies_cumulative_returns_df = (1 + combined_strategies_returns_df).cumprod()
combined_strategies_cumulative_returns_df.plot(figsize=(20, 10), xlim=(combined_strategies_cumulative_returns_df.index.min(),combined_strategies_cumulative_returns_df.index.max()), title="Cumulative Returns")
combined_strategies_cumulative_returns_df.describe()
81/19:
#Does any portfolio outperform the S&P 500?
## Yes, Algo 1 and Berkshire Hathway produced cumulative returns in excess of the S&P 500. 
combined_strategies_cumulative_returns_df.sum().sort_values()
81/20:
# Box plot to visually show risk
# YOUR CODE HERE
combined_strategies_returns_df.plot.box(figsize=(20, 10), title='Portfolio Risk')
81/21:
# Daily Standard Deviations
# Calculate the standard deviation for each portfolio. 
# Which portfolios are riskier than the S&P 500?
# YOUR CODE HERE
daily_std = combined_strategies_returns_df.std()
daily_std
81/22:
# Determine which portfolios are riskier than the S&P 500
# YOUR CODE HERE
sp500_std = daily_std['S&P 500']
sp500_std
combined_strategies_returns_df.std() > sp500_std
81/23:
# Calculate the annualized standard deviation (252 trading days)
# YOUR CODE HERE
annualized_std = combined_strategies_returns_df.std() * np.sqrt(252)
annualized_std
81/24:
# Calculate and plot the rolling standard deviation for
# the S&P 500 and whale portfolios using a 21 trading day window
# YOUR CODE HERE
combined_strategies_21day_std = combined_strategies_returns_df.rolling(window=21).std()
combined_strategies_21day_std.plot(figsize=(20, 10), xlim=(combined_strategies_21day_std.index.min(),combined_strategies_21day_std.index.max()), title="21 Day Rolling Standard Deviation")
81/25:
# Construct a correlation table
# YOUR CODE HERE
combined_strategies_correlation = combined_strategies_returns_df.corr()
combined_strategies_correlation
combined_strategies_correlation.style.background_gradient(cmap='YlGn_r')
81/26:
# Calculate a rolling window using the exponentially weighted moving average. 
# YOUR CODE HERE
ewm_std = combined_strategies_returns_df.ewm(halflife=21, adjust=False).std()
ewm.plot(figsize=(20, 10), xlim=(ewm_std.index.min(),ewm_std.index.max()), title="Exponentially Weighted Average (.std)")
#code below is for ewm using .mean . I spoke with Jeff in TA office hours and the code below is what I originally had. Jeff mentioned that there would be a discussion among the TA's.
#ewm_mean = combined_strategies_returns_df.ewm(halflife=21, adjust=False).mean()
#ewm.plot(figsize=(20, 10), xlim=(ewm_mean.index.min(),ewm_mean.index.max()), title="Exponentially Weighted Average (.mean)")
81/27:
# Calculate Beta for a single portfolio compared to the total market (S&P 500)
# (Your graph may differ, dependent upon which portfolio you are comparing)
# YOUR CODE HERE
# beta = covariance/variance - calculate rolling variance, rolling covariance
rolling_variance = combined_strategies_returns_df['S&P 500'].rolling(window=60).var()
berkshire_rolling_covariance = combined_strategies_returns_df['BERKSHIRE HATHAWAY INC'].rolling(window=60).cov(combined_strategies_returns_df['S&P 500'])
berkshire_rolling_beta = berkshire_rolling_covariance / rolling_variance
berkshire_rolling_beta.plot(figsize=(20, 10), xlim=(berkshire_rolling_beta.index.min(),combined_strategies_21day_std.index.max()), title="Berkshire Hathaway Inc. Beta")
81/28:
# Calculate a rolling window using the exponentially weighted moving average. 
# YOUR CODE HERE
ewm_std = combined_strategies_returns_df.ewm(halflife=21, adjust=False).std()
ewm.plot(figsize=(20, 10), xlim=(ewm_std.index.min(),ewm_std.index.max()), title="Exponentially Weighted Average (.std)")
#code below is for ewm using .mean . I spoke with Jeff in TA office hours and the code below is what I originally had. Jeff mentioned that there would be a discussion among the TA's.
#ewm_mean = combined_strategies_returns_df.ewm(halflife=21, adjust=False).mean()
#ewm.plot(figsize=(20, 10), xlim=(ewm_mean.index.min(),ewm_mean.index.max()), title="Exponentially Weighted Average (.mean)")
81/29:
# Calculate a rolling window using the exponentially weighted moving average. 
# YOUR CODE HERE
ewm_std = combined_strategies_returns_df.ewm(halflife=21, adjust=False).std()
ewm.plot(figsize=(20, 10), xlim=(ewm_std.index.min(),ewm_std.index.max()), title="Exponentially Weighted Average (.std)")
#code below is for ewm using .mean . I spoke with Jeff in TA office hours and the code below is what I originally had. Jeff mentioned that there would be a discussion among the TA's.
#ewm_mean = combined_strategies_returns_df.ewm(halflife=21, adjust=False).mean()
#ewm.plot(figsize=(20, 10), xlim=(ewm_mean.index.min(),ewm_mean.index.max()), title="Exponentially Weighted Average (.mean)")
81/30:
# Calculate a rolling window using the exponentially weighted moving average. 
# YOUR CODE HERE
ewm_std = combined_strategies_returns_df.ewm(halflife=21, adjust=False).std()
ewm.plot(figsize=(20, 10), xlim=(ewm_std.index.min(),ewm_std.index.max()), title="Exponentially Weighted Average (.std)")
#code below is for ewm using .mean . I spoke with Jeff in TA office hours and the code below is what I originally had. Jeff mentioned that there would be a discussion among the TA's.
#ewm_mean = combined_strategies_returns_df.ewm(halflife=21, adjust=False).mean()
#ewm.plot(figsize=(20, 10), xlim=(ewm_mean.index.min(),ewm_mean.index.max()), title="Exponentially Weighted Average (.mean)")
81/31:
# Calculate Beta for a single portfolio compared to the total market (S&P 500)
# (Your graph may differ, dependent upon which portfolio you are comparing)
# YOUR CODE HERE
# beta = covariance/variance - calculate rolling variance, rolling covariance
rolling_variance = combined_strategies_returns_df['S&P 500'].rolling(window=60).var()
berkshire_rolling_covariance = combined_strategies_returns_df['BERKSHIRE HATHAWAY INC'].rolling(window=60).cov(combined_strategies_returns_df['S&P 500'])
berkshire_rolling_beta = berkshire_rolling_covariance / rolling_variance
berkshire_rolling_beta.plot(figsize=(20, 10), xlim=(berkshire_rolling_beta.index.min(),combined_strategies_21day_std.index.max()), title="Berkshire Hathaway Inc. Beta")
81/32:
# Construct a correlation table
# YOUR CODE HERE
combined_strategies_correlation = combined_strategies_returns_df.corr()
combined_strategies_correlation
combined_strategies_correlation.style.background_gradient(cmap='YlGn_r')
81/33:
# Calculate a rolling window using the exponentially weighted moving average. 
# YOUR CODE HERE
ewm_std = combined_strategies_returns_df.ewm(halflife=21, adjust=False).std()
ewm.plot(figsize=(20, 10), xlim=(ewm_std.index.min(),ewm_std.index.max()), title="Exponentially Weighted Average (.std)")
#code below is for ewm using .mean . I spoke with Jeff in TA office hours and the code below is what I originally had. Jeff mentioned that there would be a discussion among the TA's.
#ewm_mean = combined_strategies_returns_df.ewm(halflife=21, adjust=False).mean()
#ewm.plot(figsize=(20, 10), xlim=(ewm_mean.index.min(),ewm_mean.index.max()), title="Exponentially Weighted Average (.mean)")
84/1:
# Define the base request URL
request_url = "https://www.quandl.com/api/v3/datasets/WIKI/MSFT.json?api_key="

# Concatenate request_url and api_key. Store as new variable
request_url = request_url + api_key
print(request_url)
84/2:
# Initial imports
from dotenv import load_dotenv
import os
84/3: load_dotenv()
84/4: api_key = os.getenv("QUANDL_API_KEY")
84/5: print(type(api_key))
84/6:
# Define the base request URL
request_url = "https://www.quandl.com/api/v3/datasets/WIKI/MSFT.json?api_key="

# Concatenate request_url and api_key. Store as new variable
request_url = request_url + api_key
print(request_url)
84/7:
# Execute get request
response = requests.get(request_url)
84/8:
# Execute get request
getrequest = requests.get(request_url).json()
print(json.dump(getrequest, indent =4))
84/9:
# Initial imports
from dotenv import load_dotenv
import os
import requests
84/10:
# Execute get request
getrequest = requests.get(request_url).json()
print(json.dump(getrequest, indent =4))
84/11:
# Execute get request
getrequest = requests.get(request_url).json()
print(json.dumps(getrequest, indent =4))
84/12:
# Initial imports
from dotenv import load_dotenv
import os
import requests
import json
84/13:
# Execute get request
getrequest = requests.get(request_url).json()
print(json.dumps(getrequest, indent =4))
84/14:
api_key = os.getenv("QUANDL_API_KEY")
api_key_alpaca = os.getenv("ALPACA_API_KEY")
84/15:
print(type(api_key))
print(api_key_alpaca)
84/16:
api_key = os.getenv("QUANDL_API_KEY")
api_key_alpaca = os.getenv("ALPACA_API_KEY")
api_key_alpaca_secret = os.getenv("ALPACA_API_SECRET_KEY")
84/17:
print(type(api_key))
print(api_key_alpaca)
print(api_key_alpaca_secret)
84/18:
api_key = os.getenv("QUANDL_API_KEY")
api_key_alpaca = os.getenv("ALPACA_API_KEY")
api_key_alpaca_secret = os.getenv("ALPACA_SECRET_KEY")
84/19:
print(type(api_key))
print(api_key_alpaca)
print(api_key_alpaca_secret)
89/1:
# Initial imports
import os
import requests
import pandas as pd
from dotenv import load_dotenv
import alpaca_trade_api as tradeapi

%matplotlib inline
89/2:
# Initial imports
import os
import requests
import pandas as pd
from dotenv import load_dotenv
import alpaca_trade_api as tradeapi

%matplotlib inline
89/3:
# Initial imports
import os
import requests
import pandas as pd
from dotenv import load_dotenv
import alpaca_trade_api as tradeapi

%matplotlib inline
89/4:
# Initial imports
import os
import requests
import pandas as pd
from dotenv import load_dotenv
import alpaca_trade_api as tradeapi

%matplotlib inline
92/1:
# Initial imports
import os
import requests
import pandas as pd
from dotenv import load_dotenv
import alpaca_trade_api as tradeapi

%matplotlib inline
92/2:
# Initial imports
import os
import requests
import pandas as pd
from dotenv import load_dotenv
import alpaca_trade_api as tradeapi

%matplotlib inline
92/3:
# Initial imports
import os
import requests
import pandas as pd
from dotenv import load_dotenv
import alpaca_trade_api as tradeapi
%matplotlib inline
93/1:
print(type(api_key))
print(api_key_alpaca)
print(api_key_alpaca_secret)
93/2:
# Initial imports
from dotenv import load_dotenv
import os
import requests
import json
93/3:
# Initial imports
from dotenv import load_dotenv
import os
import requests
import json
93/4: load_dotenv()
93/5:
api_key = os.getenv("QUANDL_API_KEY")
api_key_alpaca = os.getenv("ALPACA_API_KEY")
api_key_alpaca_secret = os.getenv("ALPACA_SECRET_KEY")
93/6:
print(type(api_key))
print(api_key_alpaca)
print(api_key_alpaca_secret)
96/1:
# Initial imports
import os
import requests
import pandas as pd
from dotenv import load_dotenv
import alpaca_trade_api as tradeapi
%matplotlib inline
98/1:
import pandas as pd
import numpy as np
import datetime as dt
from pathlib import Path
%matplotlib inline
98/2:
# Reading whale returns
whale_returns_csv = Path("Resources/whale_returns.csv")
# YOUR CODE HERE
98/3:
# Count nulls
# YOUR CODE HERE
98/4:
# Drop nulls
# YOUR CODE HERE
98/5:
# Reading algorithmic returns
algo_returns_csv = Path("Resources/algo_returns.csv")
# YOUR CODE HERE
98/6:
# Count nulls
# YOUR CODE HERE
98/7:
# Drop nulls
# YOUR CODE HERE
98/8:
# Reading S&P 500 Closing Prices
sp500_history_csv = Path("Resources/sp500_history.csv")
# YOUR CODE HERE
98/9:
# Check Data Types
# YOUR CODE HERE
98/10:
# Fix Data Types
# YOUR CODE HERE
98/11:
# Calculate Daily Returns
# YOUR CODE HERE
98/12:
# Drop nulls
# YOUR CODE HERE
98/13:
# Rename Column
# YOUR CODE HERE
98/14:
# Concatenate all DataFrames into a single DataFrame
# YOUR CODE HERE
98/15:
# Plot daily returns
# YOUR CODE HERE
98/16:
# Plot cumulative returns
# YOUR CODE HERE
98/17:
# Box plot to visually show risk
# YOUR CODE HERE
98/18:
# Daily Standard Deviations
# Calculate the standard deviation for each portfolio. 
# Which portfolios are riskier than the S&P 500?
# YOUR CODE HERE
98/19:
# Determine which portfolios are riskier than the S&P 500
# YOUR CODE HERE
98/20:
# Calculate the annualized standard deviation (252 trading days)
# YOUR CODE HERE
98/21:
# Calculate and plot the rolling standard deviation for
# the S&P 500 and whale portfolios using a 21 trading day window
# YOUR CODE HERE
98/22:
# Construct a correlation table
# YOUR CODE HERE
98/23:
# Calculate Beta for a single portfolio compared to the total market (S&P 500)
# (Your graph may differ, dependent upon which portfolio you are comparing)
# YOUR CODE HERE
98/24:
# Calculate a rolling window using the exponentially weighted moving average. 
# YOUR CODE HERE
98/25:
# Calculate annualized Sharpe Ratios
# YOUR CODE HERE
98/26:
# Visualize the sharpe ratios as a bar plot
# YOUR CODE HERE
98/27:
# Read the first stock
# YOUR CODE HERE
98/28:
# Read the second stock
# YOUR CODE HERE
98/29:
# Read the third stock
# YOUR CODE HERE
98/30:
# Concatenate all stocks into a single DataFrame
# YOUR CODE HERE
98/31:
# Reset the index
# YOUR CODE HERE
98/32:
# Pivot so that each column of prices represents a unique symbol
# YOUR CODE HERE
98/33:
# Drop Nulls
# YOUR CODE HERE
98/34:
# Calculate weighted portfolio returns
weights = [1/3, 1/3, 1/3]
# YOUR CODE HERE
98/35:
# Add your "Custom" portfolio to the larger dataframe of fund returns
# YOUR CODE HERE
98/36:
# Only compare dates where return data exists for all the stocks (drop NaNs)
# YOUR CODE HERE
98/37:
# Risk
# YOUR CODE HERE
98/38:
# Rolling
# YOUR CODE HERE
98/39:
# Annualized Sharpe Ratios
# YOUR CODE HERE
98/40:
# Visualize the sharpe ratios as a bar plot
# YOUR CODE HERE
98/41:
# Create a correlation analysis
# YOUR CODE HERE
98/42:
# Beta
# YOUR CODE HERE
   1: %history -g
   2: %history -g -f filename
   3: %history -g -f whatle_analysis-checkpoints.jpynb
